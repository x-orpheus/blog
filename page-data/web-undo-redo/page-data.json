{"componentChunkName":"component---src-templates-blog-post-js","path":"/web-undo-redo/","webpackCompilationHash":"3a736f73a33d1a51e4ed","result":{"data":{"site":{"siteMetadata":{"title":"云音乐大前端专栏","author":"云音乐大前端团队","siteUrl":"https://musicfe.dev"}},"markdownRemark":{"id":"31c6acca-ca28-578f-9819-791abb773043","excerpt":"header.png 背景 前不久，我参与开发了团队中的一个 web 应用，其中的一个页面操作如下图所示： demo.gif 这个制作间页面有着类似 PPT…","html":"<p><img src=\"https://p1.music.126.net/kPh7uDkk3AzGU9lK-YkSEA==/109951164305172513.png\" alt=\"header.png\"></p>\n<h3>背景</h3>\n<p>前不久，我参与开发了团队中的一个 web 应用，其中的一个页面操作如下图所示：</p>\n<p><img src=\"https://p1.music.126.net/oo9XzhvmIfZvEZXh6S84MQ==/109951164293216185.gif\" alt=\"demo.gif\"></p>\n<p>这个制作间页面有着类似 PPT 的交互：从左侧的工具栏中选择元素放入中间的画布、在画布中可以删除、操作（拖动、缩放、旋转等）这些元素。</p>\n<p>在这个编辑过程中，让用户能够进行操作的<strong>撤销、重做</strong>会提高编辑效率，大大提高用户体验，而本文要讲的正是在这个功能实现中的探索与总结。</p>\n<h3>功能分析</h3>\n<p>用户的一系列操作会改变页面的状态：</p>\n<p><img src=\"https://p1.music.126.net/opf3w_dnhE1LiHzfk4mtWg==/109951164300204465.png\" alt=\"state.png\"></p>\n<p>在进行了某个操作后，用户有能力回到之前的某个状态，即<strong>撤销</strong>：</p>\n<p><img src=\"https://p1.music.126.net/8yMqFNDtZxyKlXHx9GabyQ==/109951164300221846.png\" alt=\"undo.png\"></p>\n<p>在撤销某个操作后，用户有能力再次恢复这个操作，即<strong>重做</strong>：</p>\n<p><img src=\"https://p1.music.126.net/FCxbMX-UWdhE9HuVwlhP-w==/109951164300209970.png\" alt=\"redo.png\"></p>\n<p>当页面处于某个历史状态时，这时用户进行了某个操作后，这个状态后面的状态会被抛弃，此时产生一个新的状态分支：\n<img src=\"https://p1.music.126.net/rGhZveBuHGSUYb_N5PPv8A==/109951164300259778.png\" alt=\"branch.png\"></p>\n<p>下面，开始实现这些逻辑。</p>\n<h3>功能初实现</h3>\n<p>基于以上的分析，实现撤销重做功能需要实现：</p>\n<ul>\n<li>保存用户的每个操作；</li>\n<li>针对每个操作设计与之对应的一个撤销逻辑；</li>\n<li>实现撤销重做的逻辑；</li>\n</ul>\n<h4>第一步：数据化每一个操作</h4>\n<p>操作造成的状态改变可以用语言来描述，如下图，页面上有一个绝对定位的 <code class=\"language-text\">div</code> 和 一个 <code class=\"language-text\">button</code>，每次点击 <code class=\"language-text\">button</code> 会让 <code class=\"language-text\">div</code> 向右移动 <code class=\"language-text\">10px</code>。这个点击操作可以被描述为：<code class=\"language-text\">div</code> 的样式属性 <code class=\"language-text\">left</code> 增加 <code class=\"language-text\">10px</code>。</p>\n<p><img src=\"https://p1.music.126.net/XjG7u720WlyIS_iipVHRwA==/109951164298493717.png\" alt=\"div.png\"></p>\n<p>显然，JavaScript 并不认识这样的描述，需要将这份描述翻译成 JavaScript 认识的语言：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> action <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'changePosition'</span><span class=\"token punctuation\">,</span>\n    params<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        target<span class=\"token punctuation\">:</span> <span class=\"token string\">'left'</span><span class=\"token punctuation\">,</span>\n        value<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上面代码中使用变量 <code class=\"language-text\">name</code> 表示操作具体的名称，<code class=\"language-text\">params</code> 存储了该操作的具体数据。不过 JavaScript 目前仍然不知道如何使用这个它，还需要一个执行函数来指定如何使用上面的数据：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">changePosition</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> property<span class=\"token punctuation\">,</span> distance <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> params<span class=\"token punctuation\">;</span>\n    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    data<span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> distance<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中，<code class=\"language-text\">data</code> 为应用的状态数据，<code class=\"language-text\">params</code> 为 <code class=\"language-text\">action.params</code>。</p>\n<h4>第二步：编写操作对应的撤销逻辑</h4>\n<p>撤销函数中结构与执行函数类似，也应该能获取到 <code class=\"language-text\">data</code> 和 <code class=\"language-text\">action</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">changePositionUndo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> property<span class=\"token punctuation\">,</span> distance <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> params<span class=\"token punctuation\">;</span>\n    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    data<span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> distance<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>所以，<code class=\"language-text\">action</code> 的设计应当同时满足执行函数和撤销函数的逻辑。</p>\n<h4>第三步：撤销、重做处理</h4>\n<p>上述的 <code class=\"language-text\">action</code>、执行函数、撤销函数三者作为一个整体共同描述了一个操作，所以存储时三者都要保存下来。</p>\n<p>这里基于约定进行绑定：执行函数名等于操作的 <code class=\"language-text\">name</code> ，撤销函数名等于 <code class=\"language-text\">name + &#39;Undo&#39;</code>，这样就只需要存储 <code class=\"language-text\">action</code>，隐式地也存储了执行函数和撤销函数。</p>\n<p>编写一个全局模块存放函数、状态等：<code class=\"language-text\">src/manager.js</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> functions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">changePosition</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">changePositionUndo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    actions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    undoActions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">getFunction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> functions<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>那么，点击按钮会产生一个新的操作，我们需要做的事情有三个：</p>\n<ul>\n<li>存储操作的 <code class=\"language-text\">action</code>；</li>\n<li>执行该操作；</li>\n<li>如果处于历史节点，需要产生新的操作分支；</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> manager <span class=\"token keyword\">from</span> <span class=\"token string\">'src/manager.js'</span><span class=\"token punctuation\">;</span>\n\nbuttonElem<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    manager<span class=\"token punctuation\">.</span>actions<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">'changePosition'</span><span class=\"token punctuation\">,</span>\n        params<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> target<span class=\"token punctuation\">:</span> <span class=\"token string\">'left'</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> execFn <span class=\"token operator\">=</span> manager<span class=\"token punctuation\">.</span><span class=\"token function\">getFunction</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    manager<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token function\">execFn</span><span class=\"token punctuation\">(</span>manager<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>manager<span class=\"token punctuation\">.</span>undoActions<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        manager<span class=\"token punctuation\">.</span>undoActions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其中，<code class=\"language-text\">undoActions</code> 存放的是撤销的操作的 <code class=\"language-text\">action</code>，这里清空表示抛弃当前节点以后的操作。将 <code class=\"language-text\">action</code> 存进 <code class=\"language-text\">manager.actions</code> ，这样需要撤销操作的时候，直接取出 <code class=\"language-text\">manager.actions</code> 中最后一个 <code class=\"language-text\">action</code>，找到对应撤销函数并执行即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> manager <span class=\"token keyword\">from</span> <span class=\"token string\">'src/manager.js'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">undo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> action <span class=\"token operator\">=</span> manager<span class=\"token punctuation\">.</span>actions<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> undoFn <span class=\"token operator\">=</span> manager<span class=\"token punctuation\">.</span><span class=\"token function\">getFunction</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>action<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">Undo</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    manager<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token function\">undoFn</span><span class=\"token punctuation\">(</span>manager<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    manager<span class=\"token punctuation\">.</span>undoActions<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>需要重做的时候，取出 <code class=\"language-text\">manager.undoActions</code> 中最后的 <code class=\"language-text\">action</code>，找到对应执行函数并执行。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> manager <span class=\"token keyword\">from</span> <span class=\"token string\">'src/manager.js'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">redo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> action <span class=\"token operator\">=</span> manager<span class=\"token punctuation\">.</span>undoActions<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> execFn <span class=\"token operator\">=</span> manager<span class=\"token punctuation\">.</span><span class=\"token function\">getFunction</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    manager<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token function\">execFn</span><span class=\"token punctuation\">(</span>manager<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>模式优化：命令模式</h3>\n<p>以上代码可以说已经基本满足了功能需求，但是在我看来仍然存在一些问题：</p>\n<ul>\n<li>管理分散：某个操作的 <code class=\"language-text\">action</code>、执行函数、撤销函数分开管理。当项目越来越大时将会维护困难；</li>\n<li>职责不清：并没有明确规定执行函数、撤销函数、状态的改变该交给业务组件执行还是给全局管理者执行，这不利于组件和操作的复用；</li>\n</ul>\n<p>想有效地解决以上问题，需要找到一个合适的新模式来组织代码，我选择了命令模式。</p>\n<h4>命令模式简介</h4>\n<p>简单来说，命令模式将方法、数据都封装到单一的对象中，对调用方与执行方进行解耦，达到职责分离的目的。</p>\n<p>以顾客在餐厅吃饭为例子：</p>\n<ul>\n<li>顾客点餐时，选择想吃的菜，提交一份点餐单</li>\n<li>厨师收到这份点餐单后根据内容做菜</li>\n</ul>\n<p>期间，顾客和厨师之间并没有见面交谈，而是通过一份点餐单来形成联系，这份点餐单就是一个命令对象，这样的交互模式就是命令模式。</p>\n<h4>action + 执行函数 + 撤销函数 = 操作命令对象</h4>\n<p>为了解决<strong>管理分散</strong>的问题，可以把一个操作的 <code class=\"language-text\">action</code>、执行函数、撤销函数作为一个整体封装成一个命令对象：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ChangePositionCommand</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">property<span class=\"token punctuation\">,</span> distance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>property <span class=\"token operator\">=</span> property<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如：'left'</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>distance <span class=\"token operator\">=</span> distance<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如： 10</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> newState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state <span class=\"token punctuation\">}</span>\n        newState<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>property<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>distance<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> newState<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">undo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> newState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state <span class=\"token punctuation\">}</span>\n        newState<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>property<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>distance<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> newState<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>业务组件只关心命令对象的生成和发送</h4>\n<p>在状态数据处理过程中往往伴随着一些副作用，这些与数据耦合的逻辑会大大降低组件的复用性。因此，业务组件不用关心数据的修改过程，而是专注自己的职责：生成操作命令对象并发送给状态管理者。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> manager <span class=\"token keyword\">from</span> <span class=\"token string\">'src/manager'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ChangePositionCommand <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'src/commands'</span><span class=\"token punctuation\">;</span>\n\nbuttonElem<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> command <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChangePositionCommand</span><span class=\"token punctuation\">(</span><span class=\"token string\">'left'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    manager<span class=\"token punctuation\">.</span><span class=\"token function\">addCommand</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>状态管理者只关心数据变更和操作命令对象治理</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Manager</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commands <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>undoCommands <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">addCommand</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">command</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> command<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commands<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>undoCommands <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 产生新分支</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">undo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> command <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commands<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> command<span class=\"token punctuation\">.</span><span class=\"token function\">undo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>undoCommands<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">redo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> command <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>undoCommands<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> command<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commands<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Manger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这样的模式已经可以让项目的代码变得健壮，看起来已经很不错了，但是能不能更好呢？</p>\n<h3>模式进阶：数据快照式</h3>\n<p>命令模式要求开发者针对每一个操作都要额外开发一个撤销函数，这无疑是麻烦的。接下来要介绍的数据快照式就是要改进这个缺点。</p>\n<p>数据快照式通过保存每次操作后的数据快照，然后在撤销重做的时候通过历史快照恢复页面，模式模型如下：</p>\n<p><img src=\"https://p1.music.126.net/8wMOq3EA39MvXj8rldB_2w==/109951164226906444.png\" alt=\"1.jpeg\"></p>\n<p>要使用这种模式是有要求的：</p>\n<ul>\n<li>应用的状态数据需要集中管理，不应该分散在各个组件；</li>\n<li>数据更改流程中有统一的地方可以做数据快照存储；</li>\n</ul>\n<p>这些要求不难理解，既然要产生数据快照，集中管理才会更加便利。基于这些要求，我选择了市面上较为流行的 <a href=\"https://redux.js.org/\">Redux</a> 来作为状态管理器。</p>\n<h4>状态数据结构设计</h4>\n<p>按照上面的模型图，Redux 的 <code class=\"language-text\">state</code> 可以设计成：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    timeline<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    current<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    limit<span class=\"token punctuation\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>代码中，各个属性的含义为：</p>\n<ul>\n<li><code class=\"language-text\">timeline</code>：存储数据快照的数组；</li>\n<li><code class=\"language-text\">current</code>：当前数据快照的指针，为 <code class=\"language-text\">timeline</code> 的索引；</li>\n<li>\n<p><code class=\"language-text\">limit</code>：规定了 <code class=\"language-text\">timeline</code> 的最大长度，防止存储的数据量过大；</p>\n<h4>数据快照生成的方式</h4>\n</li>\n</ul>\n<p>假设应用初始的状态数据为：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> left<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    timeline<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    current<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    limit<span class=\"token punctuation\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>进行了某个操作后，<code class=\"language-text\">left</code> 加 100，有些新手可能会直接这么做：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">cont newData <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\nnewData<span class=\"token punctuation\">.</span>left <span class=\"token operator\">+=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\nstate<span class=\"token punctuation\">.</span>timeline<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstate<span class=\"token punctuation\">.</span>current <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这显然是错误的，因为 JavaScript 的对象是引用类型，变量名只是保存了它们的引用，真正的数据存放在堆内存中，所以 <code class=\"language-text\">data</code> 和 <code class=\"language-text\">newData</code> 共享一份数据，所以历史数据和当前数据都会发生变化。</p>\n<h5>方式一：使用深拷贝</h5>\n<p>深拷贝的实现最简单的方法就是使用 JSON 对象的原生方法：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> newData <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>或者，借助一些工具比如 lodash：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> newData <span class=\"token operator\">=</span> lodash<span class=\"token punctuation\">.</span><span class=\"token function\">cloneDeep</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>不过，深拷贝可能出现循环引用而引起的死循环问题，而且，深拷贝会拷贝每一个节点，这样的方式带来了无谓的性能损耗。</p>\n<h5>方式二：构建不可变数据</h5>\n<p>假设有个对象如下，需要修改第一个 <code class=\"language-text\">component</code> 的 <code class=\"language-text\">width</code> 为 <code class=\"language-text\">200</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    components<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'rect'</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>  height<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'triangle'</span><span class=\"token punctuation\">:</span> width<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>目标属性的在对象树中的路径为：<code class=\"language-text\">[&#39;components&#39;, 0, &#39;width&#39;]</code>，这个路径上有些数据是引用类型，为了不造成共享数据的变化，这个引用类型要先变成一个新的引用类型，如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> newState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nnewState<span class=\"token punctuation\">.</span>components <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>state<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nnewState<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这时你就可以放心修改目标值了：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">newState<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">.</span>components<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 200, 100</span></code></pre></div>\n<p>这样的方式只修改了目标属性节点的路径上的引用类型值，其他分支上的值是不变的，这样节省了不少内存。为了避免每次都一层一层去修改，可以将这个处理封装成一个工具函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> newState <span class=\"token operator\">=</span> <span class=\"token function\">setIn</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'components'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'width'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">setIn</code> 源码：<a href=\"https://github.com/cwajs/cwa-immutable/blob/master/src/setIn.js\">https://github.com/cwajs/cwa-immutable/blob/master/src/setIn.js</a></p>\n<h4>数据快照处理逻辑</h4>\n<p>进行某个操作，<code class=\"language-text\">reducer</code> 代码为：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">operationReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> current<span class=\"token punctuation\">,</span> limit <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> newData <span class=\"token operator\">=</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 省略过程</span>\n    state<span class=\"token punctuation\">.</span>timeline <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>timeline<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> current <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    state<span class=\"token punctuation\">.</span>timeline<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    state<span class=\"token punctuation\">.</span>timeline <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>timeline<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    state<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>timeline<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>有两个地方需要解释：</p>\n<ul>\n<li><code class=\"language-text\">timline.slice(0, current + 1)</code>：这个操作是前文提到的，进行新操作时，应该抛弃当前节点后的操作，产生一个新的操作分支；</li>\n<li>\n<p><code class=\"language-text\">timline.slice(-limit)</code>：表示只保留最近的 <code class=\"language-text\">limit</code> 个数据快照；</p>\n<h4>使用高阶 reducer</h4>\n</li>\n</ul>\n<p>在实际项目中，通常会使用 <a href=\"https://redux.js.org/api/combinereducers\">combineReducers</a> 来模块化 <code class=\"language-text\">reducer</code>，这种情况下，在每个 <code class=\"language-text\">reducer</code> 中都要重复处理以上的逻辑。这时候就可以使用高阶 <code class=\"language-text\">reducer</code> 函数来抽取公用逻辑：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">highOrderReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">reducer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> timeline<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">,</span> limit <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 执行真实的业务reducer</span>\n    <span class=\"token keyword\">const</span> newState <span class=\"token operator\">=</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>timeline<span class=\"token punctuation\">[</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// timeline处理</span>\n    state<span class=\"token punctuation\">.</span>timeline <span class=\"token operator\">=</span> timeline<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> current <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    state<span class=\"token punctuation\">.</span>timeline<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    state<span class=\"token punctuation\">.</span>timeline <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>timeline<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    state<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>timeline<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 真实的业务reducer</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'xxx'</span><span class=\"token punctuation\">:</span>\n            newState <span class=\"token operator\">=</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> newState<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token function\">highOrderReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这个高阶 <code class=\"language-text\">reducer</code> 使用 <code class=\"language-text\">const newState = reducer(timeline[current], action)</code> 来对业务 <code class=\"language-text\">reducer</code> 隐藏数据快照队列的数据结构，使得业务 <code class=\"language-text\">reducer</code> 对撤销重做逻辑无感知，实现功能可拔插。</p>\n<h4>增强高阶 reducer，加入撤销重做逻辑</h4>\n<p>撤销重做时也应该遵循 Redux 的数据修改方式使用 <code class=\"language-text\">store.dispatch</code>，为：</p>\n<ul>\n<li><code class=\"language-text\">store.dispatch({ type: &#39;undo&#39; })</code> ;</li>\n<li><code class=\"language-text\">store.dispatch({ type: &#39;redo&#39; })</code>;</li>\n</ul>\n<p>这两种 <code class=\"language-text\">action</code> 不应该进入到业务 <code class=\"language-text\">reducer</code>，需要进行拦截：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">highOrderReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">reducer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 进行 undo、redo 的拦截</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'undo'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n            current<span class=\"token punctuation\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">.</span>current <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 进行 undo、redo 的拦截</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'redo'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n            current<span class=\"token punctuation\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>timeline<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">.</span>current <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> timeline<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">,</span> limit <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> newState <span class=\"token operator\">=</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>timeline<span class=\"token punctuation\">[</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    state<span class=\"token punctuation\">.</span>timeline <span class=\"token operator\">=</span> timeline<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> current <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    state<span class=\"token punctuation\">.</span>timeline<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    state<span class=\"token punctuation\">.</span>timeline <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>timeline<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    state<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>timeline<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>使用 react-redux 在组件中获取状态</h4>\n<p>我在项目中使用的是 <a href=\"https://reactjs.org\">React</a> 和 <a href=\"https://react-redux.js.org/\">react-redux</a>，由于 <code class=\"language-text\">state</code>  的数据结构发生了变化，所以在组件中获取状态的写法也要相应作出调整：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> connect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mapStateToProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> currentState <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>timeline<span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>SomeComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>然而，这样的写法让组件感知到了撤销重做的数据结构，与上面所说的功能可拔插明显相悖，我通过重写 <code class=\"language-text\">store.getState</code> 方法来解决：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> originGetState <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nstore<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">originGetState</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>timeline<span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>总结</h3>\n<p>本文围绕撤销重做功能实现的讲解到此结束，在实现该功能后引入了命令模式来使得代码结构更加健壮，最后改进成数据快照式，从而让整个应用架构更加优雅。</p>\n<h3>参考资料</h3>\n<ul>\n<li>《JavaScript设计模式》Addy Osmani著</li>\n<li><a href=\"https://redux.js.org/introduction/getting-started\">Redux Documentation</a></li>\n</ul>\n<blockquote>\n<p>本文发布自 <a href=\"https://github.com/x-orpheus\">网易云音乐前端团队</a>，文章未经授权禁止任何形式的转载。我们对人才饥渴难耐，快来 <a href=\"mailto:grp.music-fe@corp.netease.com\">加入我们</a>！</p>\n</blockquote>","frontmatter":{"title":"Web 应用的撤销重做实现","date":"2019-08-22","description":"前不久，我参与开发了团队中的一个 web 应用，过程中让用户能够进行操作的**撤销、重做**会提高编辑效率，大大提高用户体验，而本文要讲的正是在这个功能实现中的探索与总结。"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/web-undo-redo/","previous":null,"next":{"fields":{"slug":"/javascript-functional-programming-quickstart/"},"frontmatter":{"title":"简明 JavaScript 函数式编程——入门篇"}}}}}