{"componentChunkName":"component---src-templates-blog-post-js","path":"/threejs/","webpackCompilationHash":"3237468b0c27b1c362d5","result":{"data":{"site":{"siteMetadata":{"title":"云音乐大前端专栏","author":"云音乐大前端团队","siteUrl":"https://musicfe.dev"}},"markdownRemark":{"id":"9ae2190f-e393-56a7-b6e4-8074a19590ab","excerpt":"本文作者 陈舒仪   图片来源 Pixabay，作者 Arek Socha  背景 Three.js（下面简称 Three） 作为一个 3D 库，不仅减少了我们学习 OpenGL 和 WebGL 的成本，还大大提升了前端在可视化上给用户带来更多的真实、沉浸式的体验。众所周知，Three 更多的是用 3D…","html":"<p><img src=\"https://p1.music.126.net/coS6Hb4AZdJfDJn6zZ6LYQ==/109951164807149208.jpg\"></p>\n<blockquote>\n<p>本文作者 陈舒仪  </p>\n</blockquote>\n<blockquote>\n<p>图片来源 Pixabay，作者 Arek Socha </p>\n</blockquote>\n<h2>背景</h2>\n<p>Three.js（下面简称 Three） 作为一个 3D 库，不仅减少了我们学习 OpenGL 和 WebGL 的成本，还大大提升了前端在可视化上给用户带来更多的真实、沉浸式的体验。众所周知，Three 更多的是用 3D 模型 + 投影相机 + 用户交互的方式来构建一个「3D 世界」。  </p>\n<p><a href=\"https://music.163.com/st/stoneplan-album?nm_style=sbt\">这张专辑，用眼睛去“听”</a> 活动中，在视觉在只能提供「2D 切图」的情况下，需要营造「3D 效果」。为了获得最好视觉体验，仅仅通过贴图很难做到，所以借此机会探索了 Three 的动效方案。</p>\n<p>运动往往是相对的，运动的本质可能是「物体动」或「相机动」，本文将从<strong>对象动画</strong>和<strong>相机动画</strong>上阐述对 Three 的动效探索。</p>\n<h2>Three 基础</h2>\n<h3>Camera 相机</h3>\n<p>Three 提供多种相机，其中应用最广的就是投影相机 (PerspectiveCamera) ，通过投影相机可以模拟人眼所看见的效果。  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> camera <span class=\"token operator\">=</span> <span class=\"token constant\">THREE</span><span class=\"token punctuation\">.</span><span class=\"token function\">PerspectiveCamera</span><span class=\"token punctuation\">(</span>fov<span class=\"token punctuation\">,</span> aspect<span class=\"token punctuation\">,</span> near<span class=\"token punctuation\">,</span> far<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fov</td>\n<td>fov 是视景体竖直方向上（非水平！）的张角，人类有接近180度的视角大小。该值可根据具体场景所需要的视角设置。</td>\n<td>45</td>\n</tr>\n<tr>\n<td>aspect            </td>\n<td>指定渲染结果的横向尺寸和纵向尺寸的比值。该值通常设置为窗口大小的宽高比。</td>\n<td>window.innerWidth / window.innerHeight</td>\n</tr>\n<tr>\n<td>near</td>\n<td>表示可以看到多近的物体。这个值通常很小。</td>\n<td>0.1</td>\n</tr>\n<tr>\n<td>far</td>\n<td>表示可以看到多远的物体。这个看情况设置，过大会导致渲染过多；太小可能又会看不到。</td>\n<td>1000</td>\n</tr>\n</tbody>\n</table>\n<p><strong>ps:</strong>  在 Three 中是没有「长度单位」这个概念的，它的数值都是根据比例计算得出，因此这里提到的 0.1 或 1000 都没有具体的含义，而是一种相对长度。</p>\n<p><img src=\"https://p1.music.126.net/5U3xg6C6V8ElZZQARnNTtw==/109951164576005872.png\" alt=\"相机\"></p>\n<p>可以看到，通过配置透视相机的相关参数，最终被渲染到屏幕上的，是在 <code class=\"language-text\">near</code> 到 <code class=\"language-text\">far</code> 之间，根据 <code class=\"language-text\">fov</code> 的值和物体远近 <code class=\"language-text\">d</code> 确定渲染高度，再通过 <code class=\"language-text\">aspect</code> 值来确定渲染宽度的。  </p>\n<h3>Scene 场景</h3>\n<p>有了相机，我们还要有场景，场景是为了让我们设置我们的空间内「有什么」和「放在哪」的。我们可以在场景中放置物体，光源还有相机。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> scene <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Scene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>是的，创建场景就是这么简单。</p>\n<h4>Group</h4>\n<p>为了以群的维度去区分场景中的物体，我们还可以在场景中添加 Group。有了 Group，可以更方便地操作一类物体。<br>\n比如创建一个 <code class=\"language-text\">stoneGroup</code>，并添加到场景中：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> stoneGroup <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstoneGroup<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'stoneGroup'</span><span class=\"token punctuation\">;</span>\n\nscene<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>stoneGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>为 Group 命名，允许我们通过 name 来获取到对应的 Group：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> group <span class=\"token operator\">=</span> scene<span class=\"token punctuation\">.</span><span class=\"token function\">getObjectByName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Geometry 几何体</h3>\n<p>Three 提供了多种类型的几何体，可以分为二维网格和三维网格。二维网格顾名思义只有两个维度，可以通过这种几何体创建简单的二维平面；三维网格允许你定义三维物体；在 Three 中定义一个几何体十分简单，只需要选择需要的几何体并传入相应参数创建即可。  </p>\n<p><a href=\"https://threejs.org/docs/index.html#api/en/geometries/BoxBufferGeometry\">查看Three提供的几何体</a>  </p>\n<p>如果看到 Three 提供的几何体，可以看到有的几何体中它分别提供 <code class=\"language-text\">Geometery</code> 和 <code class=\"language-text\">BufferGeometery</code> 版本，关于这两个的区别，可以看这里  <a href=\"https://stackoverflow.com/questions/54673268/difference-between-buffer-geometry-and-geometry/54673459\">回答</a>  </p>\n<p>大致意思就是使用 Buffer 版本的几何体相较于普通的几何体会将描述物体的数据存放在缓冲区中，减少内存消耗和 CPU 循环。通过它们提供的方法来看，使用 geometry 无疑是对新手友好的。</p>\n<p>创建几何体：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 创建立方体，传入长、宽和高</span>\n<span class=\"token keyword\">var</span> cubeGeometry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>CubeGeometry</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 创建球体，传入半径、宽片段数量和高片段数量</span>\n<span class=\"token keyword\">var</span> sphereGeometry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>SphereGeometry</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Material 材质</h3>\n<p>定义材质可以帮助我们决定一个物体在各种环境情况下的具体表现。同样 Three 也提供了多种材质。下面列举几个常用的材质。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MeshBasicMaterial</td>\n<td>基础材质，用它定义几何体上的简单颜色或线框</td>\n</tr>\n<tr>\n<td>MeshPhongMaterial</td>\n<td>受光照影响，用来创建光亮的物体</td>\n</tr>\n<tr>\n<td>MeshLambertMaterial</td>\n<td>受光照影响，用来创建不光亮的物体</td>\n</tr>\n<tr>\n<td>MeshDepthMaterial</td>\n<td>根据相机远近来决定如何给网格染色</td>\n</tr>\n</tbody>\n</table>\n<p>创建材质：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> basicMaterial <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>MeshBasicMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">:</span> <span class=\"token number\">0x666666</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> lambertMaterial <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>MeshLambertMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">:</span> <span class=\"token number\">0x666666</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> phongMaterial <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>MeshPhongMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">:</span> <span class=\"token number\">0x666666</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> wireMaterial <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>MeshBasicMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> wireframe<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">:</span> <span class=\"token number\">0x666666</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://p1.music.126.net/-zoGlUdd3PkSu7HHCJ1x4w==/109951164583628186.png?imageView&#x26;thumbnail=300x0\" alt=\"material\">   </p>\n<p>更多材质和相关信息，可以查看 <a href=\"https://threejs.org/docs/#api/en/materials/LineBasicMaterial\">材质</a>  </p>\n<h3>Mesh网格对象</h3>\n<p>需要添加到场景中，还需要依赖 Mesh。Mesh 是用来定义材质和几何体之间是如何粘合的，创建网格对象可以应用一个或多个材质和几何体。</p>\n<p>创建几何体相同材质不同的网格对象：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> cube <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Mesh</span><span class=\"token punctuation\">(</span>cubeGeometry<span class=\"token punctuation\">,</span> basicMaterial<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> cubePhong <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Mesh</span><span class=\"token punctuation\">(</span>cubeGeometry<span class=\"token punctuation\">,</span> phongMaterial<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nscene<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cube<span class=\"token punctuation\">,</span> cubePhong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>创建材质相同几何体不同的网格对象：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> cube <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Mesh</span><span class=\"token punctuation\">(</span>cubeGeometry<span class=\"token punctuation\">,</span> basicMaterial<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> sphere <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Mesh</span><span class=\"token punctuation\">(</span>sphereGeometry<span class=\"token punctuation\">,</span> basicMaterial<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nscene<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cube<span class=\"token punctuation\">,</span> sphere<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>创建拥有多个材质几何体的网格对象：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> phongMaterial <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>MeshPhongMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">:</span> <span class=\"token number\">0x666666</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> cubeMeshPhong <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Mesh</span><span class=\"token punctuation\">(</span>cubeGeometry<span class=\"token punctuation\">,</span> cubePhongMaterial<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> cubeMeshWire <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Mesh</span><span class=\"token punctuation\">(</span>cubeGeometry<span class=\"token punctuation\">,</span> wireMaterial<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 网格对象新增材质</span>\ncubeMeshPhong<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cubeMeshWire<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nscene<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cubeMeshPhong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Renderer 渲染器</h3>\n<p>有了场景和相机，我们还需要渲染器把对应的场景用对应的相机可见渲染出来，因此渲染器需要传入场景和相机参数。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 抗锯齿、canvas 是否支持 alpha 透明度、preserveDrawingBuffer 是否保存 BUFFER 直到手动清除</span>\n<span class=\"token keyword\">const</span> renderer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>WebGLRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    antialias<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> alpha<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> preserveDrawingBuffer<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrenderer<span class=\"token punctuation\">.</span><span class=\"token function\">setSize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrenderer<span class=\"token punctuation\">.</span>autoClear <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 清除颜色，第二个参数为 0 表示完全透明，适用于需要透出背景的场景</span>\nrenderer<span class=\"token punctuation\">.</span><span class=\"token function\">setClearColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x000000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrenderer<span class=\"token punctuation\">.</span><span class=\"token function\">setPixelRatio</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>devicePixelRatio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>为了在相机更新后所看见的场景，需要在循环渲染中加上</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">renderer<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">,</span> camera<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>有了相机场景和渲染器，我们已经可以看到初步的效果了。但3D世界里，静止的物体多无趣啊。于是我们尝试加入动画效果。</p>\n<h2>物体动画</h2>\n<h3>Animations</h3>\n<p>Three为动画提供了一系列方法。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">AnimationMixer</code></td>\n<td>作为特定对象的动画混合器，可以管理该对象的所有动画</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">AnimationAction</code>            </td>\n<td>为播放器指定对应的片段存储一系列行为，用来指定动画快慢，循环类型等</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">AnimationClip</code></td>\n<td>表示<strong>可重用的</strong>动画行为片段，用来指定一个动画的动画效果（放大缩小、上下移动等）</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">KeyframeTrack</code></td>\n<td>与时间相关的帧序列，传入时间和值，应用在指定对象的属性上。目前有 <code class=\"language-text\">BooleanKeyframeTrack</code> <code class=\"language-text\">VectorKeyframeTrack</code> 等。</td>\n</tr>\n</tbody>\n</table>\n<p>那么如何创建一个动画呢？下面这个例子给大家解释如何让网格对象进行简单的上下移动。</p>\n<p>创建特定对象的动画混合器：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 创建纹理</span>\n<span class=\"token keyword\">const</span> texture <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>TextureLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 使用纹理创建贴图</span>\n<span class=\"token keyword\">const</span> material <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>SpriteMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> map<span class=\"token punctuation\">:</span> texture<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">:</span> <span class=\"token number\">0x666666</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 使用贴图创建贴图对象</span>\n<span class=\"token keyword\">const</span> stone <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Sprite</span><span class=\"token punctuation\">(</span>material<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 为贴图对象创建动画混合器</span>\n<span class=\"token keyword\">const</span> mixer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>AnimationMixer</span><span class=\"token punctuation\">(</span>stone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>创建动画行为片段：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getClip</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> times <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关键帧时间数组，离散的时间点序列</span>\n    <span class=\"token keyword\">const</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 与时间点对应的值组成的数组</span>\n    <span class=\"token comment\">// 创建位置关键帧对象：0时刻对应位置0, 0, 0   10时刻对应位置150, 0, 0</span>\n    <span class=\"token keyword\">const</span> posTrack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>VectorKeyframeTrack</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stone.position'</span><span class=\"token punctuation\">,</span> times<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> duration <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>AnimationClip</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stonePosClip'</span><span class=\"token punctuation\">,</span> duration<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>posTrack<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>创建动画播放器，确定动画的表现：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> action <span class=\"token operator\">=</span> mixer<span class=\"token punctuation\">.</span><span class=\"token function\">clipAction</span><span class=\"token punctuation\">(</span><span class=\"token function\">getClip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\naction<span class=\"token punctuation\">.</span>timeScale <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 动画播放一个周期的时间</span>\naction<span class=\"token punctuation\">.</span>loop <span class=\"token operator\">=</span> <span class=\"token constant\">THREE</span><span class=\"token punctuation\">.</span>LoopPingPong<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 动画循环类型</span>\naction<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 播放</span></code></pre></div>\n<p>在循环绘制中更新混合器，保证动画的执行：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 更新动画</span>\n    <span class=\"token keyword\">const</span> delta <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clock<span class=\"token punctuation\">.</span><span class=\"token function\">getDelta</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mixer<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://p1.music.126.net/tMMqjXOZIzTzURMFXGwn9Q==/109951164583403656.gif\" alt=\"image\"></p>\n<p><a href=\"https://codepen.io/chenshuyi/pen/jOEwEBW\">codepen</a></p>\n<h3>贴图动画</h3>\n<p>有了 Animation 我们可以很简单地对物体的一些属性进行操作。但一些贴图相关的动画就很难用 Animation 来实现了，比如：  </p>\n<p><img src=\"https://p1.music.126.net/yyCRvxB_SXXvtebk1yUAmw==/109951164577471457.gif\" alt=\"箭头动图\"></p>\n<p>上图这种，无法通过改变物体的位置、大小等属性实现。于是，还有一种方案 —— 贴图动画。  </p>\n<p>类似在 CSS3 中对序列图片使用 <code class=\"language-text\">transform</code> 属性改变位置来达到的动画效果，实际上在 Three 中也可以使用贴图位移的方式实现。  </p>\n<p>首先，我们要有一个序列图：</p>\n<p><img src=\"https://p1.music.126.net/NBwpm3-g3isuPkL98Eqqug==/109951164532405066.png\" alt=\"箭头序列图\"></p>\n<p>作为纹理加载，并且增加到场景中：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arrowTexture <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>TextureLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>Arrow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> material <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>SpriteMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> map<span class=\"token punctuation\">:</span> arrowTexture<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">:</span> <span class=\"token number\">0xffffff</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> arrow <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Sprite</span><span class=\"token punctuation\">(</span>material<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nscene<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>arrow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>声明 <code class=\"language-text\">TextAnimator</code> 对象，实现纹理的位移：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">TextureAnimator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">texture<span class=\"token punctuation\">,</span> tilesHoriz<span class=\"token punctuation\">,</span> tilesVert<span class=\"token punctuation\">,</span> numTiles<span class=\"token punctuation\">,</span> tileDispDuration</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 纹理对象通过引用传入，之后可以直接使用update方法更新纹理位置</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tilesHorizontal <span class=\"token operator\">=</span> tilesHoriz<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tilesVertical <span class=\"token operator\">=</span> tilesVert<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 序列图中的帧数</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numberOfTiles <span class=\"token operator\">=</span> numTiles<span class=\"token punctuation\">;</span>\n    texture<span class=\"token punctuation\">.</span>wrapS <span class=\"token operator\">=</span> <span class=\"token constant\">THREE</span><span class=\"token punctuation\">.</span>RepeatWrapping<span class=\"token punctuation\">;</span>\n    texture<span class=\"token punctuation\">.</span>wrapT <span class=\"token operator\">=</span> <span class=\"token constant\">THREE</span><span class=\"token punctuation\">.</span>RepeatWrapping<span class=\"token punctuation\">;</span>\n    texture<span class=\"token punctuation\">.</span>repeat<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tilesHorizontal<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tilesVertical<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 每一帧停留时长</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tileDisplayDuration <span class=\"token operator\">=</span> tileDispDuration<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 当前帧停留时长</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentDisplayTime <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 当前帧</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentTile <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 更新函数，通过这个函数对纹理位移进行更新</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">milliSec</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentDisplayTime <span class=\"token operator\">+=</span> milliSec<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentDisplayTime <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tileDisplayDuration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentDisplayTime <span class=\"token operator\">-=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tileDisplayDuration<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentTile<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentTile <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numberOfTiles<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentTile <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">const</span> currentColumn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentTile <span class=\"token operator\">%</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tilesHorizontal<span class=\"token punctuation\">;</span>\n            texture<span class=\"token punctuation\">.</span>offset<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> currentColumn <span class=\"token operator\">/</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tilesHorizontal<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> currentRow <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentTile <span class=\"token operator\">/</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tilesHorizontal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            texture<span class=\"token punctuation\">.</span>offset<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> currentRow <span class=\"token operator\">/</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tilesVertical<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 传入一个一行里有 13 帧的序列图，每张序列图停留 75ms</span>\n<span class=\"token keyword\">const</span> arrowAni <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextureAnimator</span><span class=\"token punctuation\">(</span>arrowTexture<span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">75</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在循环绘制中更新，保证动画的执行：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">arrowAni<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>作为引用传入后，对贴图的修改会直接体现在使用该贴图的材质上。</p>\n<p><a href=\"https://codepen.io/chenshuyi/pen/YzPQPYd\">codepen</a></p>\n<h3>粒子动画</h3>\n<p>Three 中还提供了酷炫的粒子动画，使用继承自 Object3D 的 <code class=\"language-text\">Points</code> 类实现。有了 Points 类我们可以很方便地把一个几何体渲染成一组粒子，并对它们进行控制。  </p>\n<h4>创建粒子</h4>\n<p>创建粒子我们首先需要创建粒子的材质，可以使用 <code class=\"language-text\">PointsMaterial</code> 创建粒子材质。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> texture <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>TextureLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://p1.music.126.net/jgzbZtWZhDet2jWzED8BTw==/109951164579600342.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmaterial <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>PointsMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  color<span class=\"token punctuation\">:</span> <span class=\"token number\">0xffffff</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 映射到材质上的贴图</span>\n  map<span class=\"token punctuation\">:</span> texture<span class=\"token punctuation\">,</span>\n  size<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 粒子的大小是否和其与摄像机的距离有关，默认值 true</span>\n  sizeAttenuation<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 开启透明度测试，透明度低于0.5的片段会被丢弃，解决贴图边缘感问题</span>\nmaterial<span class=\"token punctuation\">.</span>alphaTest <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>有了粒子材质后，我们可以应用同一个材质批量创建一组粒子，只需要传入一个简单的几何体。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> particles <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Points</span><span class=\"token punctuation\">(</span> geometry<span class=\"token punctuation\">,</span> material <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如果你传入的是 <code class=\"language-text\">BoxGeometry</code> 你可能会得到这样的一组粒子</p>\n<p><img src=\"https://p1.music.126.net/WGQkrfq7Re7TLiKd2DJdRw==/109951164583388292.png?imageView&#x26;thumbnail=300x0\" alt=\"cube粒子\"></p>\n<p>还可以根据传入的 <code class=\"language-text\">Shape</code> 得到这样一组粒子</p>\n<p><img src=\"https://p1.music.126.net/Mcvd_DDjQa1y9TqtpNW6UA==/109951164583395525.png?imageView&#x26;thumbnail=300x0\" alt=\"fish粒子\"></p>\n<h4>粒子运动</h4>\n<p>但有趣的粒子绝不是静止的，而是有活动、有过程的。但如果自己动手实现一个粒子的运动又很复杂，因此希望借助一些<strong>第三方库</strong>实现粒子动画的缓动过程。</p>\n<h5>tween.js</h5>\n<p>tween.js 是一个小型的 JS 库，我们可以使用它为我们的动画声明变化。使用 tween.js 我们不需要关心运动的中间状态，只需要关注粒子的：</p>\n<ul>\n<li>起始位置</li>\n<li>最终位置</li>\n<li>缓动效果</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// srcPosition, targetPosition;</span>\ntweens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TWEEN<span class=\"token punctuation\">.</span>Tween</span><span class=\"token punctuation\">(</span>srcPosition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">easing</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TWEEN</span><span class=\"token punctuation\">.</span>Easing<span class=\"token punctuation\">.</span>Exponential<span class=\"token punctuation\">.</span>In<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// tweens最终位置、缓动时间</span>\ntweens<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>targetPosition<span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntweens<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>、</code></pre></div>\n<p><img src=\"https://p1.music.126.net/5GKLCqQUfUpUOgzIUX3MCg==/109951164583412634.gif\"></p>\n<p><a href=\"https://codepen.io/chenshuyi/pen/bGNRmPY\">codepen</a></p>\n<p>其实粒子动画的场景还有很多，我们可以用他们创造雪花飘散、穿梭效果，本质都是粒子的位置变化。</p>\n<h2>相机动画</h2>\n<p>相机在 3D 空间中充当人的眼睛，因此自然的相机动线可以保证交互的自然流畅。</p>\n<h3>Controls</h3>\n<p>Three 提供了一系列相机控件来控制场景中的相机轨迹，这些控件适用于大部分场景。使用 Controls 开发者可以不再需要去关心用户交互和相机移动的问题。  </p>\n<p>活动中也涉及到 <code class=\"language-text\">OrbitControls</code> 的使用，他提供了环绕物体旋转、平移和缩放的方法，但由于对使用二维贴图的情况下，旋转和缩放都容易穿帮，需要被禁止。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 创建轨迹</span>\n<span class=\"token keyword\">const</span> controls <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>OrbitControls</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>camera<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderer<span class=\"token punctuation\">.</span>domElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncontrols<span class=\"token punctuation\">.</span>enabled <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\ncontrols<span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Vector3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncontrols<span class=\"token punctuation\">.</span>minDistance <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\ncontrols<span class=\"token punctuation\">.</span>maxDistance <span class=\"token operator\">=</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">;</span>\ncontrols<span class=\"token punctuation\">.</span>minPolarAngle <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\ncontrols<span class=\"token punctuation\">.</span>maxPolarAngle <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 禁用缩放</span>\ncontrols<span class=\"token punctuation\">.</span>enableZoom <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 禁用旋转</span>\ncontrols<span class=\"token punctuation\">.</span>enableRotate <span class=\"token operator\">!</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\ncontrols<span class=\"token punctuation\">.</span>panSpeed <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 修改控件的默认触摸选项，设置为单指双指都为平移操作</span>\ncontrols<span class=\"token punctuation\">.</span>touches <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">ONE</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">THREE</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TOUCH</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PAN</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">TWO</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">THREE</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TOUCH</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PAN</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>camera<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>OrbitControl 还允许我们设置阻尼，设置该值表现为数值越接近 1 越难拖动，开启阻尼后需要我们手动 update 控件。 </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">controls<span class=\"token punctuation\">.</span>enableDamping <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\ncontrols<span class=\"token punctuation\">.</span>dampingFactor <span class=\"token operator\">=</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>查看源码可以看到，阻尼的实现就是依赖滑动时的 offset 乘上一个权重，在通过后续的update不断为 panOffset 乘上一个权重实现滑动难，撒手后再滑动一点距离。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// this method is exposed, but perhaps it would be better if we can make it private...</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\">// ...</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t\t<span class=\"token comment\">// ...</span>\n\n\t\t<span class=\"token comment\">// 平移</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> scope<span class=\"token punctuation\">.</span>enableDamping <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t    <span class=\"token comment\">// 开启阻尼后会在原本的位移上乘上一个权重</span>\n\t\t    scope<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">addScaledVector</span><span class=\"token punctuation\">(</span> panOffset<span class=\"token punctuation\">,</span> scope<span class=\"token punctuation\">.</span>dampingFactor <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\n\t\t\tscope<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span> panOffset <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// ...</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> scope<span class=\"token punctuation\">.</span>enableDamping <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t\t\tsphericalDelta<span class=\"token punctuation\">.</span>theta <span class=\"token operator\">*=</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> scope<span class=\"token punctuation\">.</span>dampingFactor <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tsphericalDelta<span class=\"token punctuation\">.</span>phi <span class=\"token operator\">*=</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> scope<span class=\"token punctuation\">.</span>dampingFactor <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 如果没有人为操作，随着时间推移，panOffset会越来越小</span>\n\t\t\tpanOffset<span class=\"token punctuation\">.</span><span class=\"token function\">multiplyScalar</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> scope<span class=\"token punctuation\">.</span>dampingFactor <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\n\t\t\tsphericalDelta<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\tpanOffset<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// ...</span>\n\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>官方也提供了 Controls 的 <a href=\"https://threejs.org/examples/?q=orbit#misc_controls_orbit\">例子</a> 供大家参考。</p>\n<h3>相机动线</h3>\n<p>如果不使用 Controls，仅仅是相机从一个点移动到另一个点，为了更平滑自然的相机轨迹，推荐使用贝塞尔曲线。  </p>\n<p>贝塞尔曲线是一个由起点、终点和控制点决定的一条时间相关的变化曲线。这里以二阶贝塞尔曲线为例，实现相机的曲线移动。（三维的点有点难说明白，这里用二维坐标来解释）</p>\n<p><img src=\"https://p1.music.126.net/7omSL-S5oCiOeVYUUB7FLA==/109951164577831486.gif\" alt=\"二阶贝塞尔曲线\"></p>\n<p>上图中小黑点的移动轨迹可以看做相机移动的曲线。</p>\n<p><img src=\"https://p1.music.126.net/HEPpSfrniHNHMkqGke3-Ww==/109951164577838846.png\" alt=\"贝塞尔公式\"></p>\n<p>从该公式来看，只需要确定 p0、p1 和 p2 三个点，在单位时间下我们可以获得一条确定的曲线。</p>\n<p>但是，换成坐标点要怎么做呢？</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 获得贝塞尔曲线</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getBezier</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p1<span class=\"token punctuation\">,</span> p2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 在指定范围内随机生成一个控制点</span>\n    <span class=\"token keyword\">const</span> cp <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        x<span class=\"token punctuation\">:</span> p1<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span> <span class=\"token operator\">+</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        z<span class=\"token punctuation\">:</span> p2<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 贝塞尔曲线公式，根据时间确定点的位置</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">deltat</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>p2<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        t <span class=\"token operator\">+=</span> deltat<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> t <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> x1<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">:</span> z1 <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> cx<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">:</span> cz <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> cp<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> x2<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">:</span> z2 <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> t<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> t<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> x1 <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> t <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> t<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> cx <span class=\"token operator\">+</span> t <span class=\"token operator\">*</span> t <span class=\"token operator\">*</span> x2<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> z <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> t<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> t<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> z1\n            <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> t <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> t<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> cz <span class=\"token operator\">+</span> t <span class=\"token operator\">*</span> t <span class=\"token operator\">*</span> z2<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> bezier <span class=\"token operator\">=</span> <span class=\"token function\">getBezier</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>为了从简，这里只实现了二维坐标的轨迹变化，但三维也是同理。  </p>\n<p>因为贝塞尔曲线是时间相关曲线，在每一次循环渲染中要传入时间来更新相机位置。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">animation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">bezier</span><span class=\"token punctuation\">(</span>clock<span class=\"token punctuation\">.</span><span class=\"token function\">getDelta</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    camera<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    camera<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> z<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>小结</h2>\n<p>没赶上 Three 的热潮，只能趁着活动需求给自己补补课了。在三维空间中，动画能够让空间中的物体更加生动，而相机的移动带给用户更强的空间感。</p>\n<p>本文介绍了基于 <code class=\"language-text\">Animation</code> 实现物体的简单运动、 <code class=\"language-text\">Texture</code> 实现贴图动画以及使用 <code class=\"language-text\">Points</code> 粒子化的物体动画方案；基于 <code class=\"language-text\">Controls</code> 和贝塞尔曲线的相机动画方案。  </p>\n<p>对 Three 有兴趣的朋友，可以通过 <a href=\"https://threejs.org/docs/index.html#manual/en/introduction/Creating-a-scene\">官方文档</a> 来学习，里面提供的例子覆盖了大部分场景。</p>\n<p>以上是我在活动中涉及到的一些动画方案，难免会出现理解偏差和表达错误，如果有更多的动效方案欢迎一起探讨~</p>\n<h2>参考资料</h2>\n<ul>\n<li><a href=\"https://threejs.org/docs/index.html#manual/en/introduction/Creating-a-scene\">Three.js文档</a></li>\n<li><a href=\"https://item.jd.com/12113317.html\">Three.js开发指南</a></li>\n<li><a href=\"https://aotu.io/notes/2017/08/28/getting-started-with-threejs/index.html\">Threejs现学现卖</a></li>\n<li><a href=\"https://juejin.im/post/5a1e7e7e51882503eb4b0a80\">一起炫起来 -- 3D粒子动画篇</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000018597975\">贝塞尔曲线算法之JS获取点</a></li>\n</ul>\n<blockquote>\n<p>本文发布自 <a href=\"https://github.com/x-orpheus\">网易云音乐前端团队</a>，文章未经授权禁止任何形式的转载。我们一直在招人，如果你恰好准备换工作，又恰好喜欢云音乐，那就 <a href=\"mailto:grp.music-fe@corp.netease.com\">加入我们</a>！</p>\n</blockquote>","frontmatter":{"title":"Three.js 动效方案","date":"2020-03-17","description":"Three.js（下面简称 Three） 作为一个 3D 库，不仅减少了我们学习 OpenGL 和 WebGL 的成本，还大大提升了前端在可视化上给用户带来更多的真实、沉浸式的体验。众所周知，Three 更多的是用 3D 模型 + 投影相机 + 用户交互的方式来构建一个「3D 世界」。"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/threejs/","previous":{"fields":{"slug":"/ssr-routing/"},"frontmatter":{"title":"支持动态路由的 React Server Side Rendering 实现"}},"next":{"fields":{"slug":"/singleton-pattern/"},"frontmatter":{"title":"从全局播放到单例模式"}}}}}