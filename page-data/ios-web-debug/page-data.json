{"componentChunkName":"component---src-templates-blog-post-js","path":"/ios-web-debug/","webpackCompilationHash":"5c9f7252e04a6e1707df","result":{"data":{"site":{"siteMetadata":{"title":"云音乐大前端专栏","author":"云音乐大前端团队","siteUrl":"https://musicfe.dev"}},"markdownRemark":{"id":"3358bdb7-f97b-50de-985d-27ad3999b3c8","excerpt":"封面 作者：imyzf 我们在开发 iOS App 内的前端页面时，有一个很大的痛点，页面无法使用 Safari Inspector 等工具调试。遇到了问题，我们只能想办法加 vConsole，或者注入 Weinre，或者盲改，实在不行就找客户端同学手动打包调试，总之排查问题的路途非常艰难。 在参考了 RN…","html":"<p><img src=\"https://p1.music.126.net/nupFrnwakHB27HcxWNEzLw==/109951165083764525.jpg\" alt=\"封面\"></p>\n<blockquote>\n<p>作者：<a href=\"https://github.com/imyzf\">imyzf</a></p>\n</blockquote>\n<p>我们在开发 iOS App 内的前端页面时，有一个很大的痛点，页面无法使用 Safari Inspector 等工具调试。遇到了问题，我们只能想办法加 vConsole，或者注入 Weinre，或者盲改，实在不行就找客户端同学手动打包调试，总之排查问题的路途非常艰难。</p>\n<p>在参考了 RN 和 Weex 等跨平台框架的开发工具后，我们发现使用模拟器调试是解决该问题的很好方法，我们将前端页面放到模拟器的 App 中运行，苹果就不会对其有限制，允许我们使用 Safari Inspector 调试了。</p>\n<p>Safari Inspector 是和 Chrome Devtools 类似的调试工具，由 Safari 浏览器自带，支持以下功能：</p>\n<p><img src=\"https://p1.music.126.net/-03dEVrHXccS8Us1cbXD7w==/109951164988993048.png\" alt=\"Safari Inspector 功能\"></p>\n<ul>\n<li>检查页面元素</li>\n<li>查看网络请求</li>\n<li>断点调试</li>\n<li>存储管理（Local Storage，Cookies 等）</li>\n<li>……</li>\n</ul>\n<p>这些功能是 vConsole、Weinre 等工具无法比拟的，可以帮助我们快速定位问题。</p>\n<p>基于这些原理，我们内部已经开发了一款工具，部分功能视频可以<a href=\"https://vodkgeyttp9c.vod.126.net/vodkgeyttp8/AFgSHXIV_2983686258_uhd.mp4?ts=1903399290&#x26;rid=7859AE92117216E8AD0E345795682128&#x26;rl=0&#x26;rs=STctySRAVdxsmldSQEmhbQBvLiuIOGGp&#x26;sign=a4d1c895b6f1d2b7c495f6ba5c9147a1&#x26;coverId=MnUYjQmLilWmfGfNgUN1WQ==/109951164945188805&#x26;infoId=198001\">点此预览</a>。但由于该工具和内部业务耦合较深，目前暂无开源计划。</p>\n<h2>前提条件</h2>\n<p>介绍这套方案之前，我们需要了解一下方案的前提条件：</p>\n<ul>\n<li>装有 macOS 和 Xcode 的电脑：由于苹果的限制，模拟器和 Xcode 只能在 macOS 上运行。Xcode 直接在 App Store 中安装即可，十分简单，无需其他操作。</li>\n<li>为模拟器构建的 App 包：由于模拟器是基于 x86 架构的，需要客户端开发同学提供为模拟器构建的包，和在手机上安装的包会有所不同。</li>\n<li>支持 URL Scheme 唤起的 App：承载前端页面的 App 必须支持用协议唤起并打开页面，才能用工具实现自动化，否则只能在 App 内手动点击相关链路打开页面。</li>\n</ul>\n<h2>总体流程</h2>\n<p><img src=\"https://p1.music.126.net/x0TZaP60albCfucfnzut7g==/109951164974167797.png\" alt=\"整体流程图\"></p>\n<p>我们的模拟器调试方案整体流程如上图所示：</p>\n<ol>\n<li>获取设备列表，提供给用户选择</li>\n<li>检查模拟器状态，如果没有启动，就启动该模拟器</li>\n<li>检查是否安装对应的 App，如果没有安装，就下载安装包进行安装</li>\n<li>启动 App，并打开需要调试的页面</li>\n<li>根据页面类型，使用对应的工具进行调试（例如 Safari Inspector）</li>\n</ol>\n<h2>核心工具</h2>\n<p>我们在实现本方案时，主要基于以下工具：</p>\n<ul>\n<li><a href=\"https://www.manpagez.com/man/1/xcrun/\">xcrun</a>：Xcode 提供了一个命令行工具<code class=\"language-text\">xcrun</code>对开发相关的功能进行控制，是一系列工具的集合。</li>\n<li><a href=\"https://medium.com/xcblog/simctl-control-ios-simulators-from-command-line-78b9006a20dc\">simctl</a>：<code class=\"language-text\">xcrun</code>提供了一个子命令<code class=\"language-text\">simctl</code>用于控制模拟器，提供了模拟器的启动、关闭、安装应用、打开 URL 等功能。可以通过直接运行<code class=\"language-text\">xcrun simctl</code>查看帮助文档。</li>\n<li><a href=\"https://www.npmjs.com/package/node-simctl\">node-simctl</a>：由 Appium 提供的<code class=\"language-text\">simctl</code> 工具的 JS 封装。由于前端的方案一般都是基于 node.js 开发的，所以可以使用  node-simctl 包更方便地控制模拟器。不过由于<code class=\"language-text\">node-simctl</code>只提供了部分功能的封装，我们依然需要手动调用<code class=\"language-text\">xcrun</code>命令来实现更多功能。</li>\n</ul>\n<h2>模拟器控制</h2>\n<p>在本方案中，最重要的部分就是对模拟器的控制。</p>\n<h3>前期准备</h3>\n<p>用户通过 App Store 安装完 Xcode 后，第一次运行需要同意苹果的许可协议，然后自动安装一些组件，之后才可以正常使用。为了提高易用性，我们希望自动处理这个过程，而不是告诉用户，安装 Xcode 后要采取一些操作。</p>\n<p>首先我们可以尝试运行一次 <code class=\"language-text\">xcrun simctl</code>命令，如果用户第一次运行，错误信息中会提醒用户手动运行<code class=\"language-text\">xcodebuild -license</code>接受许可，所以我们可以在错误信息中搜索<code class=\"language-text\">xcodebuild -license</code>字符串，如果有找到，就自动动运行<code class=\"language-text\">xcodebuild -license accept</code>命令，帮助用户自动接受许可。这里要注意的是，运行该命令需要 root 权限，可以使用<code class=\"language-text\">sudo-prompt</code>等包提权运行命令。</p>\n<p><img src=\"https://p1.music.126.net/45pMw5AOhypSHcAQXDZQ9w==/109951164945192462.png\" alt=\"第一次运行\"></p>\n<h3>获取设备列表</h3>\n<p>我们可以直接使用 node-simctl 的<code class=\"language-text\">getDevices()</code>函数获取本地安装的所有设备列表，比调用命令行更方便，可以直接获取到一个对象，不需要自己解析，对象部分结构如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'13.4'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            sdk<span class=\"token punctuation\">:</span> <span class=\"token string\">'13.4'</span><span class=\"token punctuation\">,</span>\n            dataPath<span class=\"token punctuation\">:</span> <span class=\"token string\">'/Users/xx/Library/Developer/CoreSimulator/Devices/xxx/data'</span><span class=\"token punctuation\">,</span>\n            logPath<span class=\"token punctuation\">:</span> <span class=\"token string\">'/Users/xx/Library/Logs/xxx'</span><span class=\"token punctuation\">,</span>\n            udid<span class=\"token punctuation\">:</span> <span class=\"token string\">'C1AA9736-XXX-YYY-ZZZ-2A4A674B6B21'</span><span class=\"token punctuation\">,</span>\n            isAvailable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            deviceTypeIdentifier<span class=\"token punctuation\">:</span> <span class=\"token string\">'com.apple.CoreSimulator.SimDeviceType.iPhone-11-Pro-Max'</span><span class=\"token punctuation\">,</span>\n            state<span class=\"token punctuation\">:</span> <span class=\"token string\">'Shutdown'</span><span class=\"token punctuation\">,</span>\n            name<span class=\"token punctuation\">:</span> <span class=\"token string\">'iPhone 11 Pro Max'</span><span class=\"token punctuation\">,</span>\n            platform<span class=\"token punctuation\">:</span> <span class=\"token string\">'iOS'</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>这里不仅包含了 iPhone，还有 Apple Watch 和 Apple TV 等设备，我们可以遍历返回结果，通过<code class=\"language-text\">name</code>字段进行过滤，因为一般我们只需要在 iPhone 中进行调试。</p>\n<h3>启动设备</h3>\n<p>首先我们要判断设备是否已经启动，我们可以通过 <code class=\"language-text\">xcrun simctl bootstatus ${deviceId}</code>命令获取设备状态（这里的 deviceId 即上面获取设备列表得到的<code class=\"language-text\">udid</code>），但是如果设备没有启动，这个命令会一直等待，不会退出，所以我们可以通过这个特征，基于命令是否超时（例如 1000ms 未返回结果）来判断设备是否启动。</p>\n<p>接下来，就可以直接用<code class=\"language-text\">xcrun instruments -w ${deviceId}</code>命令，启动对应的设备了。</p>\n<p>代码示例：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> status <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    status <span class=\"token operator\">=</span> <span class=\"token function\">execSync</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">xcrun simctl bootstatus </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>deviceId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span> timeout<span class=\"token punctuation\">:</span> <span class=\"token number\">1000</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 如果模拟器未启动，会一直等待，然后超时 kill，抛出一个 ETIMEDOUT 异常</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>code <span class=\"token operator\">!==</span> <span class=\"token string\">'ETIMEDOUT'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> error\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 检查是否启动</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Device already booted'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'正在启动模拟器……'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">execSync</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">xcrun instruments -w </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>deviceId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>安装 App</h3>\n<p>模拟器的安装包是一个以<code class=\"language-text\">.app</code>为结尾命名的文件夹，和 macOS 应用类似，而不是 iPhone 真机上安装使用的<code class=\"language-text\">.ipa</code>包。所以安装包需要先用<code class=\"language-text\">zip</code>等工具进行打包上传到服务器，安装前下载到本地解压，使用 node-simctl 的<code class=\"language-text\">installApp()</code>方法进行安装。</p>\n<h3>App 检查和启动</h3>\n<p>对于用户是否安装了 App，其实是在通过分析唤起 App 的错误信息来判断的。如果 App 未安装，会在唤起的时候会报错，错误信息中包含了<code class=\"language-text\">domain=NSOSStatusErrorDomain</code>字符串，表示 App 没有安装，这个时候我们去调用上面的安装流程即可。</p>\n<p><img src=\"https://p1.music.126.net/eVTcw7IOZ21fILmRhKVHwQ==/109951164945213535.png\" alt=\"NSOSStatusErrorDomain\"></p>\n<p>整个流程中最重要的一步是如何将我们的页面在 App 中打开，实际上很简单，只需要 App 本身支持类似 <code class=\"language-text\">cloudmusic://open?url=xxx</code>这样的 URL Scheme 即可。我们通过 node-simctl 的<code class=\"language-text\">openUrl()</code>方法直接调用 scheme，模拟器便会帮我们启动关联的 App，然后需要 App 根据接收到的 Scheme 参数，帮我们打开需要调试的页面。</p>\n<p>代码示例：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> simctl<span class=\"token punctuation\">.</span><span class=\"token function\">openUrl</span><span class=\"token punctuation\">(</span>deviceId<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 没有安装 App，打开协议会报 NSOSStatusErrorDomain</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'domain=NSOSStatusErrorDomain'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> simctl<span class=\"token punctuation\">.</span><span class=\"token function\">installApp</span><span class=\"token punctuation\">(</span>deviceId<span class=\"token punctuation\">,</span> appPath<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">await</span> simctl<span class=\"token punctuation\">.</span><span class=\"token function\">openUrl</span><span class=\"token punctuation\">(</span>deviceId<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> error\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>启动调试器</h3>\n<p>在模拟器中打开调试页面以后，对于 RN 页面，我们可以用 React Native Debugger 等工具调试。对于 H5 页面，我们可以从 Safari 菜单中打开 Inspector调试（如果没有“开发”菜单，请在 Safari 偏好设置 - 高级 - 选中<code class=\"language-text\">在菜单栏中线显示“开发”菜单</code>）。</p>\n<p><img src=\"https://p1.music.126.net/6w3fN5d0LuE-C3wB4mnYIA==/109951165081824820.png\" alt=\"Safari 开发菜单\"></p>\n<p>当然这一步也可以实现自动化，需要借助 Apple Script 搜索 Safari 菜单中的关键字并模拟点击，有点复杂，并且随着系统升级可能会失效，可以参考<a href=\"https://stackoverflow.com/questions/14669542/automatically-open-the-safari-debugger-when-the-iphone-simulator-is-launched\">网上的一些讨论</a>。</p>\n<h2>方案扩展</h2>\n<p>至此，我们已经了解了如何控制模拟器，实现最基本的功能，但是我们还可以对方案进行扩展实现，提高易用性。</p>\n<h3>接入 CI 服务</h3>\n<p>客户端会定期发布新版本，加入新的功能，所以我们也需要保持调试用的包为较新版本。一般客户端团队都会搭建自己的 CI 服务（例如 Jenkins）进行打包，所以我们可以进行接入，自动下载和安装最新的包。甚至我们可以拉取 CI 服务器上的包列表，实现安装历史版本，回归调试一些功能。</p>\n<p>需要注意的是，客户端团队一般只针对 ARM 架构打包，所以需要在 CI 上新增 x86 构建目标，构建产物才能成功在模拟器上运行。</p>\n<h3>多 App 支持</h3>\n<p>随着公司业务范围的拓展，我们可能需要在多个 App 内调试页面，通过指定以下两点，可以实现多 App 的适配：</p>\n<ol>\n<li>URL Scheme：通过指定不同的 Scheme，可以在不同的 App 中打开页面</li>\n<li>Bundle ID：类似<code class=\"language-text\">com.netease.cloudmusic</code>这样的字符串，是 App 的唯一标识，可以通过这个 ID 来进行 App 的启动、终止、卸载等操作</li>\n</ol>\n<h2>总结</h2>\n<p>到此为止，我们介绍了构建一套基于 iOS 模拟器的前端调试方案的基本原理，基于以上内容，我们可以结合 commander 和 inquirer 开发出一套 CLI 工具，也可以结合 Electron 开发一套 GUI 工具，为开发提效。如果你有更多的想法或者相关经验，也欢迎在评论区与我们交流~</p>\n<blockquote>\n<p>本文发布自 <a href=\"https://github.com/x-orpheus\">网易云音乐前端团队</a>，文章未经授权禁止任何形式的转载。我们一直在招人，如果你恰好准备换工作，又恰好喜欢云音乐，那就 <a href=\"mailto:grp.music-fe@corp.netease.com\">加入我们</a>！</p>\n</blockquote>","frontmatter":{"title":"构建基于 iOS 模拟器的前端调试方案","date":"2020-06-24","description":"本文将为大家介绍自动化控制 iOS 模拟器的原理，为开发基于 iOS 模拟器的前端调试方案提供帮助。"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/ios-web-debug/","previous":{"fields":{"slug":"/im/"},"frontmatter":{"title":"互动直播中的前端技术 -- 即时通讯"}},"next":{"fields":{"slug":"/wasm-rust/"},"frontmatter":{"title":"实现一个简单的基于 WebAssembly 的图片处理应用"}}}}}