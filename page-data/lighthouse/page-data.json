{"componentChunkName":"component---src-templates-blog-post-js","path":"/lighthouse/","webpackCompilationHash":"95f1de1856b8b6766301","result":{"data":{"site":{"siteMetadata":{"title":"云音乐大前端专栏","author":"云音乐大前端团队","siteUrl":"https://musicfe.dev"}},"markdownRemark":{"id":"b70c0b19-3786-55ad-a698-2d5321e406f7","excerpt":"image 本篇文章来自网易云音乐前端工程师 kkdev163 的投稿，其个人博客中也记录了一些前端监控领域的实践文章。 前言 云音乐前端性能监控平台，底层使用了 Lighthouse 进行审计评分，在实践过程中我们积累了一些 Lighthouse…","html":"<p><img src=\"https://p1.music.126.net/QVPNYQP1P87TUImw8_fw3w==/109951164483163903.png\" alt=\"image\"></p>\n<blockquote>\n<p>本篇文章来自网易云音乐前端工程师 kkdev163 的投稿，其<a href=\"https://kkdev163.github.io/\">个人博客</a>中也记录了一些前端监控领域的实践文章。</p>\n</blockquote>\n<h2>前言</h2>\n<p>云音乐前端性能监控平台，底层使用了 Lighthouse 进行审计评分，在实践过程中我们积累了一些 Lighthouse 内部实现的研究经验，希望通过这篇文章可以分享给各位读者。</p>\n<p>本篇文章基于 Lighthouse 5.2.0 版本，介绍了 Lighthouse 的测试流程、架构模块实现、性能指标的计算等。通过这篇文章，读者可以了解到 Lighthouse 是如何做自动化测试的、如何在 Lighthouse 的框架上自定义一些审计项、关键的性能指标是如何模拟计算的。</p>\n<p>本篇文章会按以下四个部分展开：</p>\n<ul>\n<li>Lighthouse 简介</li>\n<li>Lighthouse 测试流程</li>\n<li>Lighthouse 模块实现</li>\n<li>Lighthouse 性能指标计算</li>\n</ul>\n<h2>Lighthouse 简介</h2>\n<p>Lighthouse 是一个开源的自动化工具，用于改进网络应用的质量。只要为 Lighthouse 提供一个需要审查的网址，它将针对此页面运行一连串的测试，然后生成一个有关页面性能的报告。</p>\n<h3>Lighthouse 使用方式</h3>\n<p>目前官方提供了4种使用方式：</p>\n<ul>\n<li><a href=\"https://github.com/GoogleChrome/lighthouse#using-lighthouse-in-chrome-devtools\">Chrome 开发者工具（DevTools）</a></li>\n<li><a href=\"https://github.com/GoogleChrome/lighthouse#using-the-chrome-extension\">Chrome 扩展</a></li>\n<li><a href=\"https://github.com/GoogleChrome/lighthouse#using-the-node-cli\">Node CLI</a></li>\n<li><a href=\"https://github.com/GoogleChrome/lighthouse#using-the-node-module\">Node Module</a></li>\n</ul>\n<p>以 Chrome 开发者工具为例，在 Audits 面板下，用户可以配置测试平台、测试类目、限速方式等，可以方便快捷地发起一次测试。</p>\n<p><img src=\"https://p1.music.126.net/-zIauX-4uD9ZOETz8OGxaQ==/109951164295464779.png\" alt=\"image\"></p>\n<h3>Lighthouse 测试报告</h3>\n<p>测试结束后，默认会生成 HTML 格式的报告，如下图所示，在报告中涵盖了 5 大类别（categories）的测试评分：</p>\n<p><img src=\"https://p1.music.126.net/aT_f3Y0FFCaR78J39Y3hfA==/109951164463170217.png?imageView=1&#x26;thumbnail=500x0\" alt=\"image\"></p>\n<p>每个类别都包含一系列的审计项（audit），针对审计项的运行结果，Lighthouse 会给出特定的优化建议与诊断结果帮助开发者有针对性地进行优化。</p>\n<p>本节简要介绍了 Lighthouse 的使用方式与测试报告组成，下一节将介绍 Lighthouse 的测试流程。</p>\n<h2>Lighthouse 测试流程</h2>\n<p>我们以 Node CLI 的方式进行测试，分析 Lighthouse 的测试流程。</p>\n<p>参考<a href=\"https://github.com/GoogleChrome/lighthouse#using-the-node-cli\">官方文档</a>，安装好 CLI 后，输入如下命令，可以进行一次测试</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">lighthouse --only-categories<span class=\"token operator\">=</span>performance https://google.com</code></pre></div>\n<p><em>注：以上命令只进行 performance 类别测试。</em></p>\n<p>在 CLI 中会输出测试过程中的日志，截图显示如下，在日志中，可以看出测试大致分为如下几个阶段：</p>\n<p><img src=\"https://p1.music.126.net/mqu093845jHPdnHDwxrfgg==/109951164463501007.png?imageView=1&#x26;thumbnail=500x0\" alt=\"image\"></p>\n<p>通过输出的日志，可以画出 Lighthouse 的测试流程图：</p>\n<p><img src=\"https://p1.music.126.net/Wka60Xl1kip0rBD8bia5lg==/109951164295505995.png?imageView=1&#x26;thumbnail=500x0\" alt=\"image\"></p>\n<ol>\n<li>Lighthouse 与浏览器建立连接。</li>\n<li>测试的初始化配置与加载待测试页面。</li>\n<li>在页面加载过程中，运行一系列的采集器（gatherers），每个采集器都会收集自己的目标信息，并生成中间产物（artifacts）。</li>\n<li>运行一系列的审计项（audits），每个审计项都会从中间产物（artifacts）中获取所需的数据，计算出各自的评分。</li>\n<li>基于审计项的评分计算出大类的评分，汇总生成报告。</li>\n</ol>\n<p>本节基于 Lighthouse 的测试日志，介绍了 Lighthouse 的测试流程，下节将介绍流程中的模块实现。</p>\n<h2>Lighthouse 模块实现</h2>\n<p>初步了解了基本的测试流程后，我们再看下官方给出的 <a href=\"https://github.com/GoogleChrome/lighthouse/blob/master/docs/architecture.md\">Lighthouse 架构图</a>：</p>\n<p><img src=\"https://p1.music.126.net/-A6wsG5KoXXe3-OS2XVeuQ==/109951164295515799.png?imageView=1&#x26;thumbnail=500x0\" alt=\"image\"></p>\n<p>这张图中体现了测试的主要流程，从中也可以圈出 4 个主要模块，下文会对这几个模块做逐个讲解。</p>\n<h3>Driver 模块</h3>\n<h4>双向通信与 DevTools 协议</h4>\n<p>Chrome 浏览器在启动的时候，可以通过 <code>--remote-debugging-port</code> 参数设置远程调试端口，如以下命令可以打开 Chrome 并设置远程调试端口为9222。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">chrome.exe --remote-debugging-port<span class=\"token operator\">=</span><span class=\"token number\">9222</span></code></pre></div>\n<p>之后就可以使用地址 <a href=\"http://localhost:9222\">http://localhost:9222</a> 进行远程调试了，比如以下命令可以让 Chrome 浏览器打开一个新的 Tab。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">curl</span> http://localhost:9222/json/new</code></pre></div>\n<p>该命令还会返回此 Tab 的相关信息，其中需要关注的是 webSocketDebuggerUrl，这是该 Tab 的 WebSocket 连接地址。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n    &quot;id&quot;: &quot;29989D...&quot;,\n    &quot;url&quot;: &quot;about:blank&quot;,\n    &quot;webSocketDebuggerUrl&quot;: &quot;ws://localhost:9222/devtools/page/29989D...&quot;,\n    ...\n}</code></pre></div>\n<p>Driver 模块持有 Connection 实例（负责与浏览器进行通信），该实例在初始化的时候，正是通过调用远程调试端口的<code>/json/new</code>指令打开一个新的 Tab，并使用返回的 webSocketDebuggerUrl 与浏览器建立 WebSocket 连接，之后就可以进行双向通信。</p>\n<ol>\n<li>新开一个Tab</li>\n</ol>\n<p><img src=\"https://p1.music.126.net/eaL2EXZEC08464rFBy9iaw==/109951164431973731.png?imageView=1&#x26;thumbnail=500x0\" alt=\"image\"></p>\n<ol start=\"2\">\n<li>建立 WebSocket 连接</li>\n</ol>\n<p><img src=\"https://p1.music.126.net/-VHhyIsGazg4bYE5M6nEDQ==/109951164431978136.png?imageView=1&#x26;thumbnail=500x0\" alt=\"image\"></p>\n<p>双方建立 WebSocket 连接后，必须使用一种数据格式协议进行通信，该协议就是 Chrome DevTools Protocol，此协议以 JSON 为格式，定义指令的方法名与参数。</p>\n<p>如下图所示，发送 Page.navigate 指令可以让 Chrome 导航至目标页面。发送 Page.captureScreenshot 指令可以让 Chrome 生成当前页面的截图数据。</p>\n<p><img src=\"https://p1.music.126.net/5D-dM1H93qwmPbOpGHnfow==/109951164431993587.png?imageView=1&#x26;thumbnail=500x0\" alt=\"image\"></p>\n<p>在该协议的<a href=\"https://chromedevtools.github.io/devtools-protocol/\">文档</a>中，所有的控制指令和事件被划分至多个领域（Domains）如 Page、Network 等。打开 Page 领域，可以找到示例指令 Page.navigate 的详细说明：</p>\n<p><img src=\"https://p1.music.126.net/v1z_OCF1Z2Hea9M0cEClvA==/109951164431998671.png?imageView=1&#x26;thumbnail=500x0\" alt=\"image\"></p>\n<p>除了 navigate、captureScreenshot 等主动调用的指令外，当我们调用某个领域的 enable 指令后，后续就可以接收到该领域推送的通知事件。</p>\n<p>Lighthouse 通过 Chrome DevTools Protocol 定义的主动指令与事件通知，就实现了操控 Chrome 浏览器，和感知页面加载过程中的各个事件。</p>\n<h4>日志记录</h4>\n<p>Driver 模块中的另外2个重要实例是 DevtoolsLog、NetworkRecorder，他们用于将浏览器发出的通知事件进行结构化的存储。其中 DevtoolsLog 会记录各个领域的全量日志，NetworkRecorder 只存储网络相关日志，并会分析出当前网络请求状态（繁忙、空闲）等。</p>\n<p><img src=\"https://p1.music.126.net/78-QQu4e5FhQhAOyA-nERQ==/109951164432038402.png?imageView=1&#x26;thumbnail=500x0\" alt=\"image\"></p>\n<p>存储的日志信息将在后续的审计（Audits）模块中使用，下文会继续提到他们。</p>\n<h4>仿真器（emulation）</h4>\n<p>Driver 模块中最后值得一提的部分是仿真器（emulation），该模块的作用是模拟测试设备，如模拟 移动端 / PC 端、屏幕的尺寸，模拟设备的 UserAgent、Cookie、网络限速等。</p>\n<p>这些模拟功能的设置，也是通过 Connection 模块向 Chrome 浏览器发送对应领域的操控指令实现的。</p>\n<p><img src=\"https://p1.music.126.net/uEjOlxdk-Upp8CR-L0U9Qw==/109951164432060610.png?imageView=1&#x26;thumbnail=500x0\" alt=\"image\"></p>\n<p>至此我们分析完了 Driver 模块的主要组成部分，我们来简单总结下：负责与浏览器的双向通信、记录事件日志、模拟器的设置等。</p>\n<h3>Gatherer 模块</h3>\n<p><img src=\"https://p1.music.126.net/jbY5zCRtP6Fj3ilVh2ahqg==/109951164432067289.png?imageView=1&#x26;thumbnail=500x0\" alt=\"image\"></p>\n<p>该模块的一个重要概念是 pass，官方是这样定义 pass 的：</p>\n<blockquote>\n<p>controls how to load the requested URL\nand what information to gather about the page while loading.</p>\n</blockquote>\n<p>即控制页面如何加载，并决定在页面加载过程中采集哪些信息</p>\n<blockquote>\n<p>defines basic settings such as how long to wait for the page to load and whether to record a trace file. Additionally a list of gatherers to use is defined per pass. Gatherers can read information from the page to generate artifacts which are later used by audits to provide you with a Lighthouse report.</p>\n</blockquote>\n<p>即定义页面加载等待时间、是否记录 trace 文件等配置。每个 pass 还定义了一个 gatherers 列表，gatherers 可以从页面中读取需要的信息并生成一个中间产物，\n中间产物将会用于后续的审计分析，并最终生成测试报告。</p>\n<p>了解了 pass 的定义，来看一个具体的 pass 配置：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  passes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n    passName<span class=\"token punctuation\">:</span> <span class=\"token string\">'defaultPass'</span><span class=\"token punctuation\">,</span>\n    recordTrace<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是否记录Trace信息</span>\n    useThrottling<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是否使用限速</span>\n    gatherers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token comment\">// gatherers列表</span>\n      <span class=\"token string\">'css-usage'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'viewport-dimensions'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'runtime-exceptions'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'console-messages'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'anchor-elements'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'image-elements'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'link-elements'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'meta-elements'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'script-elements'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'iframe-elements'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token operator\">...</span> <span class=\"token comment\">// 省略</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span> <span class=\"token comment\">// 省略</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中的 gatherers 是我们需要关注的重点，每一个 gatherer，在代码仓库中都有与之对应的同名实现文件，并且都继承自相同的父类 Gatherer，其中定义了三个模板方法，子类只需实现关心的模板方法即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Gatherer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 在页面导航前</span>\n    <span class=\"token function\">beforePass</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">passContext</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 在页面loaded后</span>\n    <span class=\"token function\">pass</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">passContext</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 在页面加载完毕，且trace信息收集完毕后</span>\n    <span class=\"token function\">afterPass</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">passContext<span class=\"token punctuation\">,</span> loadData</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>以一个比较简单的 Gatherer 具体实现 RuntimeExceptions 为例，该实例实现了 beforePass 、afterPass 两个生命周期模板方法，其中 driver.on 正是通过上文介绍的 Driver 模块实现的事件监听。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Gatherer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./gatherer.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RuntimeExceptions</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Gatherer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_exceptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_onRuntimeExceptionThrown <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onRuntimeExceptionThrown</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">onRuntimeExceptionThrown</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_exceptions<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n \n  <span class=\"token comment\">// 在页面导航前，注册事件监听器，采集错误信息</span>\n  <span class=\"token function\">beforePass</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">passContext</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> driver <span class=\"token operator\">=</span> passContext<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">;</span>\n    driver<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Runtime.exceptionThrown'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_onRuntimeExceptionThrown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 在页面加载完毕后，解除事件监听</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">afterPass</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">passContext</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> passContext<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Runtime.exceptionThrown'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_onRuntimeExceptionThrown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_exceptions<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>有了这个参考示例，我们也可以轻松地写一个自定义的 Gatherer，比如用于采集页面标题的 gatherer：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Gatherer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./gatherer.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getPageTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> document<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PageTitle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Gatherer</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">afterPass</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">passContext</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> passContext<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">.</span><span class=\"token function\">evaluateAsync</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>getPageTitle<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">())</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们只重写了 afterPass 方法，在该生命中期中，将脚本通过 driver 模块发送给浏览器执行，并获取到执行结果。</p>\n<p>当 pass 中定义的所有 gatherers 运行完后，就会生成一个中间产物 artifacts，此后 Lighthouse 就可以断开与浏览器的连接，只使用 artifacts 进行后续的分析。</p>\n<p>总结下 Gatherer 模块，该模块会通过 pass 这个配置，定义页面如何加载，并运行配置的所有 gatherers 来采集页面加载过程中的信息，并生成中间产物 artifacts。有了 artifacts，就可以进入下一步的 Audits 模块。</p>\n<h3>Audits 模块</h3>\n<p>与 gatherers 类似，在配置文件中也会定义需要运行的 audits，每一个 audits 也都有与之对应的同名实现文件。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  audits<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'errors-in-console'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'metrics/first-contentful-paint'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'metrics/first-meaningful-paint'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'metrics/speed-index'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'metrics/first-cpu-idle'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'metrics/interactive'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'screenshot-thumbnails'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'final-screenshot'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 省略</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 省略</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们还是从最为简单的 errors-in-console 入手，了解下一个 audit 是如何实现的。</p>\n<p>在每个 audit 中都会定义一个静态方法<code>meta()</code>，对该 audit 进行描述，并声明所需的 artifacts，ErrorLogs 这项 audit 就声明了其需要上文提到的 RuntimeExceptions 所生成的中间产物。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ErrorLogs</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Audit</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">meta</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token punctuation\">:</span> <span class=\"token string\">'errors-in-console'</span><span class=\"token punctuation\">,</span>\n      title<span class=\"token punctuation\">:</span> <span class=\"token function\">str_</span><span class=\"token punctuation\">(</span>UIStrings<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      failureTitle<span class=\"token punctuation\">:</span> <span class=\"token function\">str_</span><span class=\"token punctuation\">(</span>UIStrings<span class=\"token punctuation\">.</span>failureTitle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      description<span class=\"token punctuation\">:</span> <span class=\"token function\">str_</span><span class=\"token punctuation\">(</span>UIStrings<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      requiredArtifacts<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'ConsoleMessages'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'RuntimeExceptions'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Audit 实例需要实现的另一个模板方法是<code>audit()</code>，在该方法中可以拿到所需的中间产物，并基于中间产物计算出本项 audit 的得分与详情。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">static</span> <span class=\"token function\">audit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">artifacts</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 获取所需的中间产物</span>\n    <span class=\"token keyword\">const</span> runtimeExceptions <span class=\"token operator\">=</span> artifacts<span class=\"token punctuation\">.</span>RuntimeExceptions<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 数据的过滤与转换</span>\n    <span class=\"token keyword\">const</span> runtimeExRows <span class=\"token operator\">=</span>\n      runtimeExceptions<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span> <span class=\"token operator\">=></span> entry<span class=\"token punctuation\">.</span>exceptionDetails <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> description <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>exceptionDetails<span class=\"token punctuation\">.</span>exception <span class=\"token operator\">?</span>\n          entry<span class=\"token punctuation\">.</span>exceptionDetails<span class=\"token punctuation\">.</span>exception<span class=\"token punctuation\">.</span>description <span class=\"token punctuation\">:</span> entry<span class=\"token punctuation\">.</span>exceptionDetails<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n          source<span class=\"token punctuation\">:</span> <span class=\"token string\">'Runtime.exception'</span><span class=\"token punctuation\">,</span>\n          description<span class=\"token punctuation\">,</span>\n          url<span class=\"token punctuation\">:</span> entry<span class=\"token punctuation\">.</span>exceptionDetails<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 省略表格详情生成代码</span>\n    <span class=\"token operator\">...</span>\n\n    <span class=\"token comment\">// 计算出审计项的得分</span>\n    <span class=\"token keyword\">const</span> numErrors <span class=\"token operator\">=</span> tableRows<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      score<span class=\"token punctuation\">:</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>numErrors <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      numericValue<span class=\"token punctuation\">:</span> numErrors<span class=\"token punctuation\">,</span>\n      details<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>有了上面的示例，我们就可以参照实现一个自定义审计项，如审计页面标题：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PageTitle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Audit</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">meta</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            id<span class=\"token punctuation\">:</span> <span class=\"token string\">'page-title'</span><span class=\"token punctuation\">,</span>\n            title<span class=\"token punctuation\">:</span> <span class=\"token string\">'title of page document'</span><span class=\"token punctuation\">,</span>\n            failureTitle<span class=\"token punctuation\">:</span> <span class=\"token string\">'Does not have page title'</span><span class=\"token punctuation\">,</span>\n            description<span class=\"token punctuation\">:</span> <span class=\"token string\">'This audit get document.title when page loaded'</span><span class=\"token punctuation\">,</span>\n            requiredArtifacts<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'PageTitle'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token function\">audit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">artifacts</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            score<span class=\"token punctuation\">:</span> artifacts<span class=\"token punctuation\">.</span>PageTitle <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            displayValue<span class=\"token punctuation\">:</span> artifacts<span class=\"token punctuation\">.</span>PageTitle <span class=\"token operator\">||</span> <span class=\"token string\">'none'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当运行完配置文件中定义的所有审计项后，就得到了每个审计项的评分与详情，后续就进入 Report 模块。</p>\n<h3>Report 模块</h3>\n<p>在配置文件中，会定义每个测试类别所需的审计项，以及每个审计项所占的权重。如下所示的为性能（performance）这项测试类别所需的审计项：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'performance'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token function\">str_</span><span class=\"token punctuation\">(</span>UIStrings<span class=\"token punctuation\">.</span>performanceCategoryTitle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    auditRefs<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">:</span> <span class=\"token string\">'first-contentful-paint'</span><span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> group<span class=\"token punctuation\">:</span> <span class=\"token string\">'metrics'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">:</span> <span class=\"token string\">'first-meaningful-paint'</span><span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> group<span class=\"token punctuation\">:</span> <span class=\"token string\">'metrics'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">:</span> <span class=\"token string\">'speed-index'</span><span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> group<span class=\"token punctuation\">:</span> <span class=\"token string\">'metrics'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">:</span> <span class=\"token string\">'interactive'</span><span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> group<span class=\"token punctuation\">:</span> <span class=\"token string\">'metrics'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">:</span> <span class=\"token string\">'first-cpu-idle'</span><span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> group<span class=\"token punctuation\">:</span> <span class=\"token string\">'metrics'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">:</span> <span class=\"token string\">'max-potential-fid'</span><span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> group<span class=\"token punctuation\">:</span> <span class=\"token string\">'metrics'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 省略</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在最终汇总阶段，Lighthouse 会基于该配置文件以及上一个环节中计算出的每个审计项的评分，加权计算出 performance 的评分。并基于每个审计项的评分与种类，将审计项划分为通过与不通过，对于不通过的审计项会给出详细的测试详情与优化指引。</p>\n<h2>FCP 等性能指标审计项的实现</h2>\n<p>在上文介绍整体测试流程的过程中，我选择了最为简单的审计项展开介绍，本节会挑选大家更为关心的性能审计指标如 FCP 展开介绍。</p>\n<blockquote>\n<p>FCP（First Contentful Paint） 首次内容绘制时间，是从页面导航开始，到浏览器从 DOM 中渲染出首个内容的时间。</p>\n</blockquote>\n<h3>限速模拟</h3>\n<p>由于页面性能受宿主机网络与 CPU 频率等参数的影响较大，Lighthouse 提供了三种方式供模拟较差的宿主机环境，其背后的逻辑是，如果页面能够在较差的环境下达到一个较好的测试分数、那么大部分用户对页面的直观感受都会较好。</p>\n<p>在 Chrome Devtools 的 Audits 面板中，可以看到三种限速方式：</p>\n<p><img src=\"https://p1.music.126.net/cRs259nIe70Tt5bhlph4TA==/109951164432290382.png?imageView=1&#x26;thumbnail=500x0\" alt=\"image\"></p>\n<p>上图配置项分别对应下面三种限速方式的介绍</p>\n<h4>simulated</h4>\n<blockquote>\n<p>Throttling is simulated, resulting in faster audit\nruns with similar measurement accuracy</p>\n</blockquote>\n<p>即限速是模拟的（加载页面时不进行限速，加载完页面后，模拟计算出在限速条件下的性能指标值），所以可以在较快的速度下地完成审计并有相似的测试精度。</p>\n<h4>devtools</h4>\n<blockquote>\n<p>Typical DevTools throttling, with actual traffic shaping\nand CPU slowdown applied</p>\n</blockquote>\n<p>即通过 DevTools 进行限速，页面是在一个真实受限的网络与降速 CPU 条件下加载的。</p>\n<h4>no throttling</h4>\n<blockquote>\n<p>No network or CPU throttling used.\n(Useful when not evaluating performance)</p>\n</blockquote>\n<p>即 Lighthouse 不进行额外的限速，通常在不进行性能测试、或开发者自行对宿主机进行限速时使用该项。</p>\n<p>在三种限速方式中，Lighthouse 真正对网络与 CPU 进行限速的只有 devtools 这种限速方式，实现的方式是通过上文提到的 Driver 模块发送对应领域的指令给 Chrome 浏览器：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 开启CPU限速</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">enableCPUThrottling</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">driver<span class=\"token punctuation\">,</span> throttlingSettings</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> rate <span class=\"token operator\">=</span> throttlingSettings<span class=\"token punctuation\">.</span>cpuSlowdownMultiplier<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> driver<span class=\"token punctuation\">.</span><span class=\"token function\">sendCommand</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Emulation.setCPUThrottlingRate'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>rate<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 开启网络限速</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">enableNetworkThrottling</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">driver<span class=\"token punctuation\">,</span> throttlingSettings</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 省略部分代码</span>\n  <span class=\"token keyword\">return</span> driver<span class=\"token punctuation\">.</span><span class=\"token function\">sendCommand</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Network.emulateNetworkConditions'</span><span class=\"token punctuation\">,</span> conditions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Trace 信息</h3>\n<p>在上文介绍 pass 时，我们提到其中有一个参数用来控制是否收集 Trace 信息，Trace 信息是什么？它又有什么用呢？</p>\n<p>其实我们大部分同学都已经接触过 Trace 信息，它的可视化展示就在 Chrome devtools 中 Performance 面板：</p>\n<p><img src=\"https://p1.music.126.net/xJAmmSQiSuSLCiCSF6RVuw==/109951164432359102.png?imageView=1&#x26;thumbnail=750x0\" alt=\"image\"></p>\n<p>在这个可视化面板中，可以看到页面加载过程中关键渲染节点 FP、FCP、FMP 等，并可以看到主线程进行的 Parse HTML、Layout、JS 的执行依赖情况等。</p>\n<p>当 pass 中配置了开启收集 Trace 信息时，Lighthouse 在页面加载完毕后，就可以拿到完整的 Trace 信息， 从中可以知道页面加载时的 FCP、FMP 等关键渲染节点。</p>\n<h3>FCP 的模拟计算</h3>\n<p>当使用 devtools、no throttling 这两种方式进行限速时，由于页面就是在真实受限的网络条件下加载的，Trace 信息中给出的 FCP 值就是限速条件下的 FCP 值，所以 Lighthouse 无需进行任何额外的加工处理。</p>\n<p>但在 simulated 这种限速方式下，页面是在没有限速的条件下加载，所以 Trace 中的 FCP 是不限速时的 FCP，Lighthouse 需要通过模拟计算的方式，得出在给定限速条件下的 FCP 估算值。接下来我们重点介绍 simulated 这种模拟方式下，FCP 的计算。</p>\n<p>上文我们提到在 Driver 模块中有个 NetworkRecorder，这个模块会记录页面加载过程中的所有网络请求详情，Lighthouse 会为每个有效的网络请求事件建立一个对应的 Network Node 节点。</p>\n<p>Trace 信息中也会记录页面加载过程中 CPU 执行事件，Lighthouse 会为每个有效的 CPU 事件建立一个对应的 CPU Node 节点。</p>\n<p><img src=\"https://p1.music.126.net/0X559jq5We58R_Evxfudzg==/109951164432376568.png?imageView=1&#x26;thumbnail=500x0\" alt=\"image\"></p>\n<p>紧接着，Lighthouse 会从 Network 请求节点中找出根节点（请求 Document 的节点），并根据节点依赖算法，建立起 CPU 节点与 Network 节点之间的依赖，最终生成页面加载依赖的有向无环图：</p>\n<p><img src=\"https://p1.music.126.net/8DpOfnsLMxJ1WC8_fLiVkg==/109951164464186053.png?imageView=1&#x26;thumbnail=500x0\" alt=\"image\"></p>\n<p>建立了页面加载所需的完整依赖图后，Lighthouse 会结合 Trace 信息中的 FCP 事件时间，分析出页面 FCP 所需的的依赖图：</p>\n<p><img src=\"https://p1.music.126.net/ISsY4ULcx5suJyAmFFDK4Q==/109951164432433536.png?imageView=1&#x26;thumbnail=500x0\" alt=\"image\"></p>\n<p>有了页面 FCP 所需的依赖图后，Lighthouse 模拟计算出，在限速条件下，请求依赖图中的资源，执行依赖图中的 CPU 事件，所需的耗时，以此得出在特定限速条件下的 FCP 估算值。</p>\n<p><img src=\"https://p1.music.126.net/9Yb1szCkhGKqgU5vLtI1Uw==/109951164432437663.png?imageView=1&#x26;thumbnail=750x0\" alt=\"image\"></p>\n<h3>模拟 HTTP 请求</h3>\n<p>Lighthouse 通过模拟 HTTP 的方式，计算出在特定网络条件下的资源下载耗时，而不是真实地发起网络请求，我们来看下 Lighthouse 是如何做模拟的。</p>\n<p><img src=\"https://p1.music.126.net/ZdUR1vPSs8b75NgCmf0RQw==/109951164432467024.png?imageView=1&#x26;thumbnail=750x0\" alt=\"image\"></p>\n<p><img src=\"https://p1.music.126.net/R58QU2rjt5qZhdZ9uslBlw==/109951164432464625.png?imageView=1&#x26;thumbnail=750x0\" alt=\"image\"></p>\n<p>在上述的代码中，我们看到 Lighthouse 完全是通过模拟 HTTP 的方式，计算出了一个资源在特定网络条件下，所需要的耗时。并且这个模拟考虑了 HTTP2 多路复用技术、 请求是否 KeepAlive、TCP 三次握手、拥塞窗口等细节。</p>\n<p>我们用一张图来总结和对比一下，两种限速方式计算 FCP 的流程差异：</p>\n<p><img src=\"https://p1.music.126.net/t9h4x0Y0FCW6BqOq8Ogb2Q==/109951164432474551.png?imageView=1&#x26;thumbnail=750x0\" alt=\"image\"></p>\n<p>可以看出两种限速方式，都是以 DevTools 给出的 Trace 信息为基础，在 Simulate 限速方式下，在拿到 FCP 值后，还需要模拟计算在限速条件下的估算值。在 Simulate 限速方式下，其他性能指标如 FMP、SpeedIndex 等也是通过类似的方式进行模拟计算，至此我们分析完了 Lighthouse 性能指标 FCP 审计项的实现原理。</p>\n<h2>总结</h2>\n<p>本篇文章为大家简要介绍了 Lighthouse、并分析了 Lighthouse 的测试流程与主要的模块实现，最后向大家介绍了关键性能指标 FCP 的模拟计算方式，希望能对大家有所收获。文末会贴出文章中提到的模块的源码导航，有兴趣的朋友可以看下，欢迎大家进行交流。</p>\n<h2>源码导航</h2>\n<h3>Driver 模块</h3>\n<ul>\n<li><a href=\"https://github.com/GoogleChrome/lighthouse/blob/master/lighthouse-core/gather/driver.js\">driver</a></li>\n<li><a href=\"https://github.com/GoogleChrome/lighthouse/blob/master/lighthouse-core/gather/connections/cri.js\">connection</a></li>\n<li><a href=\"https://github.com/GoogleChrome/lighthouse/blob/master/lighthouse-core/lib/emulation.js\">emulation</a></li>\n<li><a href=\"https://github.com/GoogleChrome/lighthouse/blob/master/lighthouse-core/lib/network-recorder.js\">network-recorder</a></li>\n</ul>\n<h3>Gatherer模块</h3>\n<ul>\n<li><a href=\"https://github.com/GoogleChrome/lighthouse/blob/master/lighthouse-core/gather/gather-runner.js\">gather-runner</a></li>\n<li><a href=\"https://github.com/GoogleChrome/lighthouse/blob/master/lighthouse-core/gather/gatherers/gatherer.js\">gatherer</a></li>\n<li><a href=\"https://github.com/GoogleChrome/lighthouse/blob/master/lighthouse-core/gather/gatherers/runtime-exceptions.js\">runtime-exceptions</a></li>\n</ul>\n<h3>Audit模块</h3>\n<ul>\n<li><a href=\"https://github.com/GoogleChrome/lighthouse/blob/master/lighthouse-core/audits/audit.js\">audit</a></li>\n<li><a href=\"https://github.com/GoogleChrome/lighthouse/tree/master/lighthouse-core/audits\">error-in-console</a></li>\n</ul>\n<h3>FCP计算</h3>\n<ul>\n<li><a href=\"https://github.com/GoogleChrome/lighthouse/blob/1f07249f3f8653d66766815fb5ff4f125878cc28/lighthouse-core/audits/metrics/first-contentful-paint.js\">audit/fcp</a></li>\n<li><a href=\"https://github.com/GoogleChrome/lighthouse/blob/1f07249f3f/lighthouse-core/computed/metrics/first-contentful-paint.js\">computed/fcp</a></li>\n<li><a href=\"https://github.com/GoogleChrome/lighthouse/blob/1f07249f3f/lighthouse-core/computed/metrics/lantern-first-contentful-paint.js\">computed/lantern-fcp</a></li>\n<li><a href=\"https://github.com/GoogleChrome/lighthouse/blob/1f07249f3f/lighthouse-core/computed/metrics/lantern-metric.js\">computed/lantern-metric</a></li>\n<li><a href=\"https://github.com/GoogleChrome/lighthouse/blob/1f07249f3f/lighthouse-core/computed/page-dependency-graph.js\">computed/page-dependency-graph</a></li>\n<li><a href=\"https://github.com/GoogleChrome/lighthouse/blob/1f07249f3f/lighthouse-core/lib/dependency-graph/base-node.js\">dependency-graph/base-node</a></li>\n<li><a href=\"https://github.com/GoogleChrome/lighthouse/blob/1f07249f3f/lighthouse-core/lib/dependency-graph/simulator/tcp-connection.js\">dependency-graph/tcp-connection</a></li>\n</ul>\n<h2>参考文献</h2>\n<ul>\n<li><a href=\"https://github.com/GoogleChrome/lighthouse/blob/1f07249f3f8653d66766815fb5ff4f125878cc28/docs/architecture.md\">Lighthouse-architecture</a></li>\n<li><a href=\"https://chromedevtools.github.io/devtools-protocol/\">Chrome DevTools Protocol</a></li>\n<li><a href=\"https://developers.google.com/web/tools/lighthouse/v3/scoring\">Lighthouse Scoring Guide</a></li>\n</ul>\n<blockquote>\n<p>本文发布自 <a href=\"https://github.com/x-orpheus\">网易云音乐前端团队</a>，文章未经授权禁止任何形式的转载。我们一直在招人，如果你恰好准备换工作，又恰好喜欢云音乐，那就 <a href=\"mailto:grp.music-fe@corp.netease.com\">加入我们</a>！</p>\n</blockquote>","frontmatter":{"title":"Lighthouse 测试内幕","date":"2019-11-12","description":"云音乐前端性能监控平台，底层使用了 Lighthouse 进行审计评分，在实践过程中我们积累了一些 Lighthouse 内部实现的研究经验，希望通过这篇文章可以分享给各位读者。"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/lighthouse/","previous":{"fields":{"slug":"/javascript-bitwise-operators/"},"frontmatter":{"title":"JavaScript 中的位运算和权限设计"}},"next":{"fields":{"slug":"/svrx-mock/"},"frontmatter":{"title":"使用 svrx 实现更优雅的接口 Mock"}}}}}