{"componentChunkName":"component---src-templates-blog-post-js","path":"/rn-android-webview/","webpackCompilationHash":"749c8336880cff8e6411","result":{"data":{"site":{"siteMetadata":{"title":"云音乐大前端专栏","author":"云音乐大前端团队","siteUrl":"https://musicfe.dev"}},"markdownRemark":{"id":"b31bb1cb-ffca-5a49-8cdb-07a1f384882b","excerpt":"本文作者：程磊 最近笔者研究  中使用自定义  提供原生组件给 （下面统一写成  ） 端的时候，遇到一些实际问题，在这里从  的一些工作机制入手，分享一下问题的原因和解决方案。 自定义 View…","html":"<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4973364532/4963/ac85/19cf/df4227ec57e21b7c35c2b04e60774312.png\"></p>\n<blockquote>\n<p>本文作者：<a href=\"https://mp.weixin.qq.com/mp/profile_ext?action=home&#x26;__biz=MzAxODg1NzQ4OA==&#x26;scene=124#wechat_redirect\">程磊</a></p>\n</blockquote>\n<p>最近笔者研究 <code class=\"language-text\">Android</code> 中使用自定义 <code class=\"language-text\">View</code> 提供原生组件给 <code class=\"language-text\">React Native</code>（下面统一写成 <code class=\"language-text\">RN</code> ） 端的时候，遇到一些实际问题，在这里从 <code class=\"language-text\">RN</code> 的一些工作机制入手，分享一下问题的原因和解决方案。</p>\n<h3>自定义 View 内容不生效</h3>\n<h4>原因</h4>\n<p>在给 <code class=\"language-text\">RN</code> 提供自定义 <code class=\"language-text\">View</code> 的时候发现自定义 <code class=\"language-text\">View</code> 内部很多 <code class=\"language-text\">UI</code> 逻辑没有生效。</p>\n<p>例如下图，根据逻辑隐藏/展示了一些控件，但是应显示控件的位置没有变化。被隐藏控件的位置还是空出来的。很明显整个自定义 <code class=\"language-text\">View</code> 的 <code class=\"language-text\">requestLayout</code> 没有执行。</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4212910622/867e/d2a4/9ac8/3871911198513a867fa319a24f11d9ce.png\"></p>\n<p>问题的答案就在 <code class=\"language-text\">RN</code> 根布局 <code class=\"language-text\">ReactRootView</code> 的 <code class=\"language-text\">measure</code> 方法里面。</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4972538019/5d5c/58ef/5aba/84c04064e071cdcf9d88c19e6502b111.png\"></p>\n<p>在这个View的测量过程中，会判断 measureSpec 是否有更新。</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4972558362/479e/7dfc/243e/7d7950db2c9ba146c833140b4a43e2f9.png\"></p>\n<p>当 <code class=\"language-text\">measureSpec</code> 有变化，或者宽高有变化的时候，才会触发 <code class=\"language-text\">updateRootLayoutSpecs</code> 的逻辑。</p>\n<p>继续看下 <code class=\"language-text\">updateRootLayoutSpecs</code> 里做了一些什么事情，跟着源码最后会执行到 <code class=\"language-text\">UIImplementation</code> 的 <code class=\"language-text\">dispatchViewUpdates</code> 方法：</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4972580086/ca91/6566/c8b0/fa9b7b36d756f9ee8a127b595822098b.png\"></p>\n<p>最终执行：</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4972589174/1af2/6ef8/7580/cbe800bbbaf8e9c57afba38921a18f64.png\"></p>\n<p>这里会从根节点往下一直更新子 <code class=\"language-text\">View</code> ，执行 <code class=\"language-text\">View</code>的 <code class=\"language-text\">measure</code> 和 <code class=\"language-text\">layout</code>。</p>\n<p>所以 <code class=\"language-text\">ReactRootView</code> 在宽高和测量模式都没有变化的情况下，就相当于把子 <code class=\"language-text\">View</code> 发出的 <code class=\"language-text\">requestLayout</code> 请求都拦截了。</p>\n<h4>解决方案</h4>\n<p>知道了原因就非常好解决了，既然你不让我通知我的根控件需要重新布局，那我就自己给自己重新布局好了。参考了 <code class=\"language-text\">RN</code> 一些自带的自定义 <code class=\"language-text\">View</code> 的实现，我们可以在这个自定义 <code class=\"language-text\">View</code> 重新布局的时候，注册一个 <code class=\"language-text\">FrameCallback</code> 去执行自己的 <code class=\"language-text\">measure</code> 和 <code class=\"language-text\">layout</code> 方法。</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4972598879/b9ef/7af2/943c/3c123270ea41ec7938020b49a18ba50f.png\"></p>\n<h3>RN 自定义View 必须在JS端设置宽高</h3>\n<p>实现了自定义 <code class=\"language-text\">View</code> 之后，在 <code class=\"language-text\">JSX</code> 里面指定标签之后，会发现这个原生组件并没有显示。通过 IDE 的 <code class=\"language-text\">Layout Inspect</code> 可以发现此时这个自定义 <code class=\"language-text\">View</code> 的 <code class=\"language-text\">width</code> 和 <code class=\"language-text\">height</code> 都是 <code class=\"language-text\">0</code> 。如果设置了 <code class=\"language-text\">width</code> 和<code class=\"language-text\">height</code> 的话就可以展示了。</p>\n<p>这时候就很奇怪了， 为什么我的自定义 <code class=\"language-text\">View</code> 里面的内容明明是 <code class=\"language-text\">WRAP_CONTENT</code> 的，很多自定义 <code class=\"language-text\">View</code> 又是直接继承的 <code class=\"language-text\">ConstraintLayout</code> 、 <code class=\"language-text\">RelativeLayout</code> 这种 <code class=\"language-text\">Android</code> 的 <code class=\"language-text\">ViewGroup</code> ，但还是要指定宽高才能在 <code class=\"language-text\">RN</code> 中渲染出来呢？</p>\n<p>要解决这个疑惑，就需要了解一下 <code class=\"language-text\">RN</code> 的渲染流程。</p>\n<h4>RN 是怎么确定 Native View的宽高的</h4>\n<p>我们顺着 <code class=\"language-text\">RN</code> 更新 <code class=\"language-text\">View</code> 结构的 <code class=\"language-text\">UIImplementation#updateViewHierarchy</code> 方法，发现有两处关键的逻辑：</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4972605973/8a42/2eb6/a43b/7245c6a50d01ae2fbbc56f9fe2971d6b.png\"></p>\n<p><code class=\"language-text\">calculateRootLayout</code> 中调用了 <code class=\"language-text\">cssRoot</code> 的布局计算逻辑:</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4972619648/391f/3c8d/600d/2e6e3190b9cdff4d4f786a69dda17e2a.png\"></p>\n<p>接下来就是 <code class=\"language-text\">applyUpdatesRecursive</code>，顾名思义就是递归的更新根节点的所有子节点，在我们的场景中即整个页面的布局。</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4972632307/22dd/1a19/ce8e/9e1ec34dd334830611d731be0c9cc55d.png\"></p>\n<p>需要更新的节点则调用了 <code class=\"language-text\">dispatchUpdates</code> 方法，执行 <code class=\"language-text\">enqueueUpdateLayout</code>, 调用 <code class=\"language-text\">NativeViewHierarchyManager#updateLayout</code> 逻辑。</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4972637354/3a1b/fd31/a4dd/ff13bfd8c10c9d876a0b94f202178ec3.png\"></p>\n<p><code class=\"language-text\">updateLayout</code> 的核心流程如下：</p>\n<ul>\n<li>调用 <code class=\"language-text\">resolveView</code> 方法获取到真实的控件对象。</li>\n<li>调用这个控件的 <code class=\"language-text\">measure</code> 方法。</li>\n</ul>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4972647789/161e/248e/6595/612f06cf1f3f04826912fe5f31060a94.png\"></p>\n<ul>\n<li>调用<code class=\"language-text\">updateLayout</code>，执行这个控件的 <code class=\"language-text\">layout</code>方法</li>\n</ul>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4972668938/61f8/037e/5ac3/30eaaf4163b64b2fd88c89fb6bae453f.png\"></p>\n<p>发现了没有？这里的 <code class=\"language-text\">width</code>、<code class=\"language-text\">height</code> 已经是固定的值分别传给了 <code class=\"language-text\">meausre</code> 和 <code class=\"language-text\">layout</code>, 也就是说，这些 <code class=\"language-text\">View</code> 的宽高根本不是 <code class=\"language-text\">Android</code> 的绘制流程决定的，那么这个 <code class=\"language-text\">width</code> 和 <code class=\"language-text\">height</code> 的值是从哪里来的呢？\n回头看看就发现了答案：</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4972688955/a265/51bb/7ce3/5120063244829a353b0c119cca97c91e.png\"></p>\n<p>宽高是 <code class=\"language-text\">left</code>、<code class=\"language-text\">top</code>、<code class=\"language-text\">right</code>、<code class=\"language-text\">bottom</code>坐标相减得到的，而这些坐标则是通过\n<code class=\"language-text\">getLayoutWidth</code> 和 <code class=\"language-text\">getLayoutHeight</code> 得到的：</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4972693951/841a/e528/0a72/93b9fb263a9feb59822b150244768268.png\"></p>\n<p>而这个 <code class=\"language-text\">layoutWidth</code> 和 <code class=\"language-text\">layoutHeight</code>，则都是 <code class=\"language-text\">Yoga</code> 帮我们计算好，存放在 <code class=\"language-text\">YogoNode</code>里面的。</p>\n<p><strong>关于 Yoga</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Yoga</span> 是 <span class=\"token class-name\">Facebook</span> 实现的一个高性能、易用、 <span class=\"token class-name\">Flex</span> 的跨端布局引擎。\n<span class=\"token class-name\">React</span> <span class=\"token class-name\">Native</span> 内部则是使用 <span class=\"token class-name\">Yoga</span> 来布局的。\n具体内容可以看 <span class=\"token class-name\">Yoga</span> 的官网：https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>yogalayout<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span></code></pre></div>\n<p>这里也就解释了为什么自定义 <code class=\"language-text\">View</code> 需要在 <code class=\"language-text\">jsx</code> 中指定了 <code class=\"language-text\">width</code> 和 <code class=\"language-text\">height</code> 才会渲染出来。因为这些自定义 <code class=\"language-text\">View</code> 原本在 <code class=\"language-text\">Android</code>系统的 <code class=\"language-text\">measure</code> <code class=\"language-text\">layout</code> 流程都已经被 <code class=\"language-text\">RN</code> 给控制住了。</p>\n<p>这里可以总结成一句话：</p>\n<p><em>RN 中最终渲染出来的控件的宽高，都由 Yoga 引擎来计算决定，系统自身的布局流程无法直接决定这些控件的宽高</em></p>\n<p>但是这时候还是有一个疑问，为什么RN自己的一些组件，例如 <code class=\"language-text\">&lt;Text/&gt;</code> ，没有指定\n宽高也可以正常自适应显示呢？</p>\n<h4>为什么 RN 自己的 Text 是有自己的宽高的</h4>\n<p>我们来看一下RN是怎么定义渲染出来的 <code class=\"language-text\">TextView</code> 的，找到对应的 <code class=\"language-text\">TextView</code> 的 <code class=\"language-text\">ViewManager</code>,</p>\n<p><code class=\"language-text\">com.facebook.react.views.text.ReactTextViewManager</code></p>\n<p>我们关注两个方法：</p>\n<ol>\n<li>createViewInstance</li>\n</ol>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4972710445/e153/7466/c7bb/e073f1bbf102810ba88bbc33f63852f8.png\"></p>\n<ol start=\"2\">\n<li>createShadowNodeInstance</li>\n</ol>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4972718970/098e/aaf3/664a/902192cb12bd74138c55b9eea8bd3365.png\"></p>\n<p>其中，<code class=\"language-text\">ReactTextView</code> 其实就是实现了一个普通的 <code class=\"language-text\">Android TextView</code>, <code class=\"language-text\">ReactTextShadowNode</code> 则表示了这个 <code class=\"language-text\">TextView</code> 对应的 <code class=\"language-text\">YogaNode</code> 的实现。</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4972728034/85ca/ff81/bbe4/9633fcd15f440882191cef2bc833b81c.png\"></p>\n<p>在它的实现中，我们可以看到一个成员变量，从名字上看是负责这个 <code class=\"language-text\">YogaNode</code> 的 <code class=\"language-text\">measure</code> 工作。</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4972736389/1a5b/da30/19a3/527c60cafe4230418596cbbf6b28c594.png\"></p>\n<p><code class=\"language-text\">YogaNodeJNIBase</code> 会调用这个JNI的方法，给JNI的逻辑注册这样一个回调函数。</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4972742333/8f2c/c1ca/e1b8/17e09cbcc50fbb08ac6253a21540b911.png\"></p>\n<p>这个 <code class=\"language-text\">YogaMeasureFunction</code> 的具体实现：</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4972760578/7fb4/b60d/43c8/07b076f364d9ccfabe241d4e44b6a361.png\"></p>\n<p>这里截个图，可以看到这里调用了 <code class=\"language-text\">Android</code> 中 <code class=\"language-text\">Text</code> 绘制的 <code class=\"language-text\">API</code> 来确定的文本的宽高。函数返回的是</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4972764827/f34e/7dd4/ade4/0a5bed4c79776066208f2298038d609f.png\"></p>\n<p>这里是使用了 <code class=\"language-text\">YogaMeasureOutput.make</code> 把 <code class=\"language-text\">Layout</code> 算出来的宽高转成一定格式的二进制回调给 <code class=\"language-text\">Yoga</code> 引擎，这也是为什么 <code class=\"language-text\">RN</code> 自己的 <code class=\"language-text\">Text</code> 标签是可以自适应宽高展示的。</p>\n<p>这里我们也可以得到一个结论：如果 <code class=\"language-text\">Android</code> 端封装的自定义 <code class=\"language-text\">View</code> 可以是确定宽高或者内部的控件是非常固定可以通过 <code class=\"language-text\">measure</code> 和 <code class=\"language-text\">layout</code> 就能算出宽高的，我们可以通过注册 <code class=\"language-text\">measureFunction</code> 回调的方式告诉 <code class=\"language-text\">Yoga</code> 我们 <code class=\"language-text\">View</code> 的宽高。</p>\n<p>但是在实际业务中，我们很多业务组件是封装在 <code class=\"language-text\">ConstraintLayout</code> 、<code class=\"language-text\">RelativeLayout</code> 等 ViewGroup 中，所以我们还需要其他的方法来解决组件宽高设置的问题。</p>\n<h4>解决方案</h4>\n<p>那么这个问题可以重写 <code class=\"language-text\">View</code> 的 <code class=\"language-text\">onMeasure</code> 和 <code class=\"language-text\">layout</code> 方法来解决吗？看起来是这个做法是可以解决 <code class=\"language-text\">View</code> 宽高为 <code class=\"language-text\">0</code> 渲染不出来的问题。但是如果 <code class=\"language-text\">jsx</code> 这样描述布局的时候：</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4972775215/1b49/1f6c/0db0/bf93c0a84c789ccdd667c132fb66ecce.png\"></p>\n<p>这时候 <code class=\"language-text\">AndroidView</code> 和 <code class=\"language-text\">Text</code> 会同时显示，并且 <code class=\"language-text\">AndroidView</code> 被 <code class=\"language-text\">Text</code> 遮住。</p>\n<p>稍微思考一下就能得到原因：对于 <code class=\"language-text\">Yoga</code> 引擎来说，<code class=\"language-text\">AndroidView</code> 所代表的的节点仍然是没有宽高的，<code class=\"language-text\">YogaNode</code> 里面的 <code class=\"language-text\">width</code>、<code class=\"language-text\">height</code> 仍然是 <code class=\"language-text\">0</code>，那么当重写 <code class=\"language-text\">onMeasure</code> 和 <code class=\"language-text\">onLayout</code> 的逻辑生效后，<code class=\"language-text\">View</code> 显示的左上方顶点是 <code class=\"language-text\">(0,0)</code> 的坐标。</p>\n<p>而 <code class=\"language-text\">Yoga</code> 引擎自己计算出 <code class=\"language-text\">Text</code> 的宽高后， <code class=\"language-text\">Text</code> 的左上方顶点坐标肯定也是 <code class=\"language-text\">(0,0)</code> ，所以这时候2个 <code class=\"language-text\">View</code> 会显示在同一个位置（重叠或者覆盖）。</p>\n<p>所以这时候问题就变成了，我们想通过 <code class=\"language-text\">Android</code> 自己的布局流程来确定并刷新这个自定义控件，但是 <code class=\"language-text\">Yoga</code> 引擎并不知道。</p>\n<p>所以想要解决这个问题，可行的有两条路：</p>\n<ul>\n<li>改变 UI 层级和自定义 <code class=\"language-text\">View</code> 的粒度</li>\n<li><code class=\"language-text\">Native</code> 测量出实际需要的宽高后同步给<code class=\"language-text\">Yoga</code> 引擎</li>\n</ul>\n<h5>增加自定义控件的粒度</h5>\n<p>举一个自定义控件的例子：</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4212969314/e77c/cdcc/5795/ff0dfa58254fb2b9aaa35b0248305af4.png\"></p>\n<p>我们希望把这个图上第一行的控件拆分成粒度较低的自定义 <code class=\"language-text\">View</code> 交给 <code class=\"language-text\">RN</code> 来布局实现布局动态配置的能力。但是这类场景的左右两边控件都是自适应宽度。这时候在 <code class=\"language-text\">JS</code> 端其实没有办法提供一个合适的宽度。考虑到更多场景下同一个方向轴上的自适应宽度控件是有位置上的依赖性的，所以可以不拆分这两个部分，直接都定义在同一个自定义 <code class=\"language-text\">View</code> 内：</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4972780927/c20f/1e2d/99f0/b1fe60605643b11324494a45d9b313a3.png\"></p>\n<p>提供给 <code class=\"language-text\">JS</code> 端使用，没有宽高的话，就把整个 <code class=\"language-text\">SingHeaderView</code> 的宽度设置成</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4972785760/5160/3ef0/47b4/97738f7aa42de6a870d453b1ee964cce.png\"></p>\n<p>这时候内部的两个控件会自己去进行布局。最终展示出来的就是左右都是 <code class=\"language-text\">Wrap_Content</code> 的。</p>\n<h5>Native 测量出实际需要的宽高后同步给Yoga引擎</h5>\n<p>但是控制自定义 <code class=\"language-text\">View</code> 的粒度的方式总归是不够灵活，开发的时候也往往会让人犹豫是否拆分。接着之前的内容，既然这个问题的矛盾点在于 <code class=\"language-text\">Yoga</code> 不知道 <code class=\"language-text\">Android</code> 可以自己再次调用 <code class=\"language-text\">measure</code> 来确定宽高，那如果能把最新的宽高传给 <code class=\"language-text\">Yoga</code>，不就可以解决我们的问题吗？</p>\n<p>具体怎么触发 <code class=\"language-text\">YogaNode</code> 的刷新呢？通过阅读源码可以找到解决方法。在 <code class=\"language-text\">UIManage</code>里面，有一个叫做 <code class=\"language-text\">updateNodeSize</code> 的 <code class=\"language-text\">api</code>:</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4972815196/ffff/5a50/03ca/f832b0ce81e02266d48e94165604b942.png\"></p>\n<p>这个 <code class=\"language-text\">api</code> 会更新 <code class=\"language-text\">View</code> 对应的 <code class=\"language-text\">cssNode</code> 的大小，然后分发刷新 <code class=\"language-text\">View</code> 的逻辑。这个逻辑是需要保证在后台消息队列里面执行的，所以需要把这个刷新的消息发送到 <code class=\"language-text\">nativeModulesQueueThread</code> 里面去执行。</p>\n<p>我们在 <code class=\"language-text\">ViewManager</code> 里面保存这个 <code class=\"language-text\">Manager</code> 对应的 <code class=\"language-text\">View</code> 和 <code class=\"language-text\">ReactNodeImpl</code> 实例。例如 <code class=\"language-text\">Android</code> 端封装了一个 <code class=\"language-text\">LinearLayout</code> ， 对应的 <code class=\"language-text\">node</code> 是 <code class=\"language-text\">MyLinearLayoutNode</code>。</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4972819935/3763/8a68/0683/2efa6844593b61bef29cd9731dfea79a.png\"></p>\n<p>重写自定义 <code class=\"language-text\">View</code> 的 <code class=\"language-text\">onMeasure</code>， 让自己是 <code class=\"language-text\">wrap_content</code> 的布局：</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4972824691/f660/e53d/1e05/a047fff36dd361db6f3cbbeab8c9df11.png\"></p>\n<p>在 <code class=\"language-text\">requestLayout</code> 中根据自己真实的宽高布局并触发以下逻辑:</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4972829265/3052/0940/cc25/55ceba2d69de0a3318d448823127a069.png\"></p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4972834188/eb74/0b5e/dd43/82bfba2ab05309f066fbcca7cc963fdc.png\"></p>\n<p>不过上面这个方案虽然可以解决 <code class=\"language-text\">View</code> 的 <code class=\"language-text\">wrap_content</code> 显示的问题，但是存在一些缺点：</p>\n<p>刷新 <code class=\"language-text\">YogaNode</code> 实际是在 <code class=\"language-text\">requestLayout</code> 的时候触发的，这就相当于 <code class=\"language-text\">requestLayout</code> 这种比较耗费性能的操作会双倍的执行。对于一些可能会频繁触发 <code class=\"language-text\">requestLayout</code> 的业务场景来说需要慎重考虑。如果遇到这种场景，还是需要根据自己的需求来灵活选择解决方式。</p>\n<blockquote>\n<p>本文发布自 <a href=\"https://github.com/x-orpheus\">网易云音乐大前端团队</a>，文章未经授权禁止任何形式的转载。我们常年招收前端、iOS、Android，如果你准备换工作，又恰好喜欢云音乐，那就加入我们 grp.music-fe(at)corp.netease.com！</p>\n</blockquote>","frontmatter":{"title":"聊聊RN中Android提供View的那些坑","date":"2020-12-02","description":"最近笔者研究 Android 中使用自定义 View 提供原生组件给 React Native（下面统一写成 RN） 端的时候，遇到一些实际问题，在这里从 RN 的一些工作机制入手，分享一下问题的原因和解决方案。"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/rn-android-webview/","previous":{"fields":{"slug":"/typescript-ioc/"},"frontmatter":{"title":"如何基于 TypeScript 实现控制反转"}},"next":{"fields":{"slug":"/android-video/"},"frontmatter":{"title":"云音乐 Android 视频「无缝」播放实现总结"}}}}}