{"componentChunkName":"component---src-templates-blog-post-js","path":"/web-unit-test/","webpackCompilationHash":"1ce281eb9f98984c720e","result":{"data":{"site":{"siteMetadata":{"title":"云音乐大前端专栏","author":"云音乐大前端团队","siteUrl":"https://musicfe.dev"}},"markdownRemark":{"id":"5089f445-2142-5d71-905b-d5cd01b4756b","excerpt":"…","html":"<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/7289440914/8006/d604/65dd/cb6ead57764ff32f02a64f327e79c3e7.jpg\" alt=\"题图\"></p>\n<blockquote>\n<p>本文作者: <a href=\"https://www.zhihu.com/people/li-quan-wei-41\">江水</a></p>\n</blockquote>\n<p>本文主要介绍前端<strong>单元测试</strong>的一些技术方案。</p>\n<p>单元测试的技术方案很多，不同工具之间有互相协同，也存在功能重合，给我们搭配测试方案带来不小的困难，而且随着 <code class=\"language-text\">ES6</code>, <code class=\"language-text\">TypeScript</code> 的出现，单元测试又增加了很多其他步骤，完整配置起来往往需要很大的时间成本。我希望通过对这些工具的各自作用的掌握，了解完整的前端测试技术方案。前端单元测试的领域也很多，这里主要讲对于前端组件如何进行单元测试，最后会主要介绍下对于 <code class=\"language-text\">React</code> 组件的一些测试方法总结。</p>\n<h3>通用测试</h3>\n<p>单元测试最核心的部分就是做断言，比如传统语言中的 <code class=\"language-text\">assert</code> 函数，如果当前程序的某种状态符合 <code class=\"language-text\">assert</code> 的期望此程序才能正常执行，否则直接退出应用。所以我们可以直接用 <code class=\"language-text\">Node</code> 中自带的 <code class=\"language-text\">assert</code> 模块做断言。</p>\n<p>用最简单的例子做个验证</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">multiple</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        result <span class=\"token operator\">+=</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> assert <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'assert'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token function\">multiple</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这种例子能够满足基础场景的使用，也可以作为一种单元测试的方法。</p>\n<p><code class=\"language-text\">nodejs</code> 自带的 <code class=\"language-text\">assert</code> 模块提供了下面一些断言方法，只能满足一些简单场景的需要。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span>actual<span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">deepStrictEqual</span><span class=\"token punctuation\">(</span>actual<span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">doesNotMatch</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> regexp<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">doesNotReject</span><span class=\"token punctuation\">(</span>asyncFn<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">doesNotThrow</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>actual<span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>message<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">ifError</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> regexp<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">notDeepEqual</span><span class=\"token punctuation\">(</span>actual<span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">notDeepStrictEqual</span><span class=\"token punctuation\">(</span>actual<span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">notEqual</span><span class=\"token punctuation\">(</span>actual<span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">notStrictEqual</span><span class=\"token punctuation\">(</span>actual<span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">rejects</span><span class=\"token punctuation\">(</span>asyncFn<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">strictEqual</span><span class=\"token punctuation\">(</span>actual<span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">throws</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>自带的 <code class=\"language-text\">assert</code> 不是专门给单元测试使用, 提供的错误信息文档性不好，上面的 <code class=\"language-text\">demo</code> 最终执行下来会产生下面的报告:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node index.js\nassert.js:84\n  throw new AssertionError<span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ^\n\nAssertionError <span class=\"token punctuation\">[</span>ERR_ASSERTION<span class=\"token punctuation\">]</span>: <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span>\n    at Object.<span class=\"token operator\">&lt;</span>anonymous<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>/home/quanwei/git/index.js:4:8<span class=\"token punctuation\">)</span>\n    at Module._compile <span class=\"token punctuation\">(</span>internal/modules/cjs/loader.js:778:30<span class=\"token punctuation\">)</span>\n    at Object.Module._extensions<span class=\"token punctuation\">..</span>js <span class=\"token punctuation\">(</span>internal/modules/cjs/loader.js:789:10<span class=\"token punctuation\">)</span>\n    at Module.load <span class=\"token punctuation\">(</span>internal/modules/cjs/loader.js:653:32<span class=\"token punctuation\">)</span>\n    at tryModuleLoad <span class=\"token punctuation\">(</span>internal/modules/cjs/loader.js:593:12<span class=\"token punctuation\">)</span>\n    at Function.Module._load <span class=\"token punctuation\">(</span>internal/modules/cjs/loader.js:585:3<span class=\"token punctuation\">)</span>\n    at Function.Module.runMain <span class=\"token punctuation\">(</span>internal/modules/cjs/loader.js:831:12<span class=\"token punctuation\">)</span>\n    at startup <span class=\"token punctuation\">(</span>internal/bootstrap/node.js:283:19<span class=\"token punctuation\">)</span>\n    at bootstrapNodeJSCore <span class=\"token punctuation\">(</span>internal/bootstrap/node.js:623:3<span class=\"token punctuation\">)</span></code></pre></div>\n<p>由于自带的模块依赖 <code class=\"language-text\">Node</code> 自身的版本，没办法自由升级，所以使用内置的包灵活性有时候不太够，另外我们很多断言函数也需要在浏览器端执行，所以我们需要同时支持浏览器和 <code class=\"language-text\">Node</code> 端的断言库。同时观察上面的输出可以发现，这个报告更像是程序的错误报告，而不是一个单元测试报告。而我们在做单元测时往往需要断言库能够提供良好的测试报告，这样才能一目了然地看到有哪些断言通过没通过，所以使用专业的单元测试断言库还是很有必要。</p>\n<h3>chai</h3>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/7288685151/e731/a144/fe91/cccf0486bd1d3c64eee56f17b46001e2.png\" alt=\"chai\"></p>\n<p><code class=\"language-text\">chai</code> 是目前很流行的断言库，相比于同类产品比较突出。<code class=\"language-text\">chai</code> 提供了 <a href=\"https://en.wikipedia.org/wiki/Test-driven_development\">TDD</a> (Test-driven development）和 <a href=\"https://en.wikipedia.org/wiki/Behavior-driven_development\">BDD</a> (Behavior-driven development) 两种风格的断言函数，这里不会过多介绍两种风格的优缺，本文主要以 <code class=\"language-text\">BDD</code> 风格做演示。</p>\n<h4>TDD 风格的 chai</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> assert <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'chai'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>assert\n  <span class=\"token punctuation\">,</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span>\n  <span class=\"token punctuation\">,</span> beverages <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> tea<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'chai'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'matcha'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'oolong'</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">typeOf</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">,</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// without optional message</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">typeOf</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">,</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo is a number'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// with optional message</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo equal `bar`'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">lengthOf</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo`s value has a length of 3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">lengthOf</span><span class=\"token punctuation\">(</span>beverages<span class=\"token punctuation\">.</span>tea<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'beverages has 3 types of tea'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">chai</code> 比 <code class=\"language-text\">Node</code> 自带的 <code class=\"language-text\">assert</code> 增加了一个断言说明参数，可以通过这个参数提高测试报告的可读性</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ node chai-assert.js\n\n/home/quanwei/git/learn-tdd-bdd/node_modules/chai/lib/chai/assertion.js:141\n      throw new AssertionError<span class=\"token punctuation\">(</span>msg, <span class=\"token punctuation\">{</span>\n      ^\nAssertionError: foo is a number: expected <span class=\"token string\">'bar'</span> to be a number\n    at Object.<span class=\"token operator\">&lt;</span>anonymous<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>/home/quanwei/git/learn-tdd-bdd/chai-assert.js:6:8<span class=\"token punctuation\">)</span>\n    at Module._compile <span class=\"token punctuation\">(</span>internal/modules/cjs/loader.js:778:30<span class=\"token punctuation\">)</span>\n    at Object.Module._extensions<span class=\"token punctuation\">..</span>js <span class=\"token punctuation\">(</span>internal/modules/cjs/loader.js:789:10<span class=\"token punctuation\">)</span>\n    at Module.load <span class=\"token punctuation\">(</span>internal/modules/cjs/loader.js:653:32<span class=\"token punctuation\">)</span>\n    at tryModuleLoad <span class=\"token punctuation\">(</span>internal/modules/cjs/loader.js:593:12<span class=\"token punctuation\">)</span>\n    at Function.Module._load <span class=\"token punctuation\">(</span>internal/modules/cjs/loader.js:585:3<span class=\"token punctuation\">)</span>\n    at Function.Module.runMain <span class=\"token punctuation\">(</span>internal/modules/cjs/loader.js:831:12<span class=\"token punctuation\">)</span>\n    at startup <span class=\"token punctuation\">(</span>internal/bootstrap/node.js:283:19<span class=\"token punctuation\">)</span>\n    at bootstrapNodeJSCore <span class=\"token punctuation\">(</span>internal/bootstrap/node.js:623:3<span class=\"token punctuation\">)</span></code></pre></div>\n<h4>BDD 风格的 chai</h4>\n<p><code class=\"language-text\">chai</code> 的 <code class=\"language-text\">BDD</code> 风格使用 <code class=\"language-text\">expect</code> 函数作为语义的起始，也是目前几乎所有 <code class=\"language-text\">BDD</code> 工具库都遵循的风格。</p>\n<p><code class=\"language-text\">chai</code> 的 <code class=\"language-text\">expect</code> 断言风格如下</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>have<span class=\"token punctuation\">.</span><span class=\"token function\">lengthOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">BDD</code> 的思想就是写单元测试就像写产品需求，而不关心内部逻辑，每一个用例阅读起来就像一篇文档。例如下面的用例：</p>\n<ol>\n<li>foo 是一个字符串              -><code class=\"language-text\">expect(foo).to.be.a(&#39;string&#39;)</code></li>\n<li>foo 字符串里包含 'bar'     -><code class=\"language-text\">expect(foo).to.include(&#39;bar&#39;)</code></li>\n<li>foo 字符串里不包含 'biz'  -> <code class=\"language-text\">expect(foo).to.not.include(&#39;biz&#39;)</code></li>\n</ol>\n<p>可以看到这种风格的测试用例可读性更强。</p>\n<p>其他的断言库还有 <code class=\"language-text\">expect.js</code> <code class=\"language-text\">should.js</code> <a href=\"https://github.com/tj/better-assert\">better-assert</a> , <a href=\"https://unexpected.js.org/\">unexpected.js</a> 这些断言库都只提供纯粹的断言函数，可以根据喜好选择不同的库使用。</p>\n<p>有了断言库之后我们还需要使用测试框架将我们的断言更好地组织起来。</p>\n<h3>mocha 和 Jasmine</h3>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/7288702281/d7ee/bc5d/30fb/7b198b7176345d6c8eb4db06254d2dc3.png\" alt=\"mocha jasmine\"></p>\n<p><code class=\"language-text\">mocha</code> 是一个经典的测试框架(Test Framework)，测试框架提供了一个单元测试的骨架，可以将不同子功能分成多个文件，也可以对一个子模块的不同子功能再进行不同的功能测试，从而生成一份结构型的测试报告。例如 <code class=\"language-text\">mocha</code> 就提供了<code class=\"language-text\">describe</code> 和 <code class=\"language-text\">it</code> 描述用例结构，提供了 <code class=\"language-text\">before</code>, <code class=\"language-text\">after</code>, <code class=\"language-text\">beforeEach</code>, <code class=\"language-text\">afterEach</code> 生命周期函数，提供了 <code class=\"language-text\">describe.only</code> ,<code class=\"language-text\">describe.skip</code> , <code class=\"language-text\">it.only</code>, <code class=\"language-text\">it.skip</code> 用以执行指定部分测试集。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> expect <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'chai'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> multiple <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./index'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Multiple'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">it</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'should be a function'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>multiple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">it</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'expect 2 * 3 = 6'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">multiple</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>测试框架不依赖底层的断言库，哪怕使用原生的 <code class=\"language-text\">assert</code> 模块也可以进行。给每一个文件都要手动引入 <code class=\"language-text\">chai</code> 比较麻烦 ，这时候可以给 <code class=\"language-text\">mocha</code> 配置全局脚本，在项目根目录 <code class=\"language-text\">.mocharc.js</code> 文件中加载断言库, 这样每个文件就可以直接使用 <code class=\"language-text\">expect</code> 函数了。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// .mocharc.js</span>\nglobal<span class=\"token punctuation\">.</span>expect <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'chai'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>expect<span class=\"token punctuation\">;</span></code></pre></div>\n<p>使用 mocha 可以将我们的单元测试输出成一份良好的测试报告 <code class=\"language-text\">mocha *.test.js</code></p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/7288724164/84dd/f65f/e9c8/e5ebd56f8332c721c6ccd85aba2d0c0f.png\"></p>\n<p>当出现错误时输出如下<img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/7288754833/2e6e/4cfe/90ee/06957d71ca816feb5844f35ea595fb09.png\"></p>\n<p>因为运行在不同环境中需要的包格式不同，所以需要我们针对不同环境做不同的包格式转换，为了了解在不同端跑单元测试需要做哪些事情，可以先来了解一下常见的包格式。</p>\n<p>目前我们主流有三种模块格式，分别是 <code class=\"language-text\">AMD</code>, <code class=\"language-text\">CommonJS</code>, <code class=\"language-text\">ES Module</code>。</p>\n<h4>AMD</h4>\n<p><a href=\"https://github.com/amdjs/amdjs-api/blob/master/AMD.md\">AMD</a> 是 <code class=\"language-text\">RequireJS</code> 推广过程中流行的一个比较老的规范，目前无论浏览器还是 <code class=\"language-text\">Node</code> 都没有默认支持。<code class=\"language-text\">AMD</code> 的标准定义了 <code class=\"language-text\">define</code> 和 <code class=\"language-text\">require</code>函数，<code class=\"language-text\">define</code>用来定义模块及其依赖关系，<code class=\"language-text\">require</code> 用以加载模块。例如</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-arrow deleted\">&lt;!doctype html>\n&lt;html lang=\"en\">\n</span><span class=\"token unchanged\">    &lt;head>\n        &lt;meta charset=\"UTF-8\"/>\n        &lt;title>Document&lt;/title>\n</span><span class=\"token inserted-sign inserted\">+        &lt;script\n+\t\t\tsrc=\"https://requirejs.org/docs/release/2.3.6/minified/require.js\">&lt;/script>\n+        &lt;script src=\"./index.js\" />\n</span><span class=\"token deleted-arrow deleted\">&lt;/head>\n</span><span class=\"token unchanged\">    &lt;body>&lt;/body>\n</span><span class=\"token deleted-arrow deleted\">&lt;/html></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// index.js</span>\n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'moduleA'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'https://some/of/cdn/path'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'moduleA'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">require</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> fs<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'moduleB'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'module B'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'moduleA'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'moduleB'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">moduleA<span class=\"token punctuation\">,</span> moduleB</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里使用了<code class=\"language-text\">RequireJS</code> 作为 <code class=\"language-text\">AMD</code> 引擎, 可以看到 <code class=\"language-text\">define</code> 函数会定义当前依赖了哪些模块并将模块加载完成后异步回调给当前模块，这种特性使得 AMD 尤为适合浏览器端异步加载。</p>\n<p>我们可以使用 <code class=\"language-text\">webpack</code> 打包一份 <code class=\"language-text\">amd</code> 模块看下真实代码</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// entry.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'hello amd'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    mode<span class=\"token punctuation\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span>\n    devtool<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    entry<span class=\"token punctuation\">:</span> <span class=\"token string\">'./entry.js'</span><span class=\"token punctuation\">,</span>\n    output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        libraryTarget<span class=\"token punctuation\">:</span> <span class=\"token string\">'amd'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最终生成代码(精简了不相关的逻辑)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// dist/main.js</span>\n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">default</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'hello amd'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在浏览器/<code class=\"language-text\">Node</code> 中想要使用 <code class=\"language-text\">AMD</code> 需要全局引入 <code class=\"language-text\">RequireJS</code>，对单元测试而言比较典型的问题是在初始化 <code class=\"language-text\">karma</code> 时会询问是否使用 <code class=\"language-text\">RequireJS</code> ，不过一般现在很少有人使用了。</p>\n<h4>CommonJS</h4>\n<p>可以缩写成<code class=\"language-text\">CJS</code> , 其 <a href=\"http://wiki.commonjs.org/wiki/Modules/1.1\">规范 </a>主要是为了定义 <code class=\"language-text\">Node</code> 的包格式，<code class=\"language-text\">CJS</code> 定义了三个关键字, 分别为 <code class=\"language-text\">require</code>，<code class=\"language-text\">exports</code>, <code class=\"language-text\">module</code>, 目前几乎所有<code class=\"language-text\">Node</code> 包以及前端相关的<code class=\"language-text\">NPM</code>包都会转换成该格式, <code class=\"language-text\">CJS</code> 在浏览器端需要使用 <code class=\"language-text\">webpack</code> 或者 <code class=\"language-text\">browserify</code> 等工具打包后才能执行。</p>\n<h4>ES Module</h4>\n<p><code class=\"language-text\">ES Module</code> 是 <code class=\"language-text\">ES 2015</code> 中定义的一种模块规范，该规范定义了 代表为 <code class=\"language-text\">import</code> 和 <code class=\"language-text\">export</code> ，是我们开发中常用的一种格式。虽然目前很多新版浏览器都支持<code class=\"language-text\">&lt;script type=&quot;module&quot;&gt;</code> 了，支持在浏览器中直接运行 <code class=\"language-text\">ES6</code> 代码，但是浏览器不支持 <code class=\"language-text\">node_modules</code> ，所以我们的原始 <code class=\"language-text\">ES6</code> 代码在浏览器上依然无法运行，所以这里我暂且认为浏览器不支持 <code class=\"language-text\">ES6</code> 代码, 依然需要做一次转换。</p>\n<p>下表为每种格式的支持范围，括号内表示需要借助外部工具支持。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Node</th>\n<th>浏览器</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AMD</td>\n<td>不支持(require.js, r.js)</td>\n<td>不支持(require.js)</td>\n</tr>\n<tr>\n<td>CommonJS</td>\n<td><strong>支持</strong></td>\n<td>不支持(webpack/browserify)</td>\n</tr>\n<tr>\n<td>ESModule</td>\n<td>不支持(babel)</td>\n<td>不支持(webpack)</td>\n</tr>\n</tbody>\n</table>\n<p>单元测试要在不同的环境下执行就要打不同环境对应的包，所以在搭建测试工具链时要确定自己运行在什么环境中，如果在 <code class=\"language-text\">Node</code> 中只需要加一层 <code class=\"language-text\">babel</code> 转换，如果是在真实浏览器中，则需要增加 <code class=\"language-text\">webpack</code> 处理步骤。</p>\n<p>所以为了能够在 <code class=\"language-text\">Node</code> 环境的 <code class=\"language-text\">Mocha</code>中使用 <code class=\"language-text\">ES Module</code> 有两种方式</p>\n<ol>\n<li><code class=\"language-text\">Node</code> 环境天生支持 <code class=\"language-text\">ES Module</code> (node version >= 15)</li>\n<li>使用 <code class=\"language-text\">babel</code> 代码进行一次转换</li>\n</ol>\n<p>第一种方式略过，第二种方式使用下面的配置</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @babel/register @babel/core @babel/preset-env --save-dev</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">// .mocharc.js\n<span class=\"token inserted-sign inserted\">+ require('@babel/register');\n</span>global.expect = require('chai').expect;</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">// .babelrc\n<span class=\"token inserted-sign inserted\">+ {\n+    \"presets\": [\"@babel/preset-env\" ，“@babel/preset-typescript”]\n+ }</span></code></pre></div>\n<p>同样地如果在项目中用到了 <code class=\"language-text\">TypeScript</code>, 就可以使用<code class=\"language-text\">ts-node/register</code> 来解决，因为 <code class=\"language-text\">TypeScript</code>本身支持 <code class=\"language-text\">ES Module</code> 转换成 <code class=\"language-text\">CJS</code>, 所以支持了 <code class=\"language-text\">TypeScript</code>后就不需要使用 <code class=\"language-text\">babel</code> 来转换了。(这里假设使用了 <code class=\"language-text\">TypeScript</code> 的默认配置)</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> ts-node typescript --save-dev</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// .mocharc.js</span>\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ts-node/register'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">Mocha</code> 自身支持浏览器和 <code class=\"language-text\">Node</code> 端测试，为了在浏览器端测试我们需要写一个 html, 里面使用 <code class=\"language-text\">&lt;script src=&quot;mocha.min.js&quot;&gt;</code> 的文件，然后再将本地所有文件插入到html中才能完成测试，手动做工程化效率比较低，所以需要借助工具来实现这个任务，这个工具就是 <code class=\"language-text\">Karma</code>。</p>\n<p><code class=\"language-text\">Karma</code> 本质上就是在本地启动一个web服务器，然后再启动一个外部浏览器加载一个引导脚本，这个脚本将我们所有的源文件和测试文件加载到浏览器中，最终就会在浏览器端执行我们的测试用例代码。所以使用 <code class=\"language-text\">Karma</code> + <code class=\"language-text\">mocha</code> +<code class=\"language-text\">chai</code> 即可搭建一个完整的浏览器端的单元测试工具链。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> karma mocha chai karma-mocha karma-chai --save-dev\nnpx karma init\n// Which testing framework <span class=\"token keyword\">do</span> you want to use: mocha\n// Do you want to use Require.js: no\n// Do you want capture any browsers automatically: Chrome</code></pre></div>\n<p>这里 <code class=\"language-text\">Karma</code> 初始化时选择了 <code class=\"language-text\">Mocha</code> 的支持，然后第二个 <code class=\"language-text\">Require.js</code> 一般为否，除非业务代码中使用了<code class=\"language-text\">amd</code>类型的包。第三个选用 <code class=\"language-text\">Chrome</code> 作为测试浏览器。 然后再在代码里单独配置下 <code class=\"language-text\">chai</code> 。</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">// karma.conf.js\nmodule.exports = function(config) {\n<span class=\"token unchanged\">  config.set({\n</span>\n<span class=\"token unchanged\">    // base path that will be used to resolve all patterns (eg. files, exclude)\n    basePath: '',\n</span>\n<span class=\"token unchanged\">    // frameworks to use\n    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n</span><span class=\"token deleted-sign deleted\">-    frameworks: ['mocha'],\n</span><span class=\"token inserted-sign inserted\">+    frameworks: ['mocha', 'chai'],\n</span>\n<span class=\"token unchanged\">    // list of files / patterns to load in the browser\n    files: [],</span></code></pre></div>\n<p><code class=\"language-text\">Karma</code> 的 <code class=\"language-text\">frameworks</code> 作用是在全局注入一些依赖，这里的配置就是将 <code class=\"language-text\">Mocha</code> 和 <code class=\"language-text\">chai</code> 提供的测试相关工具暴露在全局上供代码里使用。 <code class=\"language-text\">Karma</code> 只是将我们的文件发送到浏览器去执行，但是根据前文所述我们的代码需要经过 <code class=\"language-text\">webpack</code> 或 <code class=\"language-text\">browserify</code> 打包后才能运行在浏览器端。</p>\n<p>如果原始代码已经是 <code class=\"language-text\">CJS</code>了，可以使用 <code class=\"language-text\">browserify</code> 来支持浏览器端运行，基本零配置，但是往往现实世界比较复杂，我们有 <code class=\"language-text\">ES6</code>，<code class=\"language-text\">JSX</code> 以及 <code class=\"language-text\">TypeScript</code> 要处理，所以这里我们使用 <code class=\"language-text\">webpack</code> 。</p>\n<p> 下面是 <code class=\"language-text\">webpack</code> 的配置信息。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> karma-webpack@4 webpack@4 @babel/core @babel/preset-env @babel/preset-react babel-loader --save-dev</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">// karma.conf.js\nmodule.exports = function(config) {\n<span class=\"token unchanged\">  config.set({\n</span>\n<span class=\"token unchanged\">    // base path that will be used to resolve all patterns (eg. files, exclude)\n    basePath: '',\n</span>\n<span class=\"token unchanged\">    // frameworks to use\n    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n    frameworks: ['mocha', 'chai'],\n</span>\n\n<span class=\"token unchanged\">    // list of files / patterns to load in the browser\n    files: [\n</span><span class=\"token inserted-sign inserted\">+      { pattern: \"test/*.test.js\", watched: false }\n</span><span class=\"token unchanged\">    ],\n</span>\n<span class=\"token unchanged\">    preprocessors: {\n</span><span class=\"token inserted-sign inserted\">+      'test/**/*.js': [ 'webpack']\n</span><span class=\"token unchanged\">    },\n</span>\n<span class=\"token inserted-sign inserted\">+    webpack: {\n+       module: {\n+\t\t\trules: [{\n+           test: /.*\\.js/,\n+           use: 'babel-loader'\n+         }]\n+     }\n+    },</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// .babelrc</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@babel/preset-env\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"@babel/preset-react\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里我们测试一个<code class=\"language-text\">React</code> 程序代码如下</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// js/index.js</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">renderToPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'there is real browser'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span> str <span class=\"token punctuation\">}</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// test/index.test.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> renderToPage <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../js/index'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'renderToPage'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">it</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'should render to page'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> content <span class=\"token operator\">=</span> <span class=\"token string\">'magic string'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">renderToPage</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>innerText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">contain</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/7288797723/727f/709e/c4f1/9261201cc80a03968211862de81c8a1d.png\"></p>\n<p>并且打开了本地浏览器</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/7288813921/78e9/883b/4718/337b43c0841428ce9dafadb3db61d57e.png\" alt=\"karma browser\"></p>\n<p>可以看到现在已经在真实浏览器中运行测试程序了。</p>\n<p>因为图形化的测试对 <code class=\"language-text\">CI</code> 机器不友好，所以可以选择 <code class=\"language-text\">puppeteer</code> 代替 <code class=\"language-text\">Chrome</code>。</p>\n<p>再者这些都是很重的包，如果对真实浏览器依赖性不强，可以使用 <code class=\"language-text\">JSDOM</code> 在 <code class=\"language-text\">Node</code> 端模拟一个浏览器环境。</p>\n<p>稍微总结下工具链</p>\n<ul>\n<li>在 Node 环境下测试工具链可以为 : <code class=\"language-text\">mocha</code> + <code class=\"language-text\">chai</code> + <code class=\"language-text\">babel</code></li>\n<li>模拟浏览器环境可以为 : <code class=\"language-text\">mocha</code> + <code class=\"language-text\">chai</code> + <code class=\"language-text\">babel</code> + <code class=\"language-text\">jsdom</code></li>\n<li>在真实浏览器环境下测试工具链可以为 : <code class=\"language-text\">karma</code> + <code class=\"language-text\">mocha</code> + <code class=\"language-text\">chai</code> + <code class=\"language-text\">webpack</code> + <code class=\"language-text\">babel</code></li>\n</ul>\n<p>一个测试流水线往往需要很多个工具搭配使用，配置起来比较繁琐，还有一些额外的工具例如单元覆盖率（istanbul），函数/时间模拟 (sinon.js）等工具。工具之间的配合有时候不一定能够完美契合，选型费时费力。</p>\n<p><code class=\"language-text\">jasmine</code> 的出现就稍微缓解了一下这个问题，但也不够完整，<code class=\"language-text\">jasmine</code>提供一个测试框架，里面包含了 测试流程框架，断言函数，mock工具等测试中会遇到的工具。可以近似地看作 <code class=\"language-text\">jasmine = mocha + chai + 辅助工具</code> 。</p>\n<p>接下来试一试 <code class=\"language-text\">jasmine</code> 的工作流程。</p>\n<p>使用 <code class=\"language-text\">npx jasmine init</code> 初始化之后会在当前目录中生成<code class=\"language-text\">spec</code>目录, 其中包含一份默认的配置文件</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ./spec/support/jasmine.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"spec_dir\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"spec\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"spec_files\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"**/*[sS]pec.js\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"helpers\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"helpers/**/*.js\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"stopSpecOnExpectationFailure\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"random\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果希望加载一些全局的配置可以在 <code class=\"language-text\">spec/helpers</code> 目录中放一些<code class=\"language-text\">js</code>文件, 正如配置所言，jasmine 在启动时会去执行 <code class=\"language-text\">spec/helpers</code> 目录下的所有<code class=\"language-text\">js</code>文件。</p>\n<p>比如我们常常使用 <code class=\"language-text\">es6</code>语法，就需要增加<code class=\"language-text\">es6</code>的支持。</p>\n<p>新增 <code class=\"language-text\">spec/helpers/babel.js</code> 写入如下配置即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @babel/register @babel/core @babel/preset-env --save-dev</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// spec/helpers/babel.js</span>\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'babel-register'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// .babelrc</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@babel/preset-env\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>和 <code class=\"language-text\">mocha</code> 一样，如果需要 <code class=\"language-text\">TypeScript</code> 的支持，可以使用如下配置</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> ts-node typescript --save-dev</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// spec/helpers/typescript.js</span>\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ts-node/register'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>配置文件中的 <code class=\"language-text\">spec_dir</code>是 <code class=\"language-text\">jasmine</code>约定的用例文件目录，<code class=\"language-text\">spec_files</code>规定了用例文件格式为 <code class=\"language-text\">xxx.spec.js</code>。</p>\n<p>有了这份默认配置就可以按照要求写用例，例如</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ./spec/index.spec.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> multiple <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../index.js'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Multiple'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">it</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'should be a function'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>multiple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInstanceOf</span><span class=\"token punctuation\">(</span>Function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">it</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'should 7 * 2 = 14'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">multiple</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">it</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'should 7 * -2 = -14'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">multiple</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">jasmine</code> 的断言风格和 <code class=\"language-text\">chai</code> 很不一样，<code class=\"language-text\">jasmine</code> 的 <code class=\"language-text\">API</code> 如下，与 <code class=\"language-text\">chai</code> 相比少写了很多 <code class=\"language-text\">.</code> ，而且支持的功能更加清晰，不用考虑如何组合使用的问题，而且下文介绍的 <code class=\"language-text\">jest</code> 测试框架也是使用这种风格。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">nothing()\ntoBe(expected)\ntoBeCloseTo(expected, precisionopt)\ntoBeDefined()\ntoBeFalse()\ntoBeFalsy()\ntoBeGreaterThan(expected)\ntoBeGreaterThanOrEqual(expected)\ntoBeInstanceOf(expected)\ntoBeLessThan(expected)\ntoBeLessThanOrEqual(expected)\ntoBeNaN()\ntoBeNegativeInfinity()\ntoBeNull()\ntoBePositiveInfinity()\ntoBeTrue()\ntoBeTruthy()\ntoBeUndefined()\ntoContain(expected)\ntoEqual(expected)\ntoHaveBeenCalled()\ntoHaveBeenCalledBefore(expected)\ntoHaveBeenCalledOnceWith()\ntoHaveBeenCalledTimes(expected)\ntoHaveBeenCalledWith()\ntoHaveClass(expected)\ntoHaveSize(expected)\ntoMatch(expected)\ntoThrow(expectedopt)\ntoThrowError(expectedopt, messageopt)\ntoThrowMatching(predicate)\nwithContext(message) → {matchers}</code></pre></div>\n<p>运行 <code class=\"language-text\">jasmine</code> 即可生成测试报告</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/7288840974/e1bb/d2cb/428e/60b4be284d81de2b603f21009002e455.png\"></p>\n<p>默认的测试报告不是很直观， 如果希望提供类似 <code class=\"language-text\">Mocha</code> 风格的报告可以安装 <code class=\"language-text\">jasmine-spec-reporter</code> ，在 <code class=\"language-text\">spec/helpers</code> 目录中添加一个配置文件， 例如<code class=\"language-text\">spec/helpers/reporter.js</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> SpecReporter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jasmine-spec-reporter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>SpecReporter<span class=\"token punctuation\">;</span>\n\njasmine<span class=\"token punctuation\">.</span><span class=\"token function\">getEnv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">clearReporters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// remove default reporter logs</span>\njasmine<span class=\"token punctuation\">.</span><span class=\"token function\">getEnv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addReporter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SpecReporter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>  <span class=\"token comment\">// add jasmine-spec-reporter</span>\n  spec<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    displayPending<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>此时输出的用例报告如下</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/7288855339/75e5/56c6/459a/e5a7f325b2a12fa92351e7b7b938ee2b.png\" alt=\"jasmine\"></p>\n<p>如果在 <code class=\"language-text\">Jasmine</code> 中执行 DOM 级别的测试，就依然需要借助 <code class=\"language-text\">Karma</code> 或 <code class=\"language-text\">JSDOM</code>了，具体的配置这里就不再赘述。</p>\n<p>总结下 <code class=\"language-text\">Jasmine</code> 的工具链</p>\n<ol>\n<li>Node 环境下测试 : <code class=\"language-text\">Jasmine</code> + <code class=\"language-text\">babel</code></li>\n<li>模拟 <code class=\"language-text\">JSDOM</code> 测试 : <code class=\"language-text\">Jasmine</code> + <code class=\"language-text\">JSDOM</code> + <code class=\"language-text\">babel</code></li>\n<li>真实浏览器测试 : <code class=\"language-text\">Karma</code> + <code class=\"language-text\">Jasmine</code> + <code class=\"language-text\">webpack</code> + <code class=\"language-text\">babel</code></li>\n</ol>\n<h3>JEST</h3>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/7288870749/a67b/da76/efa9/09afbcf7e97663425e2e793d1b4f49d4.png\" alt=\"jest\"></p>\n<p><code class=\"language-text\">Jest</code> 是 <code class=\"language-text\">facebook</code> 出的一个完整的单元测试技术方案，集 测试框架, 断言库, 启动器, 快照，沙箱，mock工具于一身，也是 <code class=\"language-text\">React</code> 官方使用的测试工具。<code class=\"language-text\">Jest</code> 和 <code class=\"language-text\">Jasmine</code> 具有非常相似的 <code class=\"language-text\">API</code> ，所以在 <code class=\"language-text\">Jasmine</code> 中用到的工具在 <code class=\"language-text\">Jest</code> 中依然可以很自然地使用。可以近似看作 <code class=\"language-text\">Jest = JSDOM 启动器 + Jasmine</code> 。</p>\n<p>虽然 Jest 提供了很丰富的功能，但是并没有内置 <code class=\"language-text\">ES6</code> 支持，所以依然需要根据不同运行时对代码进行转换，由于 Jest 主要运行在 <code class=\"language-text\">Node</code> 中，所以需要使用 <code class=\"language-text\">babel-jest</code> 将 <code class=\"language-text\">ES Module</code> 转换成 <code class=\"language-text\">CommonJS</code> 。</p>\n<p>Jest 的默认配置</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> jest --save-dev\nnpx jest --init\n√ Would you like to use Jest when running <span class=\"token string\">\"test\"</span> script <span class=\"token keyword\">in</span> <span class=\"token string\">\"package.json\"</span>? <span class=\"token punctuation\">..</span>. <span class=\"token function\">yes</span>\n√ Would you like to use Typescript <span class=\"token keyword\">for</span> the configuration file? <span class=\"token punctuation\">..</span>. no\n√ Choose the <span class=\"token builtin class-name\">test</span> environment that will be used <span class=\"token keyword\">for</span> testing » jsdom <span class=\"token punctuation\">(</span>browser-like<span class=\"token punctuation\">)</span>\n√ Do you want Jest to <span class=\"token function\">add</span> coverage reports? <span class=\"token punctuation\">..</span>. no\n√ Which provider should be used to instrument code <span class=\"token keyword\">for</span> coverage? » babel\n√ Automatically <span class=\"token function\">clear</span> mock calls and instances between every test? <span class=\"token punctuation\">..</span>. <span class=\"token function\">yes</span></code></pre></div>\n<p>在 <code class=\"language-text\">Node</code> 或 <code class=\"language-text\">JSDOM</code> 下增加 <code class=\"language-text\">ES6</code>代码的支持</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> jest-babel @babel/core @babel/preset-env</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// .babelrc</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@babel/preset-env\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">// jest.config.js\n// 下面两行为默认配置，不写也可以\n{\n<span class=\"token inserted-sign inserted\">+    testEnvironment: \"jsdom\",\n+    transform: {\"\\\\.[jt]sx?$\": \"babel-jest\"}\n</span>}</code></pre></div>\n<p>使用 <code class=\"language-text\">Jest</code> 生成测试报告</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/7288884924/d4ed/3c56/9b03/0adaf779f64f8ff5ec4cc4bdc4a023a4.png\" alt=\"jest\"></p>\n<p>对于 <code class=\"language-text\">React</code> 和 <code class=\"language-text\">TypeScript</code> 支持也可以通过修改 <code class=\"language-text\">babel</code> 的配置解决</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @babel/preset-react @babel/preset-typescript --save-dev</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// .babrlrc</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@babel/preset-env\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"@babel/preset-react\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"@babel/preset-typescript\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Jest 在真实浏览器环境下测试</h4>\n<p>目前 <code class=\"language-text\">Jest</code> 不支持直接在真实浏览器中进行测试，其默认的启动器只提供了一个 <code class=\"language-text\">JSDOM</code> 环境，在浏览器中进行单元测试目前只有 <code class=\"language-text\">Karma</code> 方案能做到，所以也可以使用 <code class=\"language-text\">Karma</code> + <code class=\"language-text\">Jest</code> 方案实现，但是不建议这么做，因为 <code class=\"language-text\">Jest</code> 自身太重，使用 <code class=\"language-text\">Karma</code> + <code class=\"language-text\">Jasmine</code> 能达到基本一样的效果。</p>\n<p>另外还有一个比较流行的 <code class=\"language-text\">E2E</code> 方案 <code class=\"language-text\">Jest</code> + <code class=\"language-text\">Puppeteer</code> ,  由于 <code class=\"language-text\">E2E</code>  不属于单元测试范畴，这里不再展开。</p>\n<p><code class=\"language-text\">Jest</code> 工具链总结</p>\n<ul>\n<li>Node 环境下测试 : <code class=\"language-text\">Jest</code> + <code class=\"language-text\">babel</code></li>\n<li><code class=\"language-text\">JSDOM</code> 测试 : <code class=\"language-text\">Jest</code> + <code class=\"language-text\">babel</code></li>\n<li>真实浏览器测试(不推荐)</li>\n<li><code class=\"language-text\">E2E</code> 测试 : <code class=\"language-text\">Jest</code> + <code class=\"language-text\">Puppeteer</code></li>\n</ul>\n<h5>稍作总结</h5>\n<p>上面的内容介绍了 <code class=\"language-text\">chai</code> ,  <code class=\"language-text\">mocha</code> , <code class=\"language-text\">karma</code> , <code class=\"language-text\">jasmine</code> 和 <code class=\"language-text\">jest</code>, 每种工具分别对应一些自己特有的工具链，在选取合适的测试工具时根据实际需要选择， 测试领域还有非常多的工具数都数不过来，下面来看下 React 单元测试的一些方法。</p>\n<h4>使用 Jest + Enzyme 对 React 进行单元测试</h4>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/7288949022/b540/991e/e6c7/04186cfa1052b4769df679a2aaca6685.png\" alt=\"enzyme\"></p>\n<p><code class=\"language-text\">Enzyme</code>基础配置如下:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> enzyme enzyme-adapter-react-16 jest-enzyme jest-environment-enzyme jest-canvas-mock react@16 react-dom@16 --save-dev</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">// jest.config.js\n{\n<span class=\"token deleted-sign deleted\">- \"testEnvironment\": \"jsdom\",\n</span><span class=\"token inserted-sign inserted\">+  setupFilesAfterEnv: [\"jest-enzyme\", \"jest-canvas-mock\"],\n+  testEnvironment: \"enzyme\",\n+  testEnvironmentOptions: {\n+    \"enzymeAdapter\": \"react16\"\n+  },\n</span>}</code></pre></div>\n<p><code class=\"language-text\">jest-canvas-mock</code> 这个包是为了解决一些使用 <code class=\"language-text\">JSDOM</code> 未实现行为触发警告的问题。</p>\n<p>上面建立了一个使用 <code class=\"language-text\">Enzyme</code> 比较友好的环境，可以直接在全局作用域里引用 <code class=\"language-text\">React</code> , <code class=\"language-text\">shallow</code>, <code class=\"language-text\">mount</code> 等 <code class=\"language-text\">API</code>。此外 <code class=\"language-text\">Enzyme</code> 还注册了许多友好的断言函数到 <code class=\"language-text\">Jest</code> 中，如下所示，<a href=\"https://github.com/enzymejs/enzyme-matchers/blob/master/packages/jest-enzyme/README.md\">参考地址</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">toBeChecked()\ntoBeDisabled()\ntoBeEmptyRender()\ntoExist()\ntoContainMatchingElement()\ntoContainMatchingElements()\ntoContainExactlyOneMatchingElement()\ntoContainReact()\ntoHaveClassName()\ntoHaveDisplayName()\ntoHaveHTML()\ntoHaveProp()\ntoHaveRef()\ntoHaveState()\ntoHaveStyle()\ntoHaveTagName()\ntoHaveText()\ntoIncludeText()\ntoHaveValue()\ntoMatchElement()\ntoMatchSelector()</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// js/ClassComponent.js</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>PureComponent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'classcomponent'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n                a simple <span class=\"token keyword\">class</span> <span class=\"token class-name\">component</span>\n                <span class=\"token operator\">&lt;</span>CustomComponent <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// test/hook.test.js</span>\n<span class=\"token keyword\">import</span> HookComponent <span class=\"token keyword\">from</span> <span class=\"token string\">'../js/HookComponent'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'HookComponent'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">it</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'test with shallow'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> wrapper <span class=\"token operator\">=</span> <span class=\"token function\">shallow</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>HookComponent id<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'classcomponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toIncludeText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a simple class component'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContainReact</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>a simple <span class=\"token keyword\">class</span> <span class=\"token class-name\">component</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContainMatchingElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CustomComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">Enzyme</code> 提供了三种渲染组件方法</p>\n<ul>\n<li><code class=\"language-text\">shallow</code> 使用 <code class=\"language-text\">react-test-renderer</code> 将组件渲染成内存中的对象, 可以方便进行 <code class=\"language-text\">props</code>, <code class=\"language-text\">state</code> 等数据方面的测试，对应的操作对象为 <code class=\"language-text\">ShallowWrapper</code>，在这种模式下仅能感知到第一层自定义子组件，对于自定义子组件内部结构则无法感知。</li>\n<li><code class=\"language-text\">mount</code> 使用 <code class=\"language-text\">react-dom</code> 渲染组件，会创建真实 <code class=\"language-text\">DOM</code> 节点，比 <code class=\"language-text\">shallow</code> 相比增加了可以使用原生 <code class=\"language-text\">API</code> 操作 <code class=\"language-text\">DOM</code> 的能力，对应的操作对象为 <code class=\"language-text\">ReactWrapper</code>，这种模式下感知到的是一个完整的 <code class=\"language-text\">DOM</code> 树。</li>\n<li><code class=\"language-text\">render</code> 使用 <code class=\"language-text\">react-dom-server</code> 渲染成 <code class=\"language-text\">html</code> 字符串，基于这份静态文档进行操作，对应的操作对象为 <code class=\"language-text\">CheerioWrapper</code>。</li>\n</ul>\n<h4>Shallow 渲染</h4>\n<p>因为 <code class=\"language-text\">shallow</code> 模式仅能感知到第一层自定义子组件组件，往往只能用于简单组件测试。例如下面的组件</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// js/avatar.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Image</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> src <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>src<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Living</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"icon-living\"</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Avatar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> user<span class=\"token punctuation\">,</span> onClick <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> living<span class=\"token punctuation\">,</span> avatarUrl <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> user<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"wrapper\"</span><span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>Living <span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span><span class=\"token operator\">></span> 直播中 <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Living<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>Image src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>avatarUrl<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Avatar<span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">shallow</code> 渲染虽然不是真正的渲染，但是其组件生命周期会完整地走一遍。</p>\n<p>使用 <code class=\"language-text\">shallow(&lt;Avatar /&gt;)</code> 能感知到的结构如下, 注意看到 <code class=\"language-text\">div.text</code> 作为 <code class=\"language-text\">Living</code> 组件的 <code class=\"language-text\">children</code> 能够被检测到，但是 <code class=\"language-text\">Living</code> 的内部结构无法感知。</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/7288961002/d1ac/72cd/3523/afa5210e03236071b83b5322d0368c6e.png\" alt=\"shallow\"></p>\n<p><code class=\"language-text\">Enzyme</code> 支持的选择器支持我们熟悉的 <code class=\"language-text\">css selector</code> 语法，这种情况下我们可以对 <code class=\"language-text\">DOM</code> 结构做如下测试</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// test/avatar.test.js</span>\n<span class=\"token keyword\">import</span> Avatar <span class=\"token keyword\">from</span> <span class=\"token string\">'../js/avatar'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Avatar'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> wrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> avatarUrl <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        wrapper <span class=\"token operator\">=</span> <span class=\"token function\">shallow</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Avatar user<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> avatarUrl<span class=\"token punctuation\">:</span> avatarUrl <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">unmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        jest<span class=\"token punctuation\">.</span><span class=\"token function\">clearAllMocks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">it</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'should render success'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// wrapper 渲染不为空</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toBeEmptyRender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Image 组件渲染不为空, 这里会执行 Image 组件的渲染函数</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Image'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toBeEmptyRender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 包含一个节点</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContainMatchingElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div.container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 包含一个自定义组件</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContainMatchingElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Image\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContainMatchingElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Living'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// shallow 渲染不包含子组件的内部结构</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toContainMatchingElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// shallow 渲染包含 children 节点</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContainMatchingElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div.text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// shallow 渲染可以对 children 节点内部结构做测试</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div.text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toIncludeText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'直播中'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>如果我们想去测试对应组件的 <code class=\"language-text\">props</code> / <code class=\"language-text\">state</code> 也可以很方便测试，不过目前存在缺陷，<code class=\"language-text\">Class Component</code> 能通过 <code class=\"language-text\">toHaveProp</code>, <code class=\"language-text\">toHaveState</code> 直接测试， 但是 <code class=\"language-text\">Hook</code> 组件无法测试 <code class=\"language-text\">useState</code> 。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">it</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Image component receive props'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> imageWrapper <span class=\"token operator\">=</span> wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Image'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>、\n  <span class=\"token comment\">// 对于 Hook 组件目前我们只能测试 props</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>imageWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveProp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> avatarUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">wrapper.find</code> 虽然会返回同样的一个 <code class=\"language-text\">ShallowWrapper</code> 对象，但是这个对象的子结构是未展开的，如果想测试<code class=\"language-text\">imageWrapper</code> 内部结构，需要再 <code class=\"language-text\">shallow render</code> 一次。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">it</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Image momponent receive props'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> imageWrapper <span class=\"token operator\">=</span> wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Image'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">shallow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>imageWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveProp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> avatarUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>imageWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toContainMatchingElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>imageWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveProp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> avatarUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>也可以改变组件的 <code class=\"language-text\">props</code>, 触发组件重绘</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">it</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'should rerender when user change'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> newAvatarUrl <span class=\"token operator\">=</span> <span class=\"token string\">''</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">setProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> user<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> avatarUrl<span class=\"token punctuation\">:</span> newAvatarUrl <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Image'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveProp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> newAvatarUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>另一个常见的场景是事件模拟，事件比较接近真实测试场景，这种场景下使用 <code class=\"language-text\">shallow</code> 存在诸多缺陷，因为 <code class=\"language-text\">shallow</code> 场景事件不会像真实事件一样有捕获和冒泡流程，所以此时只能简单的触发对应的 <code class=\"language-text\">callback</code> 达到测试目的。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">it</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'will call onClick prop when click event fired'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">setProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">:</span> fn <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 这里触发了两次点击事件，但是 onClick 只会被调用一次。</span>\n    wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div.container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">simulate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div.wrapper'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">simulate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>关于这些网上有人总结了 <code class=\"language-text\">shallow</code> 模式下的一些不足</p>\n<ol>\n<li><code class=\"language-text\">shallow</code> 渲染不会进行事件冒泡，而 <code class=\"language-text\">mount</code> 会。</li>\n<li><code class=\"language-text\">shallow</code> 渲染因为不会创建真实 <code class=\"language-text\">DOM</code>，所以组件中使用 <code class=\"language-text\">refs</code> 的地方都无法正常获取，如果确实需要使用 <code class=\"language-text\">refs</code> , 则必须使用 <code class=\"language-text\">mount</code>。</li>\n<li><code class=\"language-text\">simulate</code>  在 <code class=\"language-text\">mount</code> 中会更加有用，因为它会进行事件冒泡。</li>\n</ol>\n<p>其实上面几点说明了一个现象是 <code class=\"language-text\">shallow</code> 往往只适合一种理想的场景，一些依赖浏览器行为表现的操作 <code class=\"language-text\">shallow</code> 无法满足，这些和真实环境相关的就只能使用<code class=\"language-text\">mount</code>了。</p>\n<h4>Mount 渲染</h4>\n<p><code class=\"language-text\">Mount</code> 渲染的对象结构为 <code class=\"language-text\">ReactWrapper</code> 其提供了和 <code class=\"language-text\">ShallowWrapper</code> 几乎一样的 <code class=\"language-text\">API</code> , 差异很小。</p>\n<p>在 <code class=\"language-text\">API</code>层面的一些差异如下</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token inserted-sign inserted\">+ getDOMNode()        获取DOM节点\n+ detach()            卸载React组件，相当于 unmountComponentAtNode\n+ mount()             挂载组件，unmount之后通过这个方法重新挂载\n+ ref(refName)        获取 class component 的 instance.refs 上的属性\n+ setProps(nextProps, callback)\n</span><span class=\"token deleted-sign deleted\">- setProps(nextProps)\n- shallow()\n- dive()\n- getElement()\n- getElements()</span></code></pre></div>\n<p>另外由于 <code class=\"language-text\">mount</code> 使用 <code class=\"language-text\">ReactDOM</code> 进行渲染，所以其更加接近真实场景，在这种模式下我们能观察到整个 <code class=\"language-text\">DOM</code> 结构和React组件节点结构。</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/7688022285/ad17/32c1/17d0/97eff4bf93e02f26b71747e844d04982.png\" alt=\"mount\"></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mount Avatar'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> wrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> avatarUrl <span class=\"token operator\">=</span> <span class=\"token string\">'123'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        wrapper <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Avatar user<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> avatarUrl <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        jest<span class=\"token punctuation\">.</span><span class=\"token function\">clearAllMocks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">it</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'should set img src with avatarurl'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Image'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toExist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Image'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveProp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> avatarUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveProp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> avatarUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>在 <code class=\"language-text\">shallow</code> 中无法模拟的事件触发问题在 <code class=\"language-text\">mount</code> 下就不再是问题。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">it</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'will call onClick prop when click event fired'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">setProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> onClick<span class=\"token punctuation\">:</span> fn <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div.container'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">simulate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div.wrapper'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">simulate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledTimes</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>总结一下 <code class=\"language-text\">shallow</code> 中能做的 <code class=\"language-text\">mount</code> 都能做，<code class=\"language-text\">mount</code>中能做的 <code class=\"language-text\">shallow</code>不一定能做。</p>\n<h4>Render 渲染</h4>\n<p><code class=\"language-text\">render</code> 内部使用 <code class=\"language-text\">react-dom-server</code> 渲染成字符串，再经过 <code class=\"language-text\">Cherrio</code> 转换成内存中的结构，返回 <code class=\"language-text\">CheerioWrapper</code> 实例，能够完整地渲染整个<code class=\"language-text\">DOM</code> 树，但是会将内部实例的状态丢失，所以也称为 <code class=\"language-text\">Static Rendering</code> 。这种渲染能够进行的操作比较少，这里也不作具体介绍，可以参考 <a href=\"https://enzymejs.github.io/enzyme/docs/api/render.html\">官方文档</a> 。</p>\n<h3>总结</h3>\n<p>如果让我推荐的话，对于真实浏览器我会推荐 <code class=\"language-text\">Karma</code> + <code class=\"language-text\">Jasmine</code> 方案测试，对于 <code class=\"language-text\">React</code> 测试 <code class=\"language-text\">Jest</code> + <code class=\"language-text\">Enzyme</code> 在 <code class=\"language-text\">JSDOM</code> 环境下已经能覆盖大部分场景。另外测试 <code class=\"language-text\">React</code>组件除了 <code class=\"language-text\">Enzyme</code> 提供的操作， <code class=\"language-text\">Jest</code> 中还有很多其他有用的特性，比如可以 <code class=\"language-text\">mock</code> 一个 <code class=\"language-text\">npm</code> 组件的实现，调整 <code class=\"language-text\">setTimeout</code> 时钟等，真正进行单元测试时，这些工具也是必不可少的，整个单元测试技术体系包含了很多东西，本文无法面面俱到，只介绍了一些距离我们最近的相关的技术体系。</p>\n<p>参考</p>\n<ol>\n<li><a href=\"https://medium.com/building-ibotta/understanding-chai-js-language-mechanics-cc28e4c9604b\">https://medium.com/building-ibotta/understanding-chai-js-language-mechanics-cc28e4c9604b</a></li>\n<li><a href=\"https://medium.com/@turhan.oz/typescript-with-jasmine-easy-project-setup-530c7cc764e8\">https://medium.com/@turhan.oz/typescript-with-jasmine-easy-project-setup-530c7cc764e8</a></li>\n<li><a href=\"https://www.liuyiqi.cn/2015/10/12/karma-start/\">https://www.liuyiqi.cn/2015/10/12/karma-start/</a></li>\n<li><a href=\"https://jestjs.io/docs/en\">https://jestjs.io/docs/en</a></li>\n<li><a href=\"https://blog.bitsrc.io/how-to-test-react-components-with-jest-and-enzyme-in-depth-145fcd06b90\">https://blog.bitsrc.io/how-to-test-react-components-with-jest-and-enzyme-in-depth-145fcd06b90</a></li>\n<li><a href=\"https://www.freecodecamp.org/news/testing-react-hooks/\">https://www.freecodecamp.org/news/testing-react-hooks/</a></li>\n<li><a href=\"https://www.reddit.com/r/reactjs/comments/ajw2uv/jestenzyme_simulate_event_bubbling_onclick/\">https://www.reddit.com/r/reactjs/comments/ajw2uv/jestenzyme_simulate_event_bubbling_onclick/</a></li>\n</ol>\n<blockquote>\n<p>本文发布自 <a href=\"https://github.com/x-orpheus\">网易云音乐大前端团队</a>，文章未经授权禁止任何形式的转载。我们常年招收前端、iOS、Android，如果你准备换工作，又恰好喜欢云音乐，那就加入我们 grp.music-fe(at)corp.netease.com！</p>\n</blockquote>","frontmatter":{"title":"前端单元测试技术方案总结","date":"2021-03-03","description":"单元测试的技术方案很多，不同工具之间有互相协同，也存在功能重合，给我们搭配测试方案带来不小的困难，而且随着 ES6, TypeScript 的出现，单元测试又增加了很多其他步骤，完整配置起来往往需要很大的时间成本。"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/web-unit-test/","previous":{"fields":{"slug":"/wkwebview/"},"frontmatter":{"title":"WKWebView 请求拦截探索与实践"}},"next":{"fields":{"slug":"/qiankun-practice/"},"frontmatter":{"title":"基于 qiankun 的微前端应用实践"}}}}}