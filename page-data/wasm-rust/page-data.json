{"componentChunkName":"component---src-templates-blog-post-js","path":"/wasm-rust/","webpackCompilationHash":"a328ffc1161c667df4f7","result":{"data":{"site":{"siteMetadata":{"title":"云音乐大前端专栏","author":"云音乐大前端团队","siteUrl":"https://musicfe.dev"}},"markdownRemark":{"id":"3afa359d-ee74-5412-a3e9-14b24b18ac47","excerpt":"图片来源：https://rustwasm.github.io/ 本文作者：刘家隆 写在前边 本文希望通过 Rust 敲一敲 WebAssembly 的大门。作为一篇入门文章，期望能够帮你了解 WebAssembly 以及构建一个简单的 WebAssembly 应用。在不考虑IE…","html":"<p><img src=\"https://p1.music.126.net/f-uNIGN1PhWAbafLyTh1uA==/109951164975440423.png\"></p>\n<blockquote>\n<p>图片来源：<a href=\"https://rustwasm.github.io/\">https://rustwasm.github.io/</a></p>\n</blockquote>\n<blockquote>\n<p>本文作者：<a href=\"https://www.onehacker.top/\">刘家隆</a></p>\n</blockquote>\n<h1>写在前边</h1>\n<p>本文希望通过 Rust 敲一敲 WebAssembly 的大门。作为一篇入门文章，期望能够帮你了解 WebAssembly 以及构建一个简单的 WebAssembly 应用。在不考虑IE的情况，目前大部分主流的浏览器已经支持 WebAssembly，尤其在移动端，主流的UC、X5内核、Safari等都已支持。读完本文，希望能够帮助你将 WebAssembly 应用在生产环境中。</p>\n<h1>WebAssembly（wasm） 简介</h1>\n<blockquote>\n<p>如果你真的了解了 WebAssembly， 可以跳过这一节。</p>\n</blockquote>\n<blockquote>\n<p>可以先看两个 wasm 比较经典的 demo：</p>\n<p><a href=\"http://webassembly.org.cn/demo/Tanks/\">http://webassembly.org.cn/demo/Tanks/</a></p>\n<p><a href=\"http://wasm.continuation-labs.com/d3demo/\">http://wasm.continuation-labs.com/d3demo/</a></p>\n</blockquote>\n<p>快速总结一下： WebAssembly（wasm） 是一个可移植、体积小、加载快并且兼容 Web 的全新格式，由 w3c 制定出的新的规范。目的是在一些场景下能够代替 JS 取得更接近原生的运算体验，比如游戏、图片/视频编辑、AR/VR。说人话，就是可以体积更小、运行更快。</p>\n<p>wasm 有两种表示格式，文本格式和二进制格式。二进制格式可以在浏览器的 js 虚拟机中沙箱化运行，也可以运行在其他非浏览器环境中，比如常见的 node 环境中等；运行在 Web 上是 wasm 一开始设计的初衷，所以实现在浏览器上的运行方法非常简单。</p>\n<p>通过一个简单的例子实现快速编译 wasm 文本，运行一个 wasm 二进制文件：</p>\n<p>wasm 文本格式代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token function\">module</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">import</span> <span class=\"token string\">\"js\"</span> <span class=\"token string\">\"import1\"</span> <span class=\"token punctuation\">(</span>func $i1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 从 js 环境中导入方法1</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">import</span> <span class=\"token string\">\"js\"</span> <span class=\"token string\">\"import2\"</span> <span class=\"token punctuation\">(</span>func $i2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 从 js 环境中导入方法2</span>\n    <span class=\"token punctuation\">(</span>func <span class=\"token function\">$main</span> <span class=\"token punctuation\">(</span>call $i1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 调用方法1</span>\n    <span class=\"token punctuation\">(</span>start $main<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">export</span> <span class=\"token string\">\"f\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>call $i2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 将自己内部的方法 f 导出，提供给 js，当 js 调用，则会执行方法2</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>上述内容看个大概即可，参阅代码中注释大致了解主要功能语法即可。主要功能就是从 js 环境中导入两个方法 <code class=\"language-text\">import1</code> 和 <code class=\"language-text\">import2</code>； 同时自身定义一个方法 <code class=\"language-text\">f</code> 并导出提供给外部调用，方法体中执行了 <code class=\"language-text\">import2</code>。</p>\n<p>文本格式本身无法在浏览器中被执行，必须编译为二进制格式。可以通过 <a href=\"https://github.com/WebAssembly/wabt\">wabt</a> 将文本格式编译为二进制，注意文本格式本身不支持注释的写法，编译的时候需要将其去除。这里使用 <a href=\"https://webassembly.github.io/wabt/demo/wat2wasm/\">wat2wasm 在线工具</a>快速编译，将编译结果下载就是运行需要的 wasm 二进制文件。</p>\n<p>有了二进制文件，剩下的就是在浏览器中进行调用执行。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 定义 importObj 对象赋给 wasm 调用</span>\n<span class=\"token keyword\">var</span> importObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>js<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token function-variable function\">import1</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello,\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 对应 wasm 的方法1</span>\n    <span class=\"token function-variable function\">import2</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world!\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 对应 wams 的方法2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// demo.wasm 文件就是刚刚下载的二进制文件</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'demo.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">arrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// wasm 的内存 buffer</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">buffer</span> <span class=\"token operator\">=></span>\n       <span class=\"token comment\">/**\n       * 实例化，返回一个实例 WASM.module 和一个 WASM.instance，\n       * module 是一个无状态的 带有 Ast.module 占位的对象；\n       * 其中instance就是将 module 和 ES 相关标准融合，可以最终在 JS 环境中调用导出的方法\n       */</span>\n    WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiate</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> importObj<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>module<span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 执行 wasm 中的方法 f</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>大概简述一下功能执行流程：</p>\n<ul>\n<li>在 js 中定义一个 <code class=\"language-text\">importObj</code> 对象，传递给 wasm 环境，提供方法 <code class=\"language-text\">import1</code> <code class=\"language-text\">import2</code> 被 wasm 引用；</li>\n<li>通过 fetch 获取二进制文件流并获取到内存 buffer；</li>\n<li>通过浏览器全局对象 WebAssembly 从内存 buffer 中进行实例化，即 <code class=\"language-text\">WebAssembly.instantiate(buffer, importObj)</code>，此时会执行 wasm 的 <code class=\"language-text\">main</code> 方法，从而会调用 <code class=\"language-text\">import1</code> ，控制台输出 hello；</li>\n<li>实例化之后返回 wasm 实例，通过此实例可以调用 wasm 内的方法，从而实现了双向连接，执行 <code class=\"language-text\">instance.exports.f()</code> 会调用 wasm 中的方法 <code class=\"language-text\">f</code>，<code class=\"language-text\">f</code> 会再调用 js 环境中的 <code class=\"language-text\">import2</code>，控制台输出 world。</li>\n</ul>\n<p>细品这段实现，是不是就可以达到 wasm 内调用 js，从而间接实现在 wasm 环境中执行浏览器相关操作呢？这个下文再展开。</p>\n<p>通过直接编写文本格式实现 wasm 显然不是我们想要的，那么有没有“说人话的”实现方式呢，目前支持比较好的主要包括 C、 C++、Rust、 Lua 等。</p>\n<h1>颇有特点的Rust</h1>\n<blockquote>\n<p>如果你了解 Rust，这一节也可以跳过了。</p>\n</blockquote>\n<blockquote>\n<p>A language empowering everyone to build reliable and efficient software. ——from <a href=\"https://www.rust-lang.org/\">rust-lang</a></p>\n</blockquote>\n<p>Rust 被评为 2019 最受欢迎的语言。</p>\n<p><img src=\"https://p1.music.126.net/TR4H-hbXEmGjA953aj1IXQ==/109951164975622911.png?imageView&#x26;thumbnail=450x0\"></p>\n<blockquote>\n<p>截图自 <a href=\"https://insights.stackoverflow.com/survey/2019#technology-_-most-loved-dreaded-and-wanted-languages\">https://insights.stackoverflow.com/survey/2019#technology-_-most-loved-dreaded-and-wanted-languages</a></p>\n</blockquote>\n<p>Rust 正式诞生于 15 年，距今仅仅不到五年的时间，但是目前已覆盖各大公司，国外有 Amazon、Google、Facebook、Dropbox 等巨头，国内有阿里巴巴、今日头条、知乎、Bilibili 等公司。那是什么让如此年轻的语言成长这么快？</p>\n<ul>\n<li>Rust 关注安全、并发与性能，为了达成这一目标，Rust 语言遵循内存安全、零成本抽象和实用性三大设计哲学</li>\n<li>借助 LLVM 实现跨平台运行。</li>\n<li>Rust 没有运行时 gc，并且大部分情况不用担心内存泄漏的问题。</li>\n<li>...</li>\n</ul>\n<p>你内心 OS 学不动了？别急，先简单领略一下 Rust 的魅力，或许你会被他迷住。</p>\n<p>下边看似很简单的问题，你能否答对？一共三行代码，语法本身没有问题，猜打印的结果是啥？</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> s1 <span class=\"token operator\">=</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello word\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义一个字符串对象</span>\n    <span class=\"token keyword\">let</span> s2 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 赋值</span>\n    <span class=\"token function\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// log输出 </span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<details>\n<summary>思考一会 点击查看答案</summary>\n报错！变量 s1 不存在了。\n</details>\n<p>这其实是 Rust 中一个比较重要的特性——所有权。当将 <code class=\"language-text\">s1</code> 赋值给 <code class=\"language-text\">s2</code> 之后，<code class=\"language-text\">s1</code> 的所有权便不存在了，可以理解为 <code class=\"language-text\">s1</code> 已经被销毁。通过这种特性，实现内存的管理被前置，代码编写过程中实现内存的控制，同时，借助静态检查，可以保证大部分编译正确的程序可以正常运行，提高内存安全之外，也提高了程序的健壮性，提高开发人员的掌控能力。</p>\n<p>所有权只是 Rust 的众多特性之一，围绕自身的三大哲学（安全、并发与性能）其有很多优秀的思想，也预示着其上手成本还是比较高的，感兴趣的可以深入了解一下。之前 Rust 成立过 CLI、网络、WASM、嵌入式四大工作组，预示着 Rust 希望发力的四大方向。截止目前已经在很多领域有比较完善的实现，例如在服务端方向有 actix-web、web 前端方向有 yew、wasm 方面有 wasm-pack 等。总之，Rust 是一门可以拓宽能力边界的非常有意思的语言，尽管入门陡峭，也建议去了解一下，或许你会深深的爱上它。</p>\n<blockquote>\n<p>除 wasm 外的其他方向（cli、server等），笔者还是喜欢 go，因为简单，^_^逃...</p>\n</blockquote>\n<p>行了，扯了这么多，Rust 为何适合 wasm：</p>\n<ul>\n<li>没有运行时 GC，不需要 JIT，可以保证性能</li>\n<li>没有垃圾回收代码，通过代码优化可以保证 wasm 的体积更小</li>\n<li>支持力度高（官方介入），目前而言相比其他语言生态完善，保证开发的低成本</li>\n</ul>\n<h1>Rust -> wasm</h1>\n<h2>Rust编译目标</h2>\n<p>rustc 本身是一个跨平台的编译器，其编译的目标有很多，具体可以通过 <code class=\"language-text\">rustup target list</code> 查看，和编译 wasm 相关的主要有三个：</p>\n<ul>\n<li>wasm32-wasi：主要是用来实现跨平台，通过 wasm 运行时实行跨平台模块通用，无特殊 web 属性</li>\n<li>wasm32-unknown-emscripten：首先需要了解 <a href=\"https://emscripten.org/index.html\">emscripten</a>，借助 LLVM 轻松支持 rust 编译。目标产物通过 emscripten 提供标准库支持，保证目标产物可以完整运行，从而实现一个独立跨平台应用。</li>\n<li>wasm32-unknown-unknown：主角出场，实现 rust 到 wasm 的纯粹编译，不需要借助庞大的 C 库，因而产物体积更加小。通过内存分配器（wee_alloc）实现堆分配，从而可以使用我们想要的多种数据结构，例如 Map，List 等。利用 wasm-bindgen、web-sys/js-sys 实现与 js、ECMAScript、Web API 的交互。该目标链目前也是处于官方维护中。</li>\n</ul>\n<blockquote>\n<p>或许有人对 wasm32-unknown-unknown 的命名感觉有些奇怪，这里大概解释一下：wasm32 代表地址宽度为 32 位，后续可能也会有 wasm64 诞生，第一个 unknow 代表可以从任何平台进行编译，第二个 unknown 表示可以适配任何平台。</p>\n</blockquote>\n<h2>wasm-pack</h2>\n<p>以上各个工具链看着复杂，官方开发支持的 <a href=\"https://rustwasm.github.io/wasm-pack/\">wasm-pack</a> 工具可以屏蔽这一切细节，基于 wasm32-unknown-unknown 工具链可快速实现 Rust -> wasm -> npm 包的编译打包，从而实现在 web 上的快速调用，窥探 wasm-npm 包这头“大象”只需要如下几步：</p>\n<ol>\n<li>使用 <a href=\"https://rustup.rs/\">rustup</a> 安装rust</li>\n<li>安装 wasm-pack</li>\n<li>wasm-pack new hello-wasm.</li>\n<li>cd hello-wasm</li>\n<li>运行 wasm-pack build.</li>\n<li>pkg 目录下产物就是可以被正常调用的 node_module 了</li>\n</ol>\n<h2>一个真实例子看一下 wasm 运行优势</h2>\n<p>路指好了，准备出发！接下来可以愉快的利用 rust 编写 wasm 了，是不是手痒了；下边通过实现一个 MD5 加密方法来对比一下 wasm 和 js 的运行速度。</p>\n<h4>首先修改 Cargo.toml，添加依赖包</h4>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">[</span>dependencies<span class=\"token punctuation\">]</span>\nwasm<span class=\"token punctuation\">-</span>bindgen = \"0.2\"\nmd5 = \"0.7.0\"</code></pre></div>\n<p><a href=\"https://crates.io/\">Cargo</a> 是 Rust 的包管理器，用于 Rust 包的发布、下载、编译等，可以按需索取你需要的包。其中 md5 就是一会要进行 md5 加密的算法包，wasm-bindgen 是帮助 wasm 和 js 进行交互的工具包，抹平实现细节，方便两个内存空间进行通讯。</p>\n<h4>编写实现（src/lib.rs）</h4>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> wasm_bindgen<span class=\"token punctuation\">::</span>prelude<span class=\"token punctuation\">::</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[wasm_bindgen]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">digest</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> String <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> digest <span class=\"token operator\">=</span> md5<span class=\"token punctuation\">::</span><span class=\"token function\">compute</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token function\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:x}\"</span><span class=\"token punctuation\">,</span> digest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>借助 wasm_bindgen 可以快速将方法导出给 js 进行调用，从而不需要关心内存通信的细节。最终通过 wasm-pack build 构建出包（在目录 pkg 下），可以直接在 web 进行引用了，产物主要包含以下几部分</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">├── <span class=\"token keyword\">package</span><span class=\"token punctuation\">.</span>json\n├── <span class=\"token constant\">README</span><span class=\"token punctuation\">.</span>md\n├── <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span>ts\n├── index_bg<span class=\"token punctuation\">.</span>wasm：生成 wasm 文件，被index<span class=\"token punctuation\">.</span>js进行调用\n├── index<span class=\"token punctuation\">.</span>js：这个就是最终被 ECMAScript 项目引用的模块文件，里边包含我们定义的方法以及一些自动生成的胶水函数，利用 TextEncoder 实现内存之间的数据通信。</code></pre></div>\n<h4>js 调用</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> wasm <span class=\"token keyword\">from</span> <span class=\"token string\">\"./pkg\"</span><span class=\"token punctuation\">;</span>\nwasm<span class=\"token punctuation\">.</span><span class=\"token function\">digest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xxx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>构建出的 wasm pkg 包引入 web 项目中，使用 webpack@4 进行打包编译，甚至不需要任何其他的插件便可支持。</p>\n<h4>速度对比</h4>\n<p>针对一个大约 22 万字符长度的字符串进行 md5 加密，粗略的速度对比：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>加密1次时间（ms）</th>\n<th>加密100次时间（ms）</th>\n<th>算法依赖包</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>js版本md5</td>\n<td>~57</td>\n<td>~1300</td>\n<td><a href=\"https://www.npmjs.com/package/md5\">https://www.npmjs.com/package/md5</a></td>\n</tr>\n<tr>\n<td>wasm版本md5</td>\n<td>~5</td>\n<td>~150</td>\n<td><a href=\"https://crates.io/crates/md5\">https://crates.io/crates/md5</a></td>\n</tr>\n</tbody>\n</table>\n<p>从数据层面来看，wasm 的性能优势显而易见。但同时也发现在 100 次的时候，性能数据差值虽然扩大，但是比值却相比一次加密缩小。原因是在多次加密的时候，js 和 wasm 的通信成本的占比逐渐增高，导致加密时间没有按比例增长，也说明 wasm 实际加密运算的时间比结果更小。这其实也表明了了 wasm 在 web 上的应用场景：重计算、轻交互，例如音视频/图像处理、游戏、加密。但在将来，这也会得到相应的改善，借助 <a href=\"https://github.com/WebAssembly/interface-types/blob/master/proposals/interface-types/Explainer.md\">interface-type</a> 可实现更高效的值传递，未来的前端框架或许会真正迎来一场变革。</p>\n<h1>利用 wasm 实现一个完整 Web 应用</h1>\n<p><img src=\"https://p1.music.126.net/_jDkFb2zvVKqMbeV0obzaQ==/109951165015160688.png?imageView&#x26;thumbnail=400x0\"></p>\n<p>借助 <code class=\"language-text\">wasm-bindgen</code>,<code class=\"language-text\">js-sys</code>和<code class=\"language-text\">web-sys</code> crates，我们甚至可以极小的依赖 js，完成一个完整的 web 应用。以下是一个本地彩色 png 图片转换为黑白图片的 web-wasm 应用。</p>\n<p>效果图：</p>\n<p><img src=\"https://p1.music.126.net/Yv_KHndz79jZt3IMECRf-w==/109951164976120814.png?imageView&#x26;thumbnail=300x0\"></p>\n<blockquote>\n<p>在线体验：<a href=\"https://yunfengsa.github.io/demos/wasm-web/index.html\">点我</a></p>\n</blockquote>\n<p>大致功能是通过 js 读取文件，利用 wasm 进行图片黑白处理，通过 wasm 直接创建 dom 并进行图片渲染。</p>\n<p><img src=\"https://p1.music.126.net/CKQpOay8y7J3BRrh_C7oGg==/109951165015194247.png?imageView&#x26;thumbnail=400x0\"></p>\n<h4>1. 利用 js 实现一个简单的文件读取：</h4>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">// html\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>files<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onchange</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fileImport();<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fileImport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>选择一张彩色的png图片<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// js</span>\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#fileImport\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#files\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">fileImport</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//获取读取我文件的 File 对象</span>\n    <span class=\"token keyword\">var</span> selectedFile <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'files'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这是核心, 读取操作就是由它完成.</span>\n    reader<span class=\"token punctuation\">.</span><span class=\"token function\">readAsArrayBuffer</span><span class=\"token punctuation\">(</span>selectedFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取文件的内容,也可以读取文件的URL</span>\n    reader<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> uint8Array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        wasm<span class=\"token punctuation\">.</span><span class=\"token function\">grayscale</span><span class=\"token punctuation\">(</span>uint8Array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里获取到的文件是一个 js 对象，最终拿到的文件信息需要借助内存传递给 wasm , 而文件对象无法直接传递给 wasm 空间。我们可以通过 FileReader 将图片文件转换为一个 8 位无符号的数组来实现数据的传递。到此，js 空间内的使命完成了，最后只需要调用 <code class=\"language-text\">wasm.grayscale</code> 方法，将数据传递给 wasm 即可。</p>\n<h4>2. wasm 获取数据并重组</h4>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function\">load_image_from_array</span><span class=\"token punctuation\">(</span>_array<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span>u8<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> DynamicImage <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> img <span class=\"token operator\">=</span> <span class=\"token keyword\">match</span> image<span class=\"token punctuation\">::</span><span class=\"token function\">load_from_memory_with_format</span><span class=\"token punctuation\">(</span>_array<span class=\"token punctuation\">,</span> ImageFormat<span class=\"token punctuation\">::</span>Png<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> img<span class=\"token punctuation\">,</span>\n        <span class=\"token function\">Err</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">panic!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> img<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[wasm_bindgen]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">grayscale</span><span class=\"token punctuation\">(</span>_array<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span>u8<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Result<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> JsValue<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> img <span class=\"token operator\">=</span> <span class=\"token function\">load_image_from_array</span><span class=\"token punctuation\">(</span>_array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    img <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span><span class=\"token function\">grayscale</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> base64_str <span class=\"token operator\">=</span> <span class=\"token function\">get_image_as_base64</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">append_img</span><span class=\"token punctuation\">(</span>base64_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>wasm 空间拿到传递过来的数组，需要重组为图片文件对象，利用现成的轮子 image crate 可以快速实现从一个无符号数组转换为一个图片对象（<code class=\"language-text\">load_image_from_array</code>），并进行图像的黑白处理（<code class=\"language-text\">img.grayscale()</code>）。处理过后的对象需要最终再返回浏览器 <code class=\"language-text\">&lt;img /&gt;</code> 标签可识别的内容信息，提供给前端进行预览，这里选择 base64 字符串。</p>\n<h4>3. wasm 内生成 base64 图片格式</h4>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function\">get_image_as_base64</span><span class=\"token punctuation\">(</span>_img<span class=\"token punctuation\">:</span> DynamicImage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> String <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 创建一个内存空间</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> c <span class=\"token operator\">=</span> Cursor<span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>Vec<span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">match</span> _img<span class=\"token punctuation\">.</span><span class=\"token function\">write_to</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> c<span class=\"token punctuation\">,</span> ImageFormat<span class=\"token punctuation\">::</span>Png<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> c<span class=\"token punctuation\">,</span>\n        <span class=\"token function\">Err</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">panic!</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"There was a problem writing the resulting buffer: {:?}\"</span><span class=\"token punctuation\">,</span>\n                error\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">seek</span><span class=\"token punctuation\">(</span>SeekFrom<span class=\"token punctuation\">::</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> out <span class=\"token operator\">=</span> Vec<span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 从内存读取数据</span>\n    c<span class=\"token punctuation\">.</span><span class=\"token function\">read_to_end</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 解码</span>\n    <span class=\"token keyword\">let</span> stt <span class=\"token operator\">=</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> together <span class=\"token operator\">=</span> <span class=\"token function\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}{}\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"data:image/png;base64,\"</span><span class=\"token punctuation\">,</span> stt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> together<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在 wasm 空间内将 DynamicImage 对象再转换为一个基础值，从而再次实现值得传递；借助 Rust Cursor，对 DynamicImage 对象信息进行读写，Rust Cursor 有点类似前端的  Reader/Writer，通过一个缓存区实现信息读写，从而拿到内存空间内的图片存储信息，获得的信息经过 base64 解码即可拿到原始字符串信息，拿到的字符串拼接格式信息 <code class=\"language-text\">data:image/png;base64</code> 组成完整的图片资源字符创，便可以直接返回给前端进行预览渲染了。</p>\n<p>以上已经完成了图片处理的所有流程了，获取到的 base64 可以直接交还给 js 进行创建 dom 预览了。但是！我有没有可能不使用 js 进行操作，在 wasm 内直接完成这步操作呢？</p>\n<h4>4. wasm 内创建 dom 并渲染图片</h4>\n<p>wasm 本身并不能直接操作 dom，必须经过 js 完成 dom 的操作。但是依然可以实现在 wasm 内载入 js 模块间接操作 dom。<a href=\"https://crates.io/crates/web-sys\">web_sys</a> 便实现了这步操作，并基本完成所有的接口实现，借助 web_sys 甚至可以很方便的实现一个纯 wasm 的前端框架，比如 yew。</p>\n<p><img src=\"https://p1.music.126.net/aX0h3uTiJP-FkxLDIz4zjg==/109951165097855840.png\"></p>\n<blockquote>\n<p>图片引自：<a href=\"https://hacks.mozilla.org/2017/02/where-is-webassembly-now-and-whats-next/\">https://hacks.mozilla.org/2017/02/where-is-webassembly-now-and-whats-next/</a></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">append_img</span><span class=\"token punctuation\">(</span>image_src<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Result<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> JsValue<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> window <span class=\"token operator\">=</span> web_sys<span class=\"token punctuation\">::</span><span class=\"token function\">window</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no global `window` exists\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> document <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">document</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should have a document on window\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> body <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"document should have a body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> val <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">create_element</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"img\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n    val<span class=\"token punctuation\">.</span><span class=\"token function\">set_attribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>image_src<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n    val<span class=\"token punctuation\">.</span><span class=\"token function\">set_attribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"style\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"height: 200px\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n    body<span class=\"token punctuation\">.</span><span class=\"token function\">append_child</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>val<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>操作的流程和直接使用 js 操作 dom 基本一致，其实也都是间接调用了 js 端方法。在实际应用中，还是要尽量避免多次的通信带来额外的性能损耗。</p>\n<blockquote>\n<p>一个简单的图片黑白处理应用完成了，完整的代码：<a href=\"https://github.com/yunfengsa/rust-wasm\">点我</a>。其他的功能可以按照类似的方式进行拓展，比如压缩、裁剪等。</p>\n</blockquote>\n<h1>写在最后</h1>\n<p>本文简述了从 Rust 到 wasm，再到 web based wasm 的流程。希望读完本文，能够帮你在实际业务开发中开拓解决问题的思路，探索出更多更实用的场景。由于作者水平有限，欢迎批评指正。</p>\n<h4>资料参考</h4>\n<p><a href=\"https://rustwasm.github.io/\">https://rustwasm.github.io/</a></p>\n<p><a href=\"https://rustwasm.github.io/wasm-pack/\">https://rustwasm.github.io/wasm-pack/</a></p>\n<p><a href=\"https://github.com/WebAssembly/interface-types/blob/master/proposals/interface-types/Explainer.md\">https://github.com/WebAssembly/interface-types/blob/master/proposals/interface-types/Explainer.md</a></p>\n<p><a href=\"https://yew.rs/docs/v/zh_cn/\">https://yew.rs/docs/v/zh_cn/</a></p>\n<p><a href=\"https://hacks.mozilla.org/2017/02/where-is-webassembly-now-and-whats-next/\">https://hacks.mozilla.org/2017/02/where-is-webassembly-now-and-whats-next/</a></p>\n<blockquote>\n<p>本文发布自 <a href=\"https://github.com/x-orpheus\">网易云音乐前端团队</a>，可自由转载，转载请在标题标明转载并在显著位置保留出处。我们一直在招人，如果你恰好准备换工作，又恰好喜欢云音乐，那就 <a href=\"mailto:grp.music-fe@corp.netease.com\">加入我们</a>！</p>\n</blockquote>","frontmatter":{"title":"实现一个简单的基于 WebAssembly 的图片处理应用","date":"2020-07-01","description":"本文希望通过 Rust 敲一敲 WebAssembly 的大门。作为一篇入门文章，期望能够帮你了解 WebAssembly 以及构建一个简单的 WebAssembly 应用。在不考虑IE的情况，目前大部分主流的浏览器已经支持 WebAssembly，尤其在移动端，主流的UC、X5内核、Safari等都已支持。读完本文，希望能够帮助你将 WebAssembly 应用在生产环境中。"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/wasm-rust/","previous":{"fields":{"slug":"/ios-web-debug/"},"frontmatter":{"title":"构建基于 iOS 模拟器的前端调试方案"}},"next":{"fields":{"slug":"/react-native-refresh/"},"frontmatter":{"title":"React Native 实现自定义下拉刷新组件"}}}}}