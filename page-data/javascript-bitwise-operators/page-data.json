{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript-bitwise-operators/","webpackCompilationHash":"3237468b0c27b1c362d5","result":{"data":{"site":{"siteMetadata":{"title":"云音乐大前端专栏","author":"云音乐大前端团队","siteUrl":"https://musicfe.dev"}},"markdownRemark":{"id":"98b1a1b4-901f-5721-83f0-276e1181c5dd","excerpt":"1. 内容概要 本文主要讨论以下两个问题： JavaScript 的位运算：先简单回顾下位运算，平时用的少，相信不少人和我一样忘的差不多了 权限设计：根据位运算的特点，设计一个权限系统（添加、删除、判断等） 2. JavaScript 位运算 2.1. Number 在讲位运算之前，首先简单看下 JavaScript…","html":"<p><img src=\"https://p1.music.126.net/MGHz7beTyqKahbquqgsxPw==/109951164471970249.png\"></p>\n<h2>1. 内容概要</h2>\n<p>本文主要讨论以下两个问题：</p>\n<ul>\n<li>JavaScript 的位运算：先简单回顾下位运算，平时用的少，相信不少人和我一样忘的差不多了</li>\n<li>权限设计：根据位运算的特点，设计一个权限系统（添加、删除、判断等）</li>\n</ul>\n<h2>2. JavaScript 位运算</h2>\n<h3>2.1. Number</h3>\n<p>在讲位运算之前，首先简单看下 JavaScript 中的 Number，下文需要用到。</p>\n<p>在 JavaScript 里，数字均为<a href=\"https://zh.wikipedia.org/wiki/%E9%9B%99%E7%B2%BE%E5%BA%A6%E6%B5%AE%E9%BB%9E%E6%95%B8\">基于 IEEE 754 标准的双精度 64 位的浮点数</a>，引用维基百科的图片，它的结构长这样：</p>\n<p><img src=\"https://p1.music.126.net/LXTO8xpe5ZbQkg2e8DGK9A==/109951164427153381.png\"></p>\n<ul>\n<li>sign bit（符号）: 用来表示正负号</li>\n<li>exponent（指数）: 用来表示次方数</li>\n<li>mantissa（尾数）: 用来表示精确度</li>\n</ul>\n<p>也就是说一个数字的范围只能在 -(2^53 -1) 至 2^53 -1 之间。</p>\n<blockquote>\n<p>既然讲到这里，就多说一句：0.1 + 0.2 算不准的原因也在于此。浮点数用二进制表达时是无穷的，且最多 53 位，必须截断，进而产生误差。最简单的解决办法就是放大一定倍数变成整数，计算完成后再缩小。不过更稳妥的办法是使用下文将会提到的 <a href=\"https://mathjs.org/docs/datatypes/bignumbers.html#roundoff-errors\">math.js</a> 等工具库。</p>\n</blockquote>\n<p>此外还有四种数字进制：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 十进制</span>\n<span class=\"token number\">123456789</span>\n<span class=\"token number\">0</span>\n\n<span class=\"token comment\">// 二进制：前缀 0b，0B</span>\n<span class=\"token number\">0b10000000000000000000000000000000</span> <span class=\"token comment\">// 2147483648</span>\n<span class=\"token number\">0b01111111100000000000000000000000</span> <span class=\"token comment\">// 2139095040</span>\n<span class=\"token number\">0B00000000011111111111111111111111</span> <span class=\"token comment\">// 8388607</span>\n\n<span class=\"token comment\">// 八进制：前缀 0o，0O（以前支持前缀 0）</span>\n<span class=\"token number\">0o755</span> <span class=\"token comment\">// 493</span>\n<span class=\"token number\">0o644</span> <span class=\"token comment\">// 420</span>\n\n<span class=\"token comment\">// 十六进制：前缀 0x，0X</span>\n<span class=\"token number\">0xFFFFFFFFFFFFFFFFF</span> <span class=\"token comment\">// 295147905179352830000</span>\n<span class=\"token number\">0x123456789ABCDEF</span>   <span class=\"token comment\">// 81985529216486900</span>\n<span class=\"token number\">0XA</span>                 <span class=\"token comment\">// 10</span></code></pre></div>\n<p>好了，Number 就说这么多，接下来看 JavaScript 中的位运算。</p>\n<h3>2.2. 位运算</h3>\n<p>按位操作符将其操作数当作 32 位的比特序列（由 0 和 1 组成）操作，返回值依然是标准的 JavaScript 数值。JavaScript 中的按位操作符有：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">用法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">按位与（AND）</td>\n<td align=\"left\"><code class=\"language-text\">a &amp; b</code></td>\n<td align=\"left\">对于每一个比特位，只有两个操作数相应的比特位都是 1 时，结果才为 1，否则为 0。</td>\n</tr>\n<tr>\n<td align=\"left\">按位或（OR）</td>\n<td align=\"left\"><code class=\"language-text\">a \\| b</code></td>\n<td align=\"left\">对于每一个比特位，当两个操作数相应的比特位至少有一个 1 时，结果为 1，否则为 0。</td>\n</tr>\n<tr>\n<td align=\"left\">按位异或（XOR）</td>\n<td align=\"left\"><code class=\"language-text\">a ^ b</code></td>\n<td align=\"left\">对于每一个比特位，当两个操作数相应的比特位有且只有一个 1 时，结果为 1，否则为 0。</td>\n</tr>\n<tr>\n<td align=\"left\">按位非（NOT）</td>\n<td align=\"left\"><code class=\"language-text\">~a</code></td>\n<td align=\"left\">反转操作数的比特位，即 0 变成 1，1 变成 0。</td>\n</tr>\n<tr>\n<td align=\"left\">左移（Left shift）</td>\n<td align=\"left\"><code class=\"language-text\">a &lt;&lt; b</code></td>\n<td align=\"left\">将 a 的二进制形式向左移 b (&#x3C; 32) 比特位，右边用 0 填充。</td>\n</tr>\n<tr>\n<td align=\"left\">有符号右移</td>\n<td align=\"left\"><code class=\"language-text\">a &gt;&gt; b</code></td>\n<td align=\"left\">将 a 的二进制表示向右移 b (&#x3C; 32) 位，丢弃被移出的位。</td>\n</tr>\n<tr>\n<td align=\"left\">无符号右移</td>\n<td align=\"left\"><code class=\"language-text\">a &gt;&gt;&gt; b</code></td>\n<td align=\"left\">将 a 的二进制表示向右移 b (&#x3C; 32) 位，丢弃被移出的位，并使用 0 在左侧填充。</td>\n</tr>\n</tbody>\n</table>\n<p>下面举几个例子，主要看下 <code class=\"language-text\">AND</code> 和 <code class=\"language-text\">OR</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># 例子1</span>\n    A <span class=\"token operator\">=</span> <span class=\"token number\">10001001</span>\n    B <span class=\"token operator\">=</span> <span class=\"token number\">10010000</span>\nA <span class=\"token operator\">|</span> B <span class=\"token operator\">=</span> <span class=\"token number\">10011001</span>\n\n<span class=\"token comment\"># 例子2</span>\n    A <span class=\"token operator\">=</span> <span class=\"token number\">10001001</span>\n    C <span class=\"token operator\">=</span> <span class=\"token number\">10001000</span>\nA <span class=\"token operator\">|</span> C <span class=\"token operator\">=</span> <span class=\"token number\">10001001</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># 例子1</span>\n    A <span class=\"token operator\">=</span> <span class=\"token number\">10001001</span>\n    B <span class=\"token operator\">=</span> <span class=\"token number\">10010000</span>\nA <span class=\"token operator\">&amp;</span> B <span class=\"token operator\">=</span> <span class=\"token number\">10000000</span>\n\n<span class=\"token comment\"># 例子2</span>\n    A <span class=\"token operator\">=</span> <span class=\"token number\">10001001</span>\n    C <span class=\"token operator\">=</span> <span class=\"token number\">10001000</span>\nA <span class=\"token operator\">&amp;</span> C <span class=\"token operator\">=</span> <span class=\"token number\">10001000</span></code></pre></div>\n<h2>3. 位运算在权限系统中的使用</h2>\n<p>传统的权限系统里，存在很多关联关系，如用户和权限的关联，用户和角色的关联。系统越大，关联关系越多，越难以维护。而引入位运算，可以巧妙的解决该问题。</p>\n<p>在讲“位运算在权限系统中的使用”之前，我们先假定两个前提，<strong>下文所有的讨论都是基于这两个前提的</strong>：</p>\n<ol>\n<li>每种权限码都是唯一的（这是显然的）</li>\n<li>所有权限码的二进制数形式，有且只有一位值为 1，其余全部为 0（<code class=\"language-text\">2^n</code>）</li>\n</ol>\n<p>如果用户权限和权限码，全部使用二级制数字表示，再结合上面 <code class=\"language-text\">AND</code> 和 <code class=\"language-text\">OR</code> 的例子，分析位运算的特点，不难发现：</p>\n<ul>\n<li><code class=\"language-text\">|</code> 可以用来赋予权限</li>\n<li><code class=\"language-text\">&amp;</code> 可以用来校验权限</li>\n</ul>\n<p>为了讲的更明白，这里用 Linux 中的实例分析下，Linux 的文件权限分为读、写和执行，有字母和数字等多种表现形式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">权限</th>\n<th align=\"left\">字母表示</th>\n<th align=\"left\">数字表示</th>\n<th align=\"left\">二进制</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">读</td>\n<td align=\"left\">r</td>\n<td align=\"left\">4</td>\n<td align=\"left\">0b100</td>\n</tr>\n<tr>\n<td align=\"left\">写</td>\n<td align=\"left\">w</td>\n<td align=\"left\">2</td>\n<td align=\"left\">0b010</td>\n</tr>\n<tr>\n<td align=\"left\">执行</td>\n<td align=\"left\">x</td>\n<td align=\"left\">1</td>\n<td align=\"left\">0b001</td>\n</tr>\n</tbody>\n</table>\n<p>可以看到，权限用 1、2、4（也就是 <code class=\"language-text\">2^n</code>）表示，转换为二进制后，都是只有一位是 1，其余为 0。我们通过几个例子看下，如何利用二进制的特点执行权限的添加，校验和删除。</p>\n<h3>3.1. 添加权限</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0b100</span>\n<span class=\"token keyword\">let</span> w <span class=\"token operator\">=</span> <span class=\"token number\">0b010</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0b001</span>\n\n<span class=\"token comment\">// 给用户赋全部权限（使用前面讲的 | 操作）</span>\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> r <span class=\"token operator\">|</span> w <span class=\"token operator\">|</span> x\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 7</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 111</span>\n\n<span class=\"token comment\">//     r = 0b100</span>\n<span class=\"token comment\">//     w = 0b010</span>\n<span class=\"token comment\">//     r = 0b001</span>\n<span class=\"token comment\">// r|w|x = 0b111</span></code></pre></div>\n<p>可以看到，执行 <code class=\"language-text\">r | w | x</code> 后，<code class=\"language-text\">user</code> 的三位都是 1，表明拥有了全部三个权限。</p>\n<blockquote>\n<p>Linux 下出现权限问题时，最粗暴的解决方案就是 <code class=\"language-text\">chmod 777 xxx</code>，这里的 <code class=\"language-text\">7</code> 就代表了：可读，可写，可执行。而三个 <code class=\"language-text\">7</code> 分别代表：文件所有者，文件所有者所在组，所有其他用户。</p>\n</blockquote>\n<h3>3.2. 校验权限</h3>\n<p>刚才演示了权限的添加，下面演示权限校验：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0b100</span>\n<span class=\"token keyword\">let</span> w <span class=\"token operator\">=</span> <span class=\"token number\">0b010</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0b001</span>\n\n<span class=\"token comment\">// 给用户赋 r w 两个权限</span>\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> r <span class=\"token operator\">|</span> w\n<span class=\"token comment\">// user = 6</span>\n<span class=\"token comment\">// user = 0b110 (二进制)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> r<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true  有 r 权限</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;</span> w<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> w<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true  有 w 权限</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false 没有 x 权限</span></code></pre></div>\n<p>如前所料，通过 <code class=\"language-text\">用户权限 &amp; 权限 code === 权限 code</code> 就可以判断出用户是否拥有该权限。</p>\n<h3>3.3. 删除权限</h3>\n<p>我们讲了用 <code class=\"language-text\">|</code> 赋予权限，使用 <code class=\"language-text\">&amp;</code> 判断权限，那么删除权限呢？删除权限的本质其实是<strong>将指定位置上的 1 重置为 0</strong>。上个例子里用户权限是 <code class=\"language-text\">0b110</code>，拥有读和写两个权限，现在想删除读的权限，本质上就是将第三位的 1 重置为 0，变为 <code class=\"language-text\">0b010</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0b100</span>\n<span class=\"token keyword\">let</span> w <span class=\"token operator\">=</span> <span class=\"token number\">0b010</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0b001</span>\n\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token number\">0b010</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> r<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false 没有 r 权限</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;</span> w<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> w<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true  有 w 权限</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false 没有 x 权限</span></code></pre></div>\n<p>那么具体怎么操作呢？其实有两种方案，最简单的就是异或 <code class=\"language-text\">^</code>，按照上文的介绍“当两个操作数相应的比特位有且只有一个 1 时，结果为 1，否则为 0”，所以异或其实是 toggle 操作，无则增，有则减：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> r    <span class=\"token operator\">=</span> <span class=\"token number\">0b100</span>\n<span class=\"token keyword\">let</span> w    <span class=\"token operator\">=</span> <span class=\"token number\">0b010</span>\n<span class=\"token keyword\">let</span> x    <span class=\"token operator\">=</span> <span class=\"token number\">0b001</span>\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token number\">0b110</span> <span class=\"token comment\">// 有 r w 两个权限</span>\n\n<span class=\"token comment\">// 执行异或操作，删除 r 权限</span>\nuser <span class=\"token operator\">=</span> user <span class=\"token operator\">^</span> r\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> r<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false 没有 r 权限</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;</span> w<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> w<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true  有 w 权限</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false 没有 x 权限</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 现在 user 是 0b010</span>\n\n<span class=\"token comment\">// 再执行一次异或操作</span>\nuser <span class=\"token operator\">=</span> user <span class=\"token operator\">^</span> r\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> r<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true  有 r 权限</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;</span> w<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> w<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true  有 w 权限</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false 没有 x 权限</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 现在 user 又变回 0b110</span></code></pre></div>\n<p>那么如果单纯的想删除权限（而不是无则增，有则减）怎么办呢？答案是执行 <code class=\"language-text\">&amp;(~code)</code>，先取反，再执行与操作：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> r    <span class=\"token operator\">=</span> <span class=\"token number\">0b100</span>\n<span class=\"token keyword\">let</span> w    <span class=\"token operator\">=</span> <span class=\"token number\">0b010</span>\n<span class=\"token keyword\">let</span> x    <span class=\"token operator\">=</span> <span class=\"token number\">0b001</span>\n<span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token number\">0b110</span> <span class=\"token comment\">// 有 r w 两个权限</span>\n\n<span class=\"token comment\">// 删除 r 权限</span>\nuser <span class=\"token operator\">=</span> user <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>r<span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> r<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false 没有 r 权限</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;</span> w<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> w<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true  有 w 权限</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false 没有 x 权限</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 现在 user 是 0b010</span>\n\n<span class=\"token comment\">// 再执行一次</span>\nuser <span class=\"token operator\">=</span> user <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>r<span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> r<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false 没有 r 权限</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;</span> w<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> w<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true  有 w 权限</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false 没有 x 权限</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 现在 user 还是 0b010，并不会新增</span></code></pre></div>\n<h2>4. 局限性和解决办法</h2>\n<p>前面我们回顾了 JavaScript 中的 Number 和位运算，并且了解了基于位运算的权限系统原理和 Linux 文件系统权限的实例。</p>\n<p>上述的所有都有前提条件：1、<strong>每种权限码都是唯一的</strong>；2、<strong>每个权限码的二进制数形式，有且只有一位值为 1（<code class=\"language-text\">2^n</code>）</strong>。也就是说，权限码只能是 1, 2, 4, 8,...,1024,...而上文提到，一个数字的范围只能在 -(2^53 -1) 和 2^53 -1 之间，JavaScript 的按位操作符又是将其操作数当作 <strong>32 位</strong>比特序列的。那么同一个应用下可用的权限数就非常有限了。这也是该方案的局限性。</p>\n<p>为了突破这个限制，这里提出一个叫“权限空间”的概念，既然权限数有限，那么不妨就多开辟几个空间来存放。</p>\n<p>基于权限空间，我们定义两个格式：</p>\n<ol>\n<li><strong>权限 code</strong>，字符串，形如 <code class=\"language-text\">index,pos</code>。其中 <code class=\"language-text\">pos</code> 表示 32 位二进制数中 1 的位置（其余全是 0）； <code class=\"language-text\">index</code> 表示<strong>权限空间</strong>，用于突破 JavaScript 数字位数的限制，是从 0 开始的正整数，每个权限code都要归属于一个权限空间。<code class=\"language-text\">index</code> 和 <code class=\"language-text\">pos</code> 使用英文逗号隔开。</li>\n<li><strong>用户权限</strong>，字符串，形如 <code class=\"language-text\">1,16,16</code>。英文逗号分隔每一个<strong>权限空间</strong>的权限值。例如 <code class=\"language-text\">1,16,16</code> 的意思就是，权限空间 0 的权限值是 1，权限空间 1 的权限值是 16，权限空间 2 的权限是 16。</li>\n</ol>\n<p>干说可能不好懂，直接上代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 用户的权限 code</span>\n<span class=\"token keyword\">let</span> userCode <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n\n<span class=\"token comment\">// 假设系统里有这些权限</span>\n<span class=\"token comment\">// 纯模拟，正常情况下是按顺序的，如 0,0 0,1 0,2 ...，尽可能占满一个权限空间，再使用下一个</span>\n<span class=\"token keyword\">const</span> permissions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">SYS_SETTING</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token string\">\"0,0\"</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// index = 0, pos = 0</span>\n    info<span class=\"token punctuation\">:</span> <span class=\"token string\">\"系统权限\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">DATA_ADMIN</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token string\">\"0,8\"</span><span class=\"token punctuation\">,</span>\n    info<span class=\"token punctuation\">:</span> <span class=\"token string\">\"数据库权限\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">USER_ADD</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token string\">\"0,22\"</span><span class=\"token punctuation\">,</span>\n    info<span class=\"token punctuation\">:</span> <span class=\"token string\">\"用户新增权限\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">USER_EDIT</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token string\">\"0,30\"</span><span class=\"token punctuation\">,</span>\n    info<span class=\"token punctuation\">:</span> <span class=\"token string\">\"用户编辑权限\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">USER_VIEW</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token string\">\"1,2\"</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// index = 1, pos = 2</span>\n    info<span class=\"token punctuation\">:</span> <span class=\"token string\">\"用户查看权限\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">USER_DELETE</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token string\">\"1,17\"</span><span class=\"token punctuation\">,</span>\n    info<span class=\"token punctuation\">:</span> <span class=\"token string\">\"用户删除权限\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">POST_ADD</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token string\">\"1,28\"</span><span class=\"token punctuation\">,</span>\n    info<span class=\"token punctuation\">:</span> <span class=\"token string\">\"文章新增权限\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">POST_EDIT</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token string\">\"2,4\"</span><span class=\"token punctuation\">,</span>\n    info<span class=\"token punctuation\">:</span> <span class=\"token string\">\"文章编辑权限\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">POST_VIEW</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token string\">\"2,19\"</span><span class=\"token punctuation\">,</span>\n    info<span class=\"token punctuation\">:</span> <span class=\"token string\">\"文章查看权限\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">POST_DELETE</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token string\">\"2,26\"</span><span class=\"token punctuation\">,</span>\n    info<span class=\"token punctuation\">:</span> <span class=\"token string\">\"文章删除权限\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 添加权限</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addPermission</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">userCode<span class=\"token punctuation\">,</span> permission</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> userPermission <span class=\"token operator\">=</span> userCode <span class=\"token operator\">?</span> userCode<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> permission<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span>\n\n  userPermission<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>userPermission<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> userPermission<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 删除权限</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">delPermission</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">userCode<span class=\"token punctuation\">,</span> permission</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> userPermission <span class=\"token operator\">=</span> userCode <span class=\"token operator\">?</span> userCode<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> permission<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span>\n\n  userPermission<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>userPermission<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> userPermission<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 判断是否有权限</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">hasPermission</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">userCode<span class=\"token punctuation\">,</span> permission</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> userPermission <span class=\"token operator\">=</span> userCode <span class=\"token operator\">?</span> userCode<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> permission<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> permissionValue <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>userPermission<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> permissionValue<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> permissionValue\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 列出用户拥有的全部权限</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">listPermission</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">userCode</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>userCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> results\n  <span class=\"token punctuation\">}</span>\n\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>permissions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">permission</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hasPermission</span><span class=\"token punctuation\">(</span>userCode<span class=\"token punctuation\">,</span> permission<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      results<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>permission<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> results\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">log</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">userCode: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>userCode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">权限列表: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">listPermission</span><span class=\"token punctuation\">(</span>userCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"; \"</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nuserCode <span class=\"token operator\">=</span> <span class=\"token function\">addPermission</span><span class=\"token punctuation\">(</span>userCode<span class=\"token punctuation\">,</span> permissions<span class=\"token punctuation\">.</span><span class=\"token constant\">SYS_SETTING</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// userCode: \"1\"</span>\n<span class=\"token comment\">// 权限列表: 系统权限</span>\n\nuserCode <span class=\"token operator\">=</span> <span class=\"token function\">addPermission</span><span class=\"token punctuation\">(</span>userCode<span class=\"token punctuation\">,</span> permissions<span class=\"token punctuation\">.</span><span class=\"token constant\">POST_EDIT</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// userCode: \"1,,16\"</span>\n<span class=\"token comment\">// 权限列表: 系统权限; 文章编辑权限</span>\n\nuserCode <span class=\"token operator\">=</span> <span class=\"token function\">addPermission</span><span class=\"token punctuation\">(</span>userCode<span class=\"token punctuation\">,</span> permissions<span class=\"token punctuation\">.</span><span class=\"token constant\">USER_EDIT</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// userCode: \"1073741825,,16\"</span>\n<span class=\"token comment\">// 权限列表: 系统权限; 用户编辑权限; 文章编辑权限</span>\n\nuserCode <span class=\"token operator\">=</span> <span class=\"token function\">addPermission</span><span class=\"token punctuation\">(</span>userCode<span class=\"token punctuation\">,</span> permissions<span class=\"token punctuation\">.</span><span class=\"token constant\">USER_DELETE</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// userCode: \"1073741825,131072,16\"</span>\n<span class=\"token comment\">// 权限列表: 系统权限; 用户编辑权限; 用户删除权限; 文章编辑权限</span>\n\nuserCode <span class=\"token operator\">=</span> <span class=\"token function\">delPermission</span><span class=\"token punctuation\">(</span>userCode<span class=\"token punctuation\">,</span> permissions<span class=\"token punctuation\">.</span><span class=\"token constant\">USER_EDIT</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// userCode: \"1,131072,16\"</span>\n<span class=\"token comment\">// 权限列表: 系统权限; 用户删除权限; 文章编辑权限</span>\n\nuserCode <span class=\"token operator\">=</span> <span class=\"token function\">delPermission</span><span class=\"token punctuation\">(</span>userCode<span class=\"token punctuation\">,</span> permissions<span class=\"token punctuation\">.</span><span class=\"token constant\">USER_EDIT</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// userCode: \"1,131072,16\"</span>\n<span class=\"token comment\">// 权限列表: 系统权限; 用户删除权限; 文章编辑权限</span>\n\nuserCode <span class=\"token operator\">=</span> <span class=\"token function\">delPermission</span><span class=\"token punctuation\">(</span>userCode<span class=\"token punctuation\">,</span> permissions<span class=\"token punctuation\">.</span><span class=\"token constant\">USER_DELETE</span><span class=\"token punctuation\">)</span>\nuserCode <span class=\"token operator\">=</span> <span class=\"token function\">delPermission</span><span class=\"token punctuation\">(</span>userCode<span class=\"token punctuation\">,</span> permissions<span class=\"token punctuation\">.</span><span class=\"token constant\">SYS_SETTING</span><span class=\"token punctuation\">)</span>\nuserCode <span class=\"token operator\">=</span> <span class=\"token function\">delPermission</span><span class=\"token punctuation\">(</span>userCode<span class=\"token punctuation\">,</span> permissions<span class=\"token punctuation\">.</span><span class=\"token constant\">POST_EDIT</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// userCode: \"0,0,0\"</span>\n<span class=\"token comment\">// 权限列表: </span>\n\nuserCode <span class=\"token operator\">=</span> <span class=\"token function\">addPermission</span><span class=\"token punctuation\">(</span>userCode<span class=\"token punctuation\">,</span> permissions<span class=\"token punctuation\">.</span><span class=\"token constant\">SYS_SETTING</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// userCode: \"1,0,0\"</span>\n<span class=\"token comment\">// 权限列表: 系统权限</span></code></pre></div>\n<p>除了通过引入<strong>权限空间</strong>的概念突破二进制运算的位数限制，还可以使用 <a href=\"http://mathjs.org\">math.js</a> 的 <code class=\"language-text\">bignumber</code>，直接运算超过 32 位的二进制数，具体可以看它的文档，这里就不细说了。</p>\n<h2>5. 适用场景和问题</h2>\n<p>如果按照当前使用最广泛的 <a href=\"https://zh.wikipedia.org/wiki/%E4%BB%A5%E8%A7%92%E8%89%B2%E7%82%BA%E5%9F%BA%E7%A4%8E%E7%9A%84%E5%AD%98%E5%8F%96%E6%8E%A7%E5%88%B6\">RBAC</a> 模型设计权限系统，那么一般会有这么几个实体：应用，权限，角色，用户。用户权限可以直接来自权限，也可以来自角色：</p>\n<ul>\n<li>一个应用下有多个权限</li>\n<li>权限和角色是多对多的关系</li>\n<li>用户和角色是多对多的关系</li>\n<li>用户和权限是多对多的关系</li>\n</ul>\n<p>在此种模型下，一般会有用户与权限，用户与角色，角色与权限的对应关系表。想象一个商城后台权限管理系统，可能会有上万，甚至十几万店铺（应用），每个店铺可能会有数十个用户，角色，权限。随着业务的不断发展，刚才提到的那三张对应关系表会越来越大，越来越难以维护。</p>\n<p>而进制转换的方法则可以省略对应关系表，减少查询，节省空间。当然，省略掉对应关系不是没有坏处的，例如下面几个问题：</p>\n<ul>\n<li>如何高效的查找我的权限？</li>\n<li>如何高效的查找拥有某权限的所有用户？</li>\n<li>如何控制权限的有效期？</li>\n</ul>\n<p>所以进制转换的方案比较适合刚才提到的应用极其多，而每个应用中用户，权限，角色数量较少的场景。</p>\n<h2>6. 其他方案</h2>\n<p>除了二进制方案，当然还有其他方案可以达到类似的效果，例如直接使用一个1和0组成的字符串，权限点对应index，1表示拥有权限，0表示没有权限。举个例子：添加 0、删除 1、编辑 2，用户A拥有添加和编辑的权限，则 userCode 为 101；用户B拥有全部权限，userCode 为 111。这种方案比二进制转换简单，但是浪费空间。</p>\n<p>还有利用质数的方案，权限点全部为质数，用户权限为他所拥有的全部权限点的乘积。如：权限点是 2、3、5、7、11，用户权限是 5 * 7 * 11 = 385。这种方案麻烦的地方在于获取质数（新增权限点）和质因数分解（判断权限），权限点特别多的时候就快成 RSA 了，如果只有增删改查个别几个权限，倒是可以考虑。</p>\n<h2>7. 参考</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Numbers_and_dates\">MDN：JavaScript 数字和日期</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E9%9B%99%E7%B2%BE%E5%BA%A6%E6%B5%AE%E9%BB%9E%E6%95%B8\">双精度浮点类型</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\">MDN：按位操作符</a></li>\n<li><a href=\"https://www.jianshu.com/p/11f331d97ec2\">【小知识大道理】被忽视的位运算</a></li>\n<li><a href=\"http://jerryzou.com/posts/do-you-really-want-use-bit-operators-in-JavaScript/\">为什么不要在 JavaScript 中使用位操作符？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/MKljuxfDMmopr_MrnYljGw\">角色权限设计的100种解法</a></li>\n<li><a href=\"http://www.cnblogs.com/shijiaqi1066/p/3793894.html\">权限系统与RBAC模型概述</a></li>\n<li><a href=\"https://blog.csdn.net/yingchunhua365/article/details/14090461\">权限设计及算法</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E4%BB%A5%E8%A7%92%E8%89%B2%E7%82%BA%E5%9F%BA%E7%A4%8E%E7%9A%84%E5%AD%98%E5%8F%96%E6%8E%A7%E5%88%B6\">基于角色的访问控制</a></li>\n</ul>\n<blockquote>\n<p>本文发布自 <a href=\"https://github.com/x-orpheus\">网易云音乐前端团队</a>，文章未经授权禁止任何形式的转载。我们一直在招人，如果你恰好准备换工作，又恰好喜欢云音乐，那就 <a href=\"mailto:grp.music-fe@corp.netease.com\">加入我们</a>！</p>\n</blockquote>","frontmatter":{"title":"JavaScript 中的位运算和权限设计","date":"2019-11-07","description":"先简单回顾下位运算，平时用的少，相信不少人和我一样忘的差不多了，根据位运算的特点，设计一个权限系统（添加、删除、判断等）"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/javascript-bitwise-operators/","previous":{"fields":{"slug":"/json-parser/"},"frontmatter":{"title":"从零实现自定义 JSON Parser"}},"next":{"fields":{"slug":"/lighthouse/"},"frontmatter":{"title":"Lighthouse 测试内幕"}}}}}