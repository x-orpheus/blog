{"componentChunkName":"component---src-templates-blog-post-js","path":"/canvas-snapshot/","webpackCompilationHash":"6094ab385e61cbba192a","result":{"data":{"site":{"siteMetadata":{"title":"云音乐大前端专栏","author":"云音乐大前端团队","siteUrl":"https://musicfe.dev"}},"markdownRemark":{"id":"bd9ef100-7698-571d-af40-1f6d45a0a226","excerpt":"banner 本文作者：ggvswild…","html":"<p><img src=\"https://p1.music.126.net/yP4u5fw3JlrWsJdZ9VzWRw==/109951164524302284.png\" alt=\"banner\"></p>\n<blockquote>\n<p>本文作者：ggvswild</p>\n</blockquote>\n<h2>1. 背景</h2>\n<p>将网页保存为图片（以下简称为快照），是用户记录和分享页面信息的有效手段，在各种兴趣测试和营销推广等形式的活动页面中尤为常见。</p>\n<p>快照环节通常处于页面交互流程的末端，汇总了用户最终的参与结果，直接影响到用户对于活动的完整体验。因此，生成高质量的页面快照，对于活动的传播和品牌的转化具有十分重要的意义。</p>\n<p>本文基于云音乐往期优质活动的相关实践（例如「<a href=\"https://st.music.163.com/c/yourposter/m1/index.html\">关于你的画</a>」、「<a href=\"https://st.music.163.com/c/gameofthrones\">权力的游戏</a>」和「<a href=\"http://st.music.163.com/c/shuomingshu\">你的使用说明书</a>」等)，从快照的<strong>内容完整性</strong>、<strong>清晰度</strong>和<strong>转换效率</strong>等多个方面，讨论将网页转换为高质量图片的实践探索。</p>\n<h2>2. 适用场景</h2>\n<ul>\n<li>适用于将页面转为图片，特别是对实时性要求较高的场景。</li>\n<li>希望在快照中展示跨域图片资源的场景。</li>\n<li>针对生成图片内容不完整、模糊或者转换过程缓慢等问题，寻求有效解决方案的场景。</li>\n</ul>\n<h2>3. 原理简析</h2>\n<h3>3.1 方案选型</h3>\n<p>依据图片是否由设备<strong>本地生成</strong>，快照可分为前端处理和后端处理两种方式。</p>\n<p>由于后端生成的方案依赖于网络通信，不可避免地存在通信开销和等待时延，同时对于模板和数据结构变更也有一定的维护成本。</p>\n<p>因此，出于<strong>实时性</strong>和<strong>灵活性</strong>等综合考虑，我们优先选用前端处理的方式。</p>\n<h3>3.2 基本原理</h3>\n<p>前端侧对于快照的处理过程，实质上是将 DOM 节点包含的视图信息转换为图片信息的过程。这个过程可以借助 canvas 的原生 API 实现，这也是方案可行性的基础。</p>\n<p><img src=\"https://p1.music.126.net/cZDzhItI1yiTmfNYGhhUQA==/109951164524534299.png\" alt=\"theory\"></p>\n<p>具体来说，转换过程是将目标 DOM 节点绘制到 canvas 画布，然后 canvas 画布以图片形式导出。可简单标记为绘制阶段和导出阶段两个步骤：</p>\n<ul>\n<li><strong>绘制阶段</strong>：选择希望绘制的 DOM 节点，根据<code class=\"language-text\">nodeType</code>调用 canvas 对象的对应 API，将目标 DOM 节点绘制到 canvas 画布（例如对于<code class=\"language-text\">&lt;img&gt;</code>的绘制使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage\">drawImage</a> 方法)。</li>\n<li><strong>导出阶段</strong>：通过 canvas 的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/toDataURL\">toDataURL</a> 或 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/ImageData\">getImageData</a> 等对外接口，最终实现画布内容的导出。</li>\n</ul>\n<h3>3.3 原生示例</h3>\n<p>具体地，对于单个<code class=\"language-text\">&lt;img&gt;</code>元素可按如下方式生成自身的快照：</p>\n<p><strong>HTML</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>target<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./music-icon.png<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p><strong>JavaScript</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 获取目标元素</span>\n<span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'target'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 新建canvas画布</span>\n<span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'canvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 导出阶段：从canvas导出新的图片</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">exportNewImage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">canvas</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> exportImage <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    exportImage<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">toDataURL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>exportImage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 绘制阶段：待图片内容加载完毕后绘制画布</span>\ntarget<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 将图片内容绘入画布</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 将画布内容导出为新的图片</span>\n    <span class=\"token function\">exportNewImage</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中，<code class=\"language-text\">drawImage</code>是 canvas 上下文对象的实例方法，提供<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage\">多种方式</a>将 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasImageSource\">CanvasImageSource</a> 源绘制到 canvas 画布上。<code class=\"language-text\">exportNewImage</code>用于将 canvas 中的视图信息导出为包含图片展示的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\">data URI</a>。</p>\n<h2>4. 基础方案</h2>\n<p>在上一部分中，我们可以看到基于 canvas 提供的相关基础 API，为前端侧的页面快照处理提供了可能。</p>\n<p>然而，具体的业务应用往往更加复杂，上面的「低配版」实例显然未能覆盖多数的实际场景，例如：</p>\n<ul>\n<li>canvas 的<code class=\"language-text\">drawImage</code>方法只接受 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasImageSource\">CanvasImageSource</a>，而<code class=\"language-text\">CanvasImageSource</code>并不包括<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Node/nodeType\">文本节点</a>、普通的<code class=\"language-text\">div</code>等，将非<code class=\"language-text\">&lt;img&gt;</code>的元素绘制到 canvas 需要特定处理。</li>\n<li>当有多个 DOM 元素需要绘制时，层级优先级处理较为复杂。</li>\n<li>需要关注<code class=\"language-text\">float</code>、<code class=\"language-text\">z-index</code>、<code class=\"language-text\">position</code>等布局定位的处理。</li>\n<li>样式合成绘制计算较为繁琐。</li>\n</ul>\n<p>因此，基于对综合业务场景的考虑，我们采用社区中认可度较高的方案：<code class=\"language-text\">html2canvas</code>和<code class=\"language-text\">canvas2image</code>作为实现快照功能的基础库。</p>\n<h3>4.1 html2canvas</h3>\n<blockquote>\n<p>提供将 DOM 绘制到 canvas 的能力</p>\n</blockquote>\n<p>这款来自社区的神器，为开发者简化了将逐个 DOM 绘制到 canvas 的过程。简单来说，其<strong>基本原理</strong>为：</p>\n<ul>\n<li>递归遍历目标节点及其子节点，收集节点的样式信息；</li>\n<li>计算节点本身的层级关系，根据一定优先级策略将节点逐一绘制到 canvas 画布中；</li>\n<li>重复这一过程，最终实现目标节点内容的全部绘制。</li>\n</ul>\n<p>在使用方面，<code class=\"language-text\">html2canvas</code>对外暴露了一个可执行函数，它的第一个参数用于接收待绘制的目标节点(必选)；第二个参数是可选的<a href=\"https://html2canvas.hertzen.com/configuration\">配置项</a>，用于设置涉及 canvas 导出的各个参数：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// element 为目标绘制节点，options为可选参数</span>\n<span class=\"token function\">html2canvas</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>options<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </code></pre></div>\n<p>简易调用示例如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> html2canvas <span class=\"token keyword\">from</span> <span class=\"token string\">'html2canvas'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 输入body节点，返回包含body视图内容的canvas对象</span>\n<span class=\"token function\">html2canvas</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">canvas</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>4.2 canvas2image</h3>\n<blockquote>\n<p>提供由 canvas 导出图片信息的多种方法</p>\n</blockquote>\n<p>相比于<code class=\"language-text\">html2canvas</code>承担的复杂绘制流程，<a href=\"https://github.com/hongru/canvas2image\">canvas2image</a> 所要做的事情简单的多。</p>\n<p><code class=\"language-text\">canvas2image</code>仅用于将输入的 canvas 对象按特定格式转换和存储操作，其中这两类操作均支持 PNG，JPEG，GIF，BMP 四种图片类型：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 格式转换</span>\nCanvas2Image<span class=\"token punctuation\">.</span><span class=\"token function\">convertToPNG</span><span class=\"token punctuation\">(</span>canvasObj<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nCanvas2Image<span class=\"token punctuation\">.</span><span class=\"token function\">convertToJPEG</span><span class=\"token punctuation\">(</span>canvasObj<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nCanvas2Image<span class=\"token punctuation\">.</span><span class=\"token function\">convertToGIF</span><span class=\"token punctuation\">(</span>canvasObj<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nCanvas2Image<span class=\"token punctuation\">.</span><span class=\"token function\">convertToBMP</span><span class=\"token punctuation\">(</span>canvasObj<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 另存为指定格式图片</span>\nCanvas2Image<span class=\"token punctuation\">.</span><span class=\"token function\">saveAsPNG</span><span class=\"token punctuation\">(</span>canvasObj<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nCanvas2Image<span class=\"token punctuation\">.</span><span class=\"token function\">saveAsJPEG</span><span class=\"token punctuation\">(</span>canvasObj<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nCanvas2Image<span class=\"token punctuation\">.</span><span class=\"token function\">saveAsGIF</span><span class=\"token punctuation\">(</span>canvasObj<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nCanvas2Image<span class=\"token punctuation\">.</span><span class=\"token function\">saveAsBMP</span><span class=\"token punctuation\">(</span>canvasObj<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>实质上，<code class=\"language-text\">canvas2image</code>只是提供了针对 canvas 基础 API 的二次封装（例如 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/ImageData\">getImageData</a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/toDataURL\">toDataURL</a>），而本身并不依赖<code class=\"language-text\">html2canvas</code>。</p>\n<p>在使用方面，由于目前<a href=\"https://github.com/hongru/canvas2image\">作者</a>并未提供 ES6 版本的<code class=\"language-text\">canvas2image</code>(v1.0.5)，暂时不能直接以 import 方式引入该模块。</p>\n<p>对于支持现代化构建的工程中（例如 <a href=\"https://webpack.github.io/\">webpack</a>），开发者可以自助 clone 源码并手动添加 export 获得 ESM 支持：</p>\n<p><strong>支持 ESM 导出</strong>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// canvas2Image.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Canvas2Image</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 以下为定制添加的内容</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Canvas2Image<span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>调用示例</strong>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Canvas2Image <span class=\"token keyword\">from</span> <span class=\"token string\">'./canvas2Image.js'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 其中，canvas代表传入的canvas对象，width, height分别为导出图片的宽高数值</span>\nCanvas2Image<span class=\"token punctuation\">.</span><span class=\"token function\">convertToPNG</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>4.3 组合技</h3>\n<p>接下来，我们基于以上两个工具库，实现一个基础版的快照生成方案。同样是分为两个阶段，对应 3.2 节的基本原理：</p>\n<ul>\n<li>第一步，通过<code class=\"language-text\">html2canvas</code>实现 DOM 节点绘制到 canvas 对象中；</li>\n<li>第二步，将上一步返回的 canvas 对象传入<code class=\"language-text\">canvas2image</code>，进而按需导出快照图片信息。</li>\n</ul>\n<p>具体地，我们封装一个<code class=\"language-text\">convertToImage</code>的函数，用于输入目标节点以及<a href=\"http://html2canvas.hertzen.com/configuration/\">配置项参数</a>，输出快照图片信息。</p>\n<p><code class=\"language-text\">JavaScript</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// convertToImage.js</span>\n<span class=\"token keyword\">import</span> html2canvas <span class=\"token keyword\">from</span> <span class=\"token string\">'html2canvas'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Canvas2Image <span class=\"token keyword\">from</span> <span class=\"token string\">'./canvas2Image.js'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 基础版快照方案\n * @param {HTMLElement} container\n * @param {object} options html2canvas相关配置\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">convertToImage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">container<span class=\"token punctuation\">,</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">html2canvas</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">canvas</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> imageEl <span class=\"token operator\">=</span> Canvas2Image<span class=\"token punctuation\">.</span><span class=\"token function\">convertToPNG</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> imageEl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>5. 进阶优化</h2>\n<p>通过上一节的实例，我们基于<code class=\"language-text\">html2canvas</code>和<code class=\"language-text\">canvas2image</code>，实现了相比原生方案<strong>通用性</strong>更佳的基础页面快照方案。然而面对实际复杂的应用场景，以上基础方案生成的快照效果往往不尽如人意。</p>\n<p>快照效果的<strong>差异性</strong>，一方面是由于<code class=\"language-text\">html2canvas</code>导出的视图信息是通过各种 DOM 和 canvas 的 API 复合计算二次绘制的结果（并非一键栅格化）。因此不同宿主环境的相关 API 实现差异，可能导致生成的图片效果存在多端不一致性或者显示异常的情况。</p>\n<p>另一方面，业务层面的因素，例如对于开发者<code class=\"language-text\">html2canvas</code>的配置有误或者是页面布局不当等原因，也会对生成快照的结果带来偏差。</p>\n<p>社区中也可以常见到一些对于生成快照质量的讨论，例如：</p>\n<ul>\n<li>为什么有些内容显示不完整、残缺、白屏或黑屏？</li>\n<li>明明原页面清晰可辨，为什么生成的图片模糊如毛玻璃？</li>\n<li>将页面转换为图片的过程十分缓慢，影响后续相关操作，有什么好办法么？</li>\n<li>...</li>\n</ul>\n<p>下面我们从<strong>内容完整性</strong>、<strong>清晰度优化</strong>和<strong>转换效率</strong>，进一步探究高质量的快照解决方案。</p>\n<h3>5.1 内容完整性</h3>\n<blockquote>\n<p>首要问题：保证目标节点视图信息完整导出</p>\n</blockquote>\n<p>由于真机环境的兼容性和业务实现方式的不同，在一些使用<code class=\"language-text\">html2canvas</code>过程中常会出现快照内容与原视图不一致的情况。内容不完整的常见自检<code class=\"language-text\">checklist</code>如下：</p>\n<ul>\n<li><strong>跨域问题</strong>：存在跨域图片污染 canvas 画布。</li>\n<li><strong>资源加载</strong>：生成快照时，相关资源还未加载完毕。</li>\n<li><strong>滚动问题</strong>：页面中滚动元素存在偏移量，导致生成的快照顶部出现空白。</li>\n</ul>\n<h4>5.1.1 跨域问题</h4>\n<p>常见于引入的图片素材相对于部署工程<a href=\"http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html\">跨域</a>的场景。例如部署在<code class=\"language-text\">https://st.music.163.com/</code>上面的页面中引入了来源为<code class=\"language-text\">https://p1.music.126.net</code>的图片，这类图片即是属于跨域的图片资源。</p>\n<p>由于 canvas 对于图片资源的<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image\">同源限制</a>，如果画布中包含跨域的图片资源则会污染画布( <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image\">Tainted canvases</a> )，造成生成图片内容混乱或者<code class=\"language-text\">html2canvas</code>方法不执行等异常问题。</p>\n<p>对于跨域图片资源处理，可以从以下几方面着手：</p>\n<p><strong>（1）useCORS 配置</strong></p>\n<p>开启<code class=\"language-text\">html2canvas</code>的<code class=\"language-text\">useCORS</code>配置项，示例如下： </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// doc: http://html2canvas.hertzen.com/configuration/</span>\n<span class=\"token keyword\">const</span> opts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    useCORS   <span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 允许使用跨域图片</span>\n    allowTaint<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>   <span class=\"token comment\">// 不允许跨域图片污染画布</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">html2canvas</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在<code class=\"language-text\">html2canvas</code>的源码中对于<code class=\"language-text\">useCORS</code>配置项置为<code class=\"language-text\">true</code>的处理，实质上是将目标节点中的<code class=\"language-text\">&lt;img&gt;</code>标签注入 <a href=\"https://html.spec.whatwg.org/multipage/embedded-content.html#attr-img-crossorigin\">crossOrigin</a> 为<code class=\"language-text\">anonymous</code>的属性，从而允许载入符合 <a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/CORS\">CORS</a> 规范的图片资源。</p>\n<p>其中，<code class=\"language-text\">allowTaint</code>默认为<code class=\"language-text\">false</code>，也可以不作显式设置。即使该项置为<code class=\"language-text\">true</code>，也不能绕过 canvas 对于跨域图片的限制，因为在调用 canvas 的<code class=\"language-text\">toDataURL</code>时依然会被浏览器禁止。</p>\n<p><strong>（2）CORS 配置</strong></p>\n<p>上一步的<code class=\"language-text\">useCORS</code>的配置，只是允许<code class=\"language-text\">&lt;img&gt;</code>接收跨域的图片资源，而对于解锁跨域图片在 canvas 上的绘制并导出，需要图片资源本身需要提供 CORS 支持。</p>\n<p>这里介绍下跨域图片使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/CDN\">CDN</a> 资源时的注意事项：</p>\n<p>验证图片资源是否支持 CORS 跨域，通过 Chrome 开发者工具可以看到图片请求响应头中应含有<code class=\"language-text\">Access-Control-Allow-Origin</code>的字段，即坊间常提到的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Origin\">跨域头</a>。</p>\n<p>例如，某个来自 CDN 图片资源的响应头示例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Response Headers</span>\naccess<span class=\"token operator\">-</span>control<span class=\"token operator\">-</span>allow<span class=\"token operator\">-</span>credentials<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\naccess<span class=\"token operator\">-</span>control<span class=\"token operator\">-</span>allow<span class=\"token operator\">-</span>headers<span class=\"token punctuation\">:</span> <span class=\"token constant\">DNT</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token operator\">-</span>CustomHeader<span class=\"token punctuation\">,</span>Keep<span class=\"token operator\">-</span>Alive<span class=\"token punctuation\">,</span>User<span class=\"token operator\">-</span>Agent<span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token operator\">-</span>Requested<span class=\"token operator\">-</span>With<span class=\"token punctuation\">,</span>If<span class=\"token operator\">-</span>Modified<span class=\"token operator\">-</span>Since<span class=\"token punctuation\">,</span>Cache<span class=\"token operator\">-</span>Control<span class=\"token punctuation\">,</span>Content<span class=\"token operator\">-</span>Type\naccess<span class=\"token operator\">-</span>control<span class=\"token operator\">-</span>allow<span class=\"token operator\">-</span>methods<span class=\"token punctuation\">:</span> <span class=\"token constant\">GET</span><span class=\"token punctuation\">,</span><span class=\"token constant\">POST</span><span class=\"token punctuation\">,</span><span class=\"token constant\">OPTIONS</span>\naccess<span class=\"token operator\">-</span>control<span class=\"token operator\">-</span>allow<span class=\"token operator\">-</span>origin<span class=\"token punctuation\">:</span> <span class=\"token operator\">*</span></code></pre></div>\n<p>不同的 CDN 服务商配置资源跨域头的方式不同，具体应咨询 CDN 服务商。</p>\n<p>特殊情况下，部分 CDN 提供方可能会存在图片缓存不含 CORS 跨域头的情况。为保证快照显示正常，建议优先联系 CDN 寻求技术支持，不推荐通过图片链接后缀时间戳等方式强制回源，避免影响源站性能和 CDN 计费。</p>\n<p><strong>（3）服务端转发</strong></p>\n<p>在微信等第三方 APP 中，平台的用户头像等图片资源是不直接提供 CORS 支持的。此时需要借助服务端作代理转发，从而绕过跨域限制。</p>\n<p>即通过服务端代为请求平台用户的头像地址并转发给客户端(浏览器)，当然这个服务端接口本身要与页面同源或者支持 CORS。</p>\n<p>为简洁表述，假设前端与后端针对跨域图片转发作如下约定，且该接口与前端工程部署在相同域名下：</p>\n<table>\n<thead>\n<tr>\n<th>请求地址</th>\n<th>请求方式</th>\n<th>传入参数</th>\n<th>返回信息</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/api/redirect/image</td>\n<td><code class=\"language-text\">GET</code></td>\n<td>redirect，表示原图地址</td>\n<td><code class=\"language-text\">Content-Type</code>为<code class=\"language-text\">image/png</code>的图片资源</td>\n</tr>\n</tbody>\n</table>\n<p>页面中的<code class=\"language-text\">&lt;img&gt;</code>通过拼接<code class=\"language-text\">/api/redirect/image</code>与代表原图地址的查询参数<code class=\"language-text\">redirect</code>，发出一个 GET 请求图片资源。由于接口与页面同源，因此不会触发跨域限制：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/api/redirect/image?redirect=thirdwx.qlogo.cn/somebody/avatar<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>user-pic<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>avatar<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">crossorigin</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>anonymous<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>对于服务端接口的实现，这里基于 <a href=\"https://github.com/koajs/koa\">koa</a> 提供了一则简易示例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-router'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> querystring <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'querystring'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 图片转发接口\n * - 接收 redirect 入参，即需要代为请求的图片URL\n * - 返回图片资源\n */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/redirect/image'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> querys <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>querystring<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>querys<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> redirect <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> querystring<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>querys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">proxyFetchImage</span><span class=\"token punctuation\">(</span>redirect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'image/png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Cache-Control'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'max-age=2592000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ctx<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/**\n * 请求并返回图片资源\n * @param {String} url 图片地址\n */</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">proxyFetchImage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">proxyFetchImage</span><span class=\"token punctuation\">(</span>redirect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">routes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在浏览器看来，页面请求的图片资源仍是相同域名下的资源，转发过程对前端透明。建议在需求开发前了解图片资源的来源情况，明确是否需要服务端支持。</p>\n<p>在云音乐早期的活动「<a href=\"https://st.music.163.com/c/gameofthrones\">权力的游戏</a>」中，使用了同类方案，实现了微信平台中用户头像的完整绘制和快照导出。</p>\n<h4>5.1.2 资源加载</h4>\n<p>资源加载不全，是造成快照不完整的一个常见因素。在生成快照时，如果部分资源没有加载完毕，那么生成的内容自然也谈不上完整。</p>\n<p>除了设置一定的延迟外，如果要确保资源加载完毕，可以基于 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\">Promise.all</a> 实现。</p>\n<p><strong>加载图片</strong>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">preloadImg</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">src</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> img <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        img<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>确保在全部加载后生成快照</strong>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> preloadList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'./pic-1.png'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'./pic-2.png'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'./pic-3.png'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>preloadList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">src</span> <span class=\"token operator\">=></span> <span class=\"token function\">preloadImg</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">convertToImage</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">canvas</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>实际上，以上方法只是解决页面图片的显示问题。在真实场景中，即使页面上的图片显示完整，保存快照后依然可能出现内容空白的情况。\n原因是 html2canvas 库内部处理时，对图片资源仍会做一次加载请求；如果此时加载失败，那么该部分保存快照后即是空白的。</p>\n<p>下面介绍图片资源转 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob\">Blob</a> 的方案，保证图片的地址来自本地，避免在快照转化时加载失败的情况。\n这里提到的 Blob 对象表示一个不可变、代表二进制原始数据的类文件对象，在特定的<a href=\"https://juejin.im/post/59e35d0e6fb9a045030f1f35\">使用场景</a>会使用到。</p>\n<p><strong>图片资源转 Blob：</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token comment\">// 返回图片Blob地址</span>\n<span class=\"token keyword\">const</span> toBlobURL <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> urlMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// @param {string} url 传入图片资源地址</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 过滤重复值</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>urlMap<span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>urlMap<span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'canvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> img <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> url<span class=\"token punctuation\">;</span>\n            img<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n                canvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n                ctx<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 关键👇</span>\n                canvas<span class=\"token punctuation\">.</span><span class=\"token function\">toBlob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">blob</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">const</span> blobURL <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>blobURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            img<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>以上<code class=\"language-text\">toBlobURL</code>方法实现将加载<code class=\"language-text\">&lt;img&gt;</code>的资源链接转为 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL\">blobURL</a>。</p>\n<p>进一步地，通过<code class=\"language-text\">convertToBlobImage</code>方法，实现对于传入的目标节点中的<code class=\"language-text\">&lt;img&gt;</code>批量处理为<code class=\"language-text\">Blob</code>格式。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 批量处理</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">convertToBlobImage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">targetNode<span class=\"token punctuation\">,</span> timeout</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>targetNode<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> nodeList <span class=\"token operator\">=</span> targetNode<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>targetNode <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>targetNode<span class=\"token punctuation\">.</span>tagName<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            nodeList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>targetNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            nodeList <span class=\"token operator\">=</span> targetNode<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>nodeList <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>nodeList <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">NodeList</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[convertToBlobImage] 必须是Element或NodeList类型'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nodeList<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 仅考虑&lt;img></span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> resolved <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 超时处理</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>resolved<span class=\"token punctuation\">)</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                resolved <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 逐一替换&lt;img>资源地址</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> nodeList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> v <span class=\"token operator\">=</span> nodeList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>tagName<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                p <span class=\"token operator\">=</span> <span class=\"token function\">toBlobURL</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">blob</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                    v<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> blob<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            p<span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>count <span class=\"token operator\">===</span> nodeList<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>resolved<span class=\"token punctuation\">)</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> convertToBlobImage<span class=\"token punctuation\">;</span></code></pre></div>\n<p>使用方面，<code class=\"language-text\">convertToBlobImage</code>应在调用生成快照<code class=\"language-text\">convertToImage</code>方法前执行。</p>\n<h4>5.1.3 滚动问题</h4>\n<ul>\n<li>典型特征：生成快照的顶部存在空白区域。</li>\n<li>原因：一般是保存长图（超过一屏），并且滚动条不在顶部时导致（常见于 <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/SPA\">SPA</a> 类应用）。</li>\n<li>解决办法：在调用<code class=\"language-text\">convertToImage</code>之前，先记录此时的<code class=\"language-text\">scrollTop</code>，然后调用<code class=\"language-text\">window.scroll(0, 0)</code>将页面移动至顶部。待快照生成后，再调用<code class=\"language-text\">window.scroll(0, scrollTop)</code>恢复原有纵向偏移量。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 待保存的目标节点（按实际修改👇）</span>\n<span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 实际的滚动元素（按实际修改👇）</span>\n<span class=\"token keyword\">const</span> scrollElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 记录滚动元素纵向偏移量</span>\n<span class=\"token keyword\">const</span> scrollTop <span class=\"token operator\">=</span> scrollElement<span class=\"token punctuation\">.</span>scrollTop<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 针对滚动元素是 body 先作置顶</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">scroll</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">convertToImage</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 恢复偏移量</span>\n        window<span class=\"token punctuation\">.</span><span class=\"token function\">scroll</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> scrollTop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>特别地，对于存在<strong>局部滚动</strong>布局的情况，也可以操作对应滚动元素置顶避免容器顶部空白的情况。</p>\n<h3>5.2 清晰度优化</h3>\n<blockquote>\n<p>清晰度是快照质量的分水岭</p>\n</blockquote>\n<p>下图取自「<a href=\"https://st.music.163.com/c/gameofthrones\">权力的游戏</a>」中两张优化前后的结果页快照对比。可以看到优化前的左图，无论是在文字边缘还是图像细节上，相较优化后的清晰度存在明显可辨的差距。</p>\n<p><img src=\"https://p1.music.126.net/jkeDNfw9lWoPSBoNV-aMkQ==/109951164545023722.png\" alt=\"clear\"></p>\n<p>最终生成快照的清晰度，源头上取决于第一步中 DOM 转换成的 canvas 的清晰度。</p>\n<p>以下介绍 5 种行之有效的清晰度优化方法。</p>\n<h4>5.2.1 使用px单位</h4>\n<p>为了给到<code class=\"language-text\">html2canvas</code>明确的整数计算值，避免因小数舍入而导致的拉伸模糊，建议将布局中使用中使用<code class=\"language-text\">%</code>、<code class=\"language-text\">vw</code>、<code class=\"language-text\">vh</code>或<code class=\"language-text\">rem</code>等单位的元素样式，统一改为使用<code class=\"language-text\">px</code>。</p>\n<p><strong>good:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><strong>bad:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 30%<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h4>5.2.2 优先使用 img 标签展示图片</h4>\n<p>很多情况下，导出图片模糊是由原视图中的图片是以 css 中 background 的方式显示的。\n因为 background-size 并不会反馈一个具体的宽高数值，而是通过枚举值如 contain、cover 等代表图片缩放的类型；相对于<code class=\"language-text\">&lt;img&gt;</code>标签， background 方式最终生成的图片会较为模糊。\n将 background 改为<code class=\"language-text\">&lt;img&gt;</code>方式呈现，对于图片清晰度会有一定的改观。对于必须要使用 background 的场景，参见 5.25 节的解决方案。</p>\n<p><strong>good:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>u-image<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./music.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><strong>bad:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>u-image<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>./music.png<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h4>5.2.3  配置高倍的 canvas 画布</h4>\n<p>对于高分辨率的屏幕，canvas 可通过将 css 像素与高分屏的物理像素对齐，实现一定程度的清晰度提升（<a href=\"https://www.cnblogs.com/zaoa/p/8630393.html\">这里</a>对两类像素有详细描述和讨论）。</p>\n<p>在具体操作中，创建由 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/devicePixelRatio\">devicePixelRatio</a> 放大的图像，然后使用 css 将其缩小相同的倍数，有效地提高绘制到 canvas 中的图像清晰度表现。</p>\n<p>在使用<code class=\"language-text\">html2canvas</code>时，我们可以配置一个放缩后的 canvas 画布用于导入节点的绘制。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// convertToImage.js</span>\n<span class=\"token keyword\">import</span> html2canvas <span class=\"token keyword\">from</span> <span class=\"token string\">'html2canvas'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 创建用于绘制的基础canvas画布</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createBaseCanvas</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">scale</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canvas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width <span class=\"token operator\">*</span> scale<span class=\"token punctuation\">;</span>\n    canvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> height <span class=\"token operator\">*</span> scale<span class=\"token punctuation\">;</span>\n    canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>scale<span class=\"token punctuation\">,</span> scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> canvas<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 生成快照</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">convertToImage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">container<span class=\"token punctuation\">,</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 设置放大倍数</span>\n    <span class=\"token keyword\">const</span> scale <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>devicePixelRatio<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 创建用于绘制的基础canvas画布</span>\n    <span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> <span class=\"token function\">createBaseCanvas</span><span class=\"token punctuation\">(</span>scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 传入节点原始宽高</span>\n    <span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span>offsetWidth<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> height <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span>offsetHeight<span class=\"token punctuation\">;</span>   \n\n    <span class=\"token comment\">// html2canvas配置项</span>\n    <span class=\"token keyword\">const</span> ops <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        scale<span class=\"token punctuation\">,</span>\n        width<span class=\"token punctuation\">,</span>\n        height<span class=\"token punctuation\">,</span>\n        canvas<span class=\"token punctuation\">,</span>\n        useCORS<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        allowTaint<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">...</span>options\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">html2canvas</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">,</span> ops<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">canvas</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> imageEl <span class=\"token operator\">=</span> Canvas2Image<span class=\"token punctuation\">.</span><span class=\"token function\">convertToPNG</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> imageEl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>5.2.4  关闭抗锯齿</h4>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled\">imageSmoothingEnabled</a> 是 <code class=\"language-text\">Canvas 2D API</code> 用来设置图片是否平滑的属性，<code class=\"language-text\">true</code>表示图片平滑（默认值），<code class=\"language-text\">false</code>表示关闭 canvas 抗锯齿。</p>\n<p>默认情况下，canvas 的抗锯齿是开启的，可以通过关闭抗锯齿来实现一定程度上的图像锐化，提高线条边缘的清晰度。</p>\n<p>据此，我们将以上<code class=\"language-text\">createBaseCanvas</code>方法升级为：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 创建用于绘制的基础canvas画布</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createBaseCanvas</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">scale</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canvas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width <span class=\"token operator\">*</span> scale<span class=\"token punctuation\">;</span>\n    canvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> height <span class=\"token operator\">*</span> scale<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 关闭抗锯齿</span>\n    context<span class=\"token punctuation\">.</span>mozImageSmoothingEnabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span>webkitImageSmoothingEnabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span>msImageSmoothingEnabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span>imageSmoothingEnabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    context<span class=\"token punctuation\">.</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>scale<span class=\"token punctuation\">,</span> scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> canvas<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>5.2.5  锐化特定元素</h4>\n<p>受到 canvas 画布放缩的启发，我们对特定的 DOM 元素也可以采用类似的优化操作，即设置待优化元素宽高设置为 2 倍或<code class=\"language-text\">devicePixelRatio</code>倍，然后通过 css 缩放的方式控制其展示大小不变。</p>\n<p><img src=\"https://p1.music.126.net/PsNqiXsHHOYdfXqPfSBdvQ==/109951164545581170.png\" alt=\"scale\"></p>\n<p>例如，对于必须用背景图<code class=\"language-text\">background</code>的元素，采用以下方式可明显提高快照的清晰度：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.box</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>/path/to/image<span class=\"token punctuation\">)</span></span> no-repeat<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>0.5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transform-origin</span><span class=\"token punctuation\">:</span> 0 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中，<code class=\"language-text\">width</code>和<code class=\"language-text\">height</code>为实际显示宽高的 2 倍值，通过<code class=\"language-text\">transform: scale(0.5)</code>实现了元素大小的缩放，<code class=\"language-text\">transform-origin</code>根据实际情况设置。</p>\n<h3>5.3 转换效率</h3>\n<p>快照的转换效率直接关系到用户的等待时长。我们可以在目标节点传入阶段和快照导出两个阶段对其进行一定优化。</p>\n<h4>5.3.1 传入阶段</h4>\n<blockquote>\n<p>传入节点的视图信息越精简，生成快照处理的计算量就越小</p>\n</blockquote>\n<p>以下方式适用于传入视图信息“瘦身”：</p>\n<ul>\n<li>减少 <a href=\"https://developers.google.com/web/tools/lighthouse/audits/dom-size\">DOM 规模</a>，降低<code class=\"language-text\">html2canvas</code>递归遍历的计算量。</li>\n<li>压缩图片素材本身的体积，使用 <a href=\"https://tinypng.com/\">tinypng</a> 或 <a href=\"https://imageoptim.com/mac\">ImageOptim</a> 等工具压缩素材。</li>\n<li>如果使用了自定义字体，请使用 <a href=\"https://github.com/ecomfe/fontmin\">fontmin</a> 工具对文字进行按需裁剪，避免动辄数兆的无效资源引入。</li>\n<li>传入合适的<code class=\"language-text\">scale</code>值以缩放 canvas 画布（5.2.3节）。通常情况下 2~3 倍就已经满足一般的场景，不必要传入过大的放大倍数。</li>\n<li>在 5.1.2 节中提到的图片资源转 blob，可将图片资源本地化，避免了生成快照时 html2canvas 的二次图片加载处理，同时所生成的资源链接具备 URL 长度较短等优势。</li>\n</ul>\n<h4>5.3.2 导出优化</h4>\n<p><code class=\"language-text\">canvas2image</code>提供了多个 <a href=\"https://github.com/hongru/canvas2image\">API</a> 用于导出图片信息，上文已有介绍。包括：</p>\n<ul>\n<li>convertToPNG</li>\n<li>convertToJPEG</li>\n<li>convertToGIF</li>\n<li>convertToBMP</li>\n</ul>\n<p>不同的导出格式，对于生成快照的文件体积存在较大的影响。\n通常对于没有透明度展示要求的图片素材，可以使用<code class=\"language-text\">jpeg</code>格式的导出。在我们的相关实践中，<code class=\"language-text\">jpeg</code>相比于<code class=\"language-text\">png</code>甚至能够节约 80% 以上的文件体积。</p>\n<p>实际场景中的的图片导出格式，按业务需求选用即可。</p>\n<h2>6. 小结</h2>\n<p>本文基于<code class=\"language-text\">html2canvas</code>和<code class=\"language-text\">canvas2image</code>，从快照的内容完整性、清晰度和转换效率等多个方面，介绍了前端页面生成高质量快照的解决方案。</p>\n<p>由于实际应用的复杂性，以上方案可能无法覆盖到每一处具体场景，欢迎大家交流和探讨。</p>\n<h2>7. 参考链接</h2>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000011478657\">基于html2canvas实现网页保存为图片及图片清晰度优化</a></li>\n<li><a href=\"https://www.jianshu.com/p/45875477cd1c\">微信wap页生成分享海报功能踩坑经验</a></li>\n<li><a href=\"https://github.com/whinc/blog/issues/8\">H5 实现保存图片的采坑记录</a></li>\n<li><a href=\"https://juejin.im/post/5b7982556fb9a019d9245cf1\">实现微信H5实现网页长按保存图片及识别二维码</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image\">MDN: Allowing cross-origin use of images and canvas</a></li>\n</ul>\n<blockquote>\n<p>本文发布自 <a href=\"https://github.com/x-orpheus\">网易云音乐前端团队</a>，文章未经授权禁止任何形式的转载。我们一直在招人，如果你恰好准备换工作，又恰好喜欢云音乐，那就 <a href=\"mailto:grp.music-fe@corp.netease.com\">加入我们</a>！</p>\n</blockquote>","frontmatter":{"title":"高质量前端快照方案：来自页面的「自拍」","date":"2019-12-13","description":"将网页保存为图片（以下简称为快照），是用户记录和分享页面信息的有效手段，在各种兴趣测试和营销推广等形式的活动页面中尤为常见。"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/canvas-snapshot/","previous":{"fields":{"slug":"/cloud-native/"},"frontmatter":{"title":"云原生基础及调研"}},"next":{"fields":{"slug":"/api-design/"},"frontmatter":{"title":"开发高质量服务端 API"}}}}}