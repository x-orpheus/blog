{"componentChunkName":"component---src-templates-blog-post-js","path":"/dsl/","webpackCompilationHash":"749c8336880cff8e6411","result":{"data":{"site":{"siteMetadata":{"title":"云音乐大前端专栏","author":"云音乐大前端团队","siteUrl":"https://musicfe.dev"}},"markdownRemark":{"id":"10bf32b8-6c5c-514c-b55f-8d7601eea2aa","excerpt":"前言 近几年，前端社区中 DSL 这个词开始频繁出镜，这和环境的变化有很大关系： React、Vue、Angular 等现代框架的表现层设计往往和 DSL 有较强的关联，透过这些优秀作品我们可以得到一些实践指引。 前端相关语言的转编译工具链趋于成熟，如 babel，postcss…","html":"<p><img src=\"https://p1.music.126.net/Q8E0TTueLF3B-97bZ1Pu7g==/109951164718518922.png\"></p>\n<h2>前言</h2>\n<p>近几年，前端社区中 DSL 这个词开始频繁出镜，这和环境的变化有很大关系：</p>\n<ol>\n<li>React、Vue、Angular 等现代框架的表现层设计往往和 DSL 有较强的关联，透过这些优秀作品我们可以得到一些实践指引。</li>\n<li>前端相关语言的转编译工具链趋于成熟，如 <a href=\"https://babeljs.io/\">babel</a>，<a href=\"https://postcss.org/\">postcss</a> 等工具可以帮助开发者以扩展插件的方式低成本地参与到语言构建流程中。</li>\n<li>社区的解析器生成工具开始普及，如 <a href=\"https://github.com/zaach/jison\">jison</a>、<a href=\"https://pegjs.org/\">PEG.js</a> 等，可以帮助开发者快速实现全新的编程语言（一般是模板等外部 DSL）。</li>\n</ol>\n<p>虽然在「术」的实践中我们开始百花齐放，但同时也产生了一些误区或迷思，比如会将 DSL 和转编译这种纯技术议题划上等号，比如会分不清内部 DSL 和库（接口）的边界等等，<strong>DSL</strong> 因此成了一个人人都在说但却又很陌生的词汇。</p>\n<p>同时市面上的权威著作如 Martin Fowler 的《领域特定语言》虽然会偏向于「道」的解答，但里面充斥着诸如「格兰特小姐的密室控制器」以及「蹦蹦高证券公司」等等对国内前端开发者而言会水土不服的晦涩案例。实际上前端的日常工作已经和 DSL 有着千丝万缕的关系，作为开发者已经不需要通过这些生涩案例来学习 DSL。</p>\n<p>本文作者由于工作经历上的特殊性，积累了一些关于前端 DSL 的实践经验（主要是外部 DSL），在所维护的<a href=\"https://github.com/leeluolee\">开源项目</a>中也有一些体现，同时作者在社区也有过一些不成体系的回答如<a href=\"https://www.zhihu.com/question/20140718/answer/114360444\">《如何写一个类似 LESS 的编译工具》</a>。这次我会尝试从前端开发的视角来完整探讨下 DSL 这个 <strong>「难以细说」</strong> 的议题。</p>\n<p>由于篇幅关系，本文会分为两个部分：</p>\n<ul>\n<li>第一部分：DSL 初识 + 内部 DSL；</li>\n<li>第二部分：外部 DSL + 前端 DSL 实践总结。</li>\n</ul>\n<h2>DSL 初识</h2>\n<blockquote>\n<p>和很多计算机领域的概念一样，DSL 其实也算是先有实践再有定义。</p>\n</blockquote>\n<p>DSL 即「Domain Specific Language」，中文一般译为「领域特定语言」，在<a href=\"https://book.douban.com/subject/21964984/\">《领域特定语言》</a>这本书中它有了一个定义：</p>\n<blockquote>\n<p>一种为<strong>特定领域</strong>设计的，具有<strong>受限表达性</strong>的<strong>编程语言</strong></p>\n</blockquote>\n<p>编程语言的发展其实是一个不断抽象的过程，比如从机器语言到汇编语言然后到 C 或 Ruby 这类高级语言：</p>\n<p><img src=\"https://p1.music.126.net/r-ABJCj5yjZpkyKi0dTHCg==/109951164487803327.png\"></p>\n<p>如上图所示，汇编语言通过助记符代替机器指令操作码，极大的增强了机器语言的可读性和可维护性。但本质上它仍是一门面向处理器和寄存器等硬件系统的低级编程语言。高级语言的出现解决了这个问题，真正脱离了对机器指令集的直接关联，以上层抽象的语句(流程控制、循环等)和数据结构等更趋近自然语言和数学公式的方式完成编码工作，大大提升了程序开发的效率。</p>\n<p>但在高级语言层面，抽象带来的效率提升似乎有了天花板。无论是从 C 到 Java，抑或是各种编程范式下衍生的抽象度更高的编程语言，解决的都是通用编程问题，它们都有充分的过程抽象和数据抽象，导致大量的概念产生，进而影响了编程效率。</p>\n<p>而在一些专有领域的任务处理上其实不需要那么多语言特性，DSL 就是在这种矛盾中产生的破局方案，它是为了解决特定任务的语言工具，比如文档编写有 markdown，字符串匹配有 RegExp，任务控制有 make、gradle，数据查找有 SQL，Web 样式编码有 CSS 等等。它的本质其实和我们很多软件工程问题的解决思路一样，<strong>通过限定问题域边界，从而锁定复杂度，提高编程效率</strong>。</p>\n<p>我们先来个简单的例子，比如表示<strong>2周前的时间</strong>：</p>\n<p><strong>解法一</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">7</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>解法二</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token number\">2</span> weeks ago</code></pre></div>\n<p><strong>解法三</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">weeks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ago</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>解法一是符合通用编程思维的解答，但即使作为程序员的我们也无法一眼看出其含义。</p>\n<p>解法二和解法三其实就是 DSL 的两种不同类型——外部 DSL 和内部 DSL，它们的直观性显然更高（不信可以问问你的女朋友），但它却无法直接运行，假如你尝试在 JavaScript 环境下运行它，将会获得完全不同的错误：</p>\n<ul>\n<li><code class=\"language-text\">2 weeks ago</code> 会得到 <code class=\"language-text\">Uncaught SyntaxError: Unexpected identifier</code> 的<strong>语法错误</strong>。</li>\n<li><code class=\"language-text\">(2).weeks().ago()</code> 则会得到一个 <code class=\"language-text\">Uncaught TypeError: 2.weeks is not a function</code> 的<strong>运行时类型错误</strong>。</li>\n</ul>\n<blockquote>\n<p>其实从错误类型上我们就可以看到它们是有本质不同的。</p>\n</blockquote>\n<h4><strong>外部 DSL 简述</strong></h4>\n<p>解法二称之为<strong>外部 DSL</strong> ，它是一种独立的编程语言，需要从解析器开始实现自己的编译工具，实现成本较高。但它的语法的灵活性更高，更容易达到用户的表现力需求。</p>\n<p>外部 DSL 的直接对应就是 GPPL，由于受限语法特性更少，一般不要求图灵完备，所以它实现难度会低于 GPPL。</p>\n<blockquote>\n<p>GPPL 即 「General Purpose Programming Language」，又称通用编程语言，例如我们常用的 JavaScript，它们被设计用来解决通用编程问题。</p>\n</blockquote>\n<p>前端常用的模板引擎如 <a href=\"http://mustache.github.io/\">mustache</a> 以及 React、Vue 支持的 JSX 语法都属于外部 DSL。</p>\n<p><strong>mustache 的例子</strong>：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>Names<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n{{#names}}\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span>{{name}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span>\n{{/names}}</code></pre></div>\n<p><em>这可比手动拼装字符串高效多了。</em></p>\n<h4><strong>内部 DSL 简述</strong></h4>\n<p>解法三我们称之为 <strong>内部 DSL（Embedded DSL or Internal DSL）</strong> ，它是建立在其它宿主语言之上（一般为 GPPL）的特殊 DSL，它与宿主语言共享编译与调试工具等基础设施，学习成本更低，也更容易被集成。他在语法上与宿主语言同源，但在运行时上需要做额外的封装。</p>\n<p>你也可以将内部DSL视为针对特定任务的特殊接口封装风格，比如 jQuery 就可以认为是针对 DOM 操作的一种内部 DSL。</p>\n<p>内部 DSL 的语法灵活度和语法噪音（syntactic noise）往往取决于宿主语言的选择，本篇的例子我们会围绕 JavaScript 来展开。</p>\n<blockquote>\n<p><strong>syntactic noise</strong> is syntax within a programming language that makes the programming language more difficult to read and understand for humans.</p>\n</blockquote>\n<p><em>简而言之：看着蛋疼，写着蛋疼。</em></p>\n<p>最后我们来看下内部 DSL 以及外部 DSL 与一般通用语言 GPPL 的关系：</p>\n<p><img src=\"https://p1.music.126.net/3GtdKqgxbkzEY_-Z7AH8Uw==/109951164714003301.png\"></p>\n<p>其中内部 DSL 的定义一直是社区辩论的焦点，为了理解内部 DSL 究竟是什么，我们先来熟悉下内部 DSL 的典型构建风格。</p>\n<h2>内部 DSL 风格指南（JavaScript 描述）</h2>\n<p>结合 JavaScript 构建内部 DSL 其实有一些可套用的风格可循。</p>\n<h3>风格 1：级联方法</h3>\n<p>级联方法是内部 DSL 的最常用模式，我们先以原生 DOM 操作作为反面案例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> userPanel <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#user_panel'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nuserPanel<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> hidePanel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">slideDown</span><span class=\"token punctuation\">(</span>userPanel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//假设这是一个已实现的动画封装</span>\n\n<span class=\"token keyword\">const</span> followButtons <span class=\"token operator\">=</span> userPanel<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfollowButtons<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  node<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'follow'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>相信大家很难一眼看出做了什么，但假如我们使用远古框架 jQuery 来实现等价效果：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#user_panel'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>hidePanel<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">slideDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token string\">'follow'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>就很容易理解其中的含义：</p>\n<ol>\n<li>找到 <code class=\"language-text\">#user_panel</code> 节点；</li>\n<li>设置点击后隐藏它；</li>\n<li>向下动效展开；</li>\n<li>然后找到它下面的所有 button 节点；</li>\n<li>为这些按钮填充 follow 内容。</li>\n</ol>\n<p>级联方法等链式调用风格的核心在于<strong>调用不再设计特定返回值，而是直接返回下一个上下文（通常是自身）</strong>，从而实现级联调用。</p>\n<h3>风格 2：级联管道</h3>\n<p>级联管道只是一种级联方法的特殊应用，代表案例就是 <a href=\"https://gulpjs.com/\">gulp</a>：</p>\n<blockquote>\n<p>gulp 是一种类似 make 构建任务管理工具，它将文件抽象为一种叫 <a href=\"https://github.com/gulpjs/vinyl\">Vinyl</a>(Virtual file format) 的类型，抽象文件使用 pipe 方法依次通过 transformer 从而完成任务。</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">gulp<span class=\"token punctuation\">.</span><span class=\"token function\">src</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./scss/**/*.scss'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">plumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">sass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">rename</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> suffix<span class=\"token punctuation\">:</span> <span class=\"token string\">'.min'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">postcss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">dest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./css'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>很多人会觉得 <code class=\"language-text\">gulp</code> 似曾相识，因为它的设计哲学是衍生自 Unix 命令行中的管道，上例可以直接类比以下命令：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> <span class=\"token string\">'./scss/**/*.scss'</span> <span class=\"token operator\">|</span> plumber <span class=\"token operator\">|</span> sass <span class=\"token operator\">|</span> <span class=\"token function\">rename</span> --suffix <span class=\"token string\">'.min'</span> <span class=\"token operator\">|</span> postcss <span class=\"token operator\">|</span> dest <span class=\"token string\">'./css/'</span></code></pre></div>\n<p>上述针对 Pipeline 的抽象也有用常规级联调用的方式来构建 DSL，比如 <a href=\"https://github.com/chajs/cha\">chajs</a>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">cha</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">glob</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./scss/**/*.scss'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">plumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">sass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">rename</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> suffix<span class=\"token punctuation\">:</span> <span class=\"token string\">'.min'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">postcss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">dest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./css'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>上述只是 DSL 的语法类比，chajs 不一定有 <code class=\"language-text\">plumber</code> 等功能模块。</p>\n</blockquote>\n<p>由于减少了多个 <code class=\"language-text\">pipe</code>，代码显然是有减少的，但流畅度上并没有更大的提升。</p>\n<p>其次 <code class=\"language-text\">chajs</code> 的风格要求这些扩展方法都注册到实例中，这就平添了集成成本，这些集成代码也会影响到 DSL 的流畅度。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">cha\n  <span class=\"token punctuation\">.</span><span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token string\">'glob'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'task-glob'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token string\">'combine'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'task-combine'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token string\">'replace'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'task-replace'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token string\">'writer'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'task-writer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token string\">'uglifyjs'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'task-uglifyjs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token string\">'copy'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'task-copy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'task-request'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>相比之下，<code class=\"language-text\">gulp</code> 将扩展统一抽象为一种外部 <code class=\"language-text\">transformer</code>，显然设计的更加优雅。</p>\n<h3>风格 3：级联属性</h3>\n<p>级联方法如文章开篇的 <code class=\"language-text\">(2).weeks().ago()</code> ，其实还不够简洁，存在明显的语法噪音，<code class=\"language-text\">(2).weeks.ago</code> 显然是个更好的方式，我们可以通过属性静态代理来实现，核心就是 <code class=\"language-text\">Object.defineProperty()</code>，它可以劫持属性的 <code class=\"language-text\">setter</code> 与 <code class=\"language-text\">getter</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> hours <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> days <span class=\"token operator\">=</span> hours <span class=\"token operator\">*</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> weeks <span class=\"token operator\">=</span> days <span class=\"token operator\">*</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">UNIT_TO_NUM</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> hours<span class=\"token punctuation\">,</span> days<span class=\"token punctuation\">,</span> weeks <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Duration</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num<span class=\"token punctuation\">,</span> unit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>unit <span class=\"token operator\">=</span> unit<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">toNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">UNIT_TO_NUM</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>unit<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">ago</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">later</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token constant\">UNIT_TO_NUM</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">unit</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Duration</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>将上述代码粘贴到控制台后，再输入 <code class=\"language-text\">(2).weeks.ago</code> 试试吧，可以看到级联属性可以比级联方法拥有更简洁的表述，但同时也丢失了参数层面的灵活性。</p>\n<blockquote>\n<p>可能有人会疑问为何不是 <code class=\"language-text\">2.weeks.ago</code>，这就是 JavaScript 的一个「<strong>Feature</strong>」了。唯一的解决方式就是去使用诸如 CoffeeScript 那些语法噪音更小的宿主语言吧。</p>\n</blockquote>\n<p>在 DSL 风格中，无论是级联方法、级联管道还是级联属性，本质都是链式调用风格，链式调用的核心是上下文传递，所以每一次<strong>调用的返回实体是否符合用户的心智</strong>是 DSL 设计是否成功的重要依据。</p>\n<h3>风格 4：嵌套函数</h3>\n<p>开发中也存在一些层级抽象的场景，比如 DOM 树的生成，以下是纯粹命令式使用 DOM API 来构建的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncontainer<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token string\">'container'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> h1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nh1<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'This is hyperscript'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> item1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> link <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlink<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'One list item'</span><span class=\"token punctuation\">;</span>\nlink<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> href<span class=\"token punctuation\">;</span>\nitem1<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>link1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> item2 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nitem2<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'Another list item'</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>item1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>item2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncontainer<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>h1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncontainer<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这种写法略显晦涩，很难一眼看出最终的 HTML 结构，那如何构建内部 DSL 来流畅解决这种层级抽象呢？</p>\n<p>有人就尝试用类似链式调用的方式去实现，比如 <a href=\"https://github.com/hoho/concat.js\">concat.js</a>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">div</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#container'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">h1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">'This is hyperscript'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ul</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">li</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>href<span class=\"token punctuation\">:</span><span class=\"token string\">'abc.com'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">'One list item'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">li</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Another list item'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这似乎比命令式的写法好了不少，但构建这种 DSL 存在不少问题：</p>\n<ol>\n<li>因为链式调用的关键是上下文传递，在层级抽象中需额外的 <code class=\"language-text\">end()</code> 出栈动作实现上下文切换。</li>\n<li>可读性强依赖于手动缩进，而往往编辑器的自动缩进往往会打破这种和谐。</li>\n</ol>\n<p>所以一般层级结构抽象很少使用链式调用风格来构建 DSL，而会更多的使用基本的<strong>嵌套函数</strong>来实现。</p>\n<p>我们以另一个骨灰开源项目 <a href=\"https://github.com/insin/DOMBuilder\">DOMBuilder</a> 为例：</p>\n<blockquote>\n<p>这里先抛开 <code class=\"language-text\">with</code> 本身的使用问题</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span>DOMBuilder<span class=\"token punctuation\">.</span>dom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span>\n    <span class=\"token function\">div</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#container'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">h1</span><span class=\"token punctuation\">(</span><span class=\"token string\">'This is hyperscript'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">ul</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">li</span><span class=\"token punctuation\">(</span>\n            <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>herf<span class=\"token punctuation\">:</span><span class=\"token string\">'abc.com'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'One list item'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">li</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Another list item'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到层级结构抽象使用嵌套函数来实现会更流畅。</p>\n<p>如果使用 CoffeeScript 来描述，语法噪音可以降到更低，可以接近 <a href=\"https://pugjs.org/api/getting-started.html\">pug</a> 这种外部 DSL 的语法：</p>\n<div class=\"gatsby-highlight\" data-language=\"coffeescript\"><pre class=\"language-coffeescript\"><code class=\"language-coffeescript\">div <span class=\"token string\">'#container'</span><span class=\"token punctuation\">,</span>\n  h1 <span class=\"token string\">'This is hyperscript'</span>\n  ul <span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">li</span><span class=\"token punctuation\">(</span>\n      a <span class=\"token property\">href</span><span class=\"token punctuation\">:</span><span class=\"token string\">'abc.com'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'One list item'</span>\n    <span class=\"token punctuation\">)</span>\n    li <span class=\"token string\">'Another list item'</span></code></pre></div>\n<blockquote>\n<p>CoffeeScript 是一门编译到 JavaScript 的语言，它旨在去除 JavaScript 语言设计上的糟粕，并增加了很多语法糖，影响了很多 JavaScript 后续标准的演进，目前完成了它的历史任务，逐步销声匿迹中。</p>\n</blockquote>\n<p>嵌套函数本质上是将在链式调用中需要处理的上下文切换隐含在了函数嵌套操作中，所以它在层级抽象场景是非常适用的。</p>\n<p>另外，嵌套函数在 DSL 的应用类似解析树，因为其符合语法树生成思路，往往可直接映射转换为对应外部 DSL，比如 JSX：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>container<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>heading<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> This is hyperscript </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">title</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>href<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> One list item </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> Another list item </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><strong>嵌套函数</strong>并不是万金油，它天然不适合流程、时间等顺序敏感的场景。</p>\n<p>如果将风格 2 的级联管道修改为嵌套函数：</p>\n<p><img src=\"https://p1.music.126.net/lRAJ6WrVWL30Tk2zk8AhGQ==/109951164714996074.png?param=480x0\"></p>\n<p>执行逻辑与阅读顺序显然不一致，并且会加重书写负担(同时要关心开闭逻辑)，极大影响读写流畅度。</p>\n<h3>风格 5：对象字面量</h3>\n<p>业界很多 DSL 都类似于配置文件，例如 JSON、<a href=\"https://yaml.org/\">YAML</a> 等外部 DSL，它们在嵌套数据展现中有很强的表达力。</p>\n<p>而 JavaScript 也有一个适合在此场景构建 DSL 的特性，那就是<strong>字面量对象</strong>，实际上，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a>（全称 JavaScript Object Notation）正是衍生自它的这个特性，成为了一种标准数据交换格式。</p>\n<p>例如在项目 <a href=\"https://github.com/leeluolee/puer\">puer</a> 中，路由配置文件选择了 JS 的对象字面量而不是 JSON：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'GET /homepage'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'./view/static.html'</span>\n    <span class=\"token string\">'GET /blog'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello'</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token string\">'GET /user/:id'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user.vm'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>因为 JSON 有一个天然缺陷就是要求可序列化，这极大的限制了它的表达力（不过也使它成为了最流行的跨语言数据交换格式），比如上例最后一条还引入了函数，虽然从 DSL 角度来说变得“不纯粹”了，但功能性却上了一个台阶。这也是为什么一些构建任务相关的 DSL（make、rake、cake、gradle 等）几乎全部都是内部 DSL 的原因。</p>\n<p>除此之外，因为对象 key 值的存在，对象字面量也能提高参数可读性，比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">div</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">:</span> <span class=\"token string\">'container'</span><span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">:</span> <span class=\"token string\">'This is a tip'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// CoffeeScript Version</span>\ndiv id<span class=\"token punctuation\">:</span> <span class=\"token string\">'container'</span><span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">:</span> <span class=\"token string\">'This is a tip'</span></code></pre></div>\n<p>显然比用词更少的下例可读性更佳：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">div</span><span class=\"token punctuation\">(</span><span class=\"token string\">'container'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'This is a tip'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>构造 DSL 并非越简洁越好，提高流畅度才是关键。</p>\n</blockquote>\n<p>对象字面量的结构性较强，一般只用来做配置等数据抽象的场景，不适合用在过程抽象的场景。</p>\n<h3>风格 6：动态代理</h3>\n<p>之前所列举内部 DSL 的构造方式有一个典型缺陷就是它们都是静态定义的属性或方法，没有动态性。</p>\n<p>如上节 <strong>[风格4: 嵌套函数]</strong> 中的提到 <a href=\"https://github.com/hoho/concat.js\">concat.js</a>，它的所有类似 <code class=\"language-text\">div</code>、<code class=\"language-text\">p</code> 等方法都是<a href=\"https://github.com/hoho/concat.js/blob/master/concat.js#L22\">静态具名定义</a>的。而实际上因为 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Using_custom_elements\">custom elements</a> 特性的存在，这种静态穷举的方式显然是有坑的，更别说 html 标准本身也在不断增加新标签。</p>\n<p>而在外部 DSL，这个问题是不存在的，比如我早期写的 <a href=\"https://github.com/regularjs/regular\">regularjs/regular</a>，它内置的模板引擎在词法解析阶段把类似<code class=\"language-text\">/&lt;(\\w+)/</code>的文本匹配为统一的<a href=\"https://github.com/regularjs/regular/blob/master/lib/parser/Lexer.js#L261\"><code class=\"language-text\">TAG</code> 词法元素</a>，这样就可以避免穷举。</p>\n<p>内部 DSL 要实现这种特性，就强依赖宿主语言的元编程能力了。\nRuby 作为典型宿主语言经常会用来证明其强大元编程能力的特性就是 <a href=\"https://www.leighhalliday.com/ruby-metaprogramming-method-missing\"><code class=\"language-text\">method_missing</code></a>，这个方法可以动态接收所有未定义的方法，最直接功能就是动态命名方法（或元方法），这样就可以解决上面提到的内部 DSL 都是具名静态定义的问题。</p>\n<p>值得庆幸的是在 JavaScript 中也有了一个更强大的语言特性，就是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a>，它可以代理属性获取，从而解决上文 concat.js 的穷举问题。</p>\n<blockquote>\n<p>以下并非完整代码，只是简单演示</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">tag</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tagName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>tag<span class=\"token punctuation\">:</span> tagName<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">tag</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">h1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {tag: 'h1'}</span>\nbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">tag_not_defined</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// {tag: 'tag_not_defined'}</span></code></pre></div>\n<p>Proxy 使得 JavaScript 具备了极强的元编程能力，它除了可以轻松模拟出 <a href=\"https://www.cnblogs.com/htoooth/p/11367829.html\">Ruby 沾沾自喜的 method_missing 特性</a>外，也可以有很多<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy#%E4%B8%80%E4%B8%AA%E5%AE%8C%E6%95%B4%E7%9A%84_traps_%E5%88%97%E8%A1%A8%E7%A4%BA%E4%BE%8B\">其它动态代理能力</a>，这些都是实现内部 DSL 的重要工具。</p>\n<h3>风格 7：Lambda 表达式</h3>\n<p>市面上有大量的查询库使用链式风格，它们非常接近 SQL 本身的写法，比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span> \n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id==1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age > 1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">sortBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'create_time'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>为了将 <code class=\"language-text\">id==1</code> 等表达式转化为可运行的过滤条件，我们不得不去实现完整的表达式解析器，以最终编译得到等价函数</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>实现成本非常高，而使用 lambda 表达式可以更低成本地解决这种需求</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>age <span class=\"token operator\">></span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">sortBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'create_time'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这种应用案例其实早就存在了，比如基于<code class=\"language-text\">C#</code>的<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/linq/\">LINQ</a>(Language-Integrated Query)，这也是最常活跃在内部 DSL 技术圈的典型案例。</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">var result = products\n    .Where(p =&gt; p.UnitPrice &gt;= 20)\n    .GroupBy(p =&gt; p.CategoryName)\n    .OrderByDescending(g =&gt; g.Count())\n    .Select(g =&gt; new { Name = g.Key, Count = g.Count() });</code></pre></div>\n<p>Lambda 表达式本质上是一种直观易读且<strong>延迟执行</strong>的逻辑表达能力，从而避免额外的解析工作，不过它强依托宿主的语言特性支持(匿名函数 + 箭头表示)，并且也会引入一定的语法噪音。</p>\n<h3>风格 8：自然语言抽象</h3>\n<p>自然语言抽象即以更贴近自然语言的方式去设计 DSL 的语法，它行得通的基本逻辑是领域专家基本都是和你我一样的自然人，更容易接受自然语言的语法。</p>\n<p>自然语言抽象的本质是一些语法糖，和一般 GPPL 的语法糖不一样，\nDSL 的语法糖并不一定是最简洁的，反而会加入一些「冗余」的非功能性语法词汇。</p>\n<p>举个栗子，在云音乐团队开源的 <a href=\"https://github.com/svrxjs/svrx/\">svrx(Server-X)</a> 项目（一个插件化 dev-server 平台）中，路由是个高频使用的功能，为此我们设计了一套<a href=\"https://docs.svrx.io/zh/guide/route.html#%E8%AF%AD%E6%B3%95\">内部 DSL</a> 来方便开发者使用，如下例所示：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/blog/:id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Demo Blog'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/blog/:id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>code<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/(.*)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">proxy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://music.163.com'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>其中 <code class=\"language-text\">to</code> 就是个非功能性词汇，但却使得整个语句更容易被自然人（当然也包括我们程序员）所理解使用。</p>\n<p>通过自然语言抽象，内部 DSL 的优势在单元测试场景中被发挥的淋漓尽致，比如如果我们裸用类似 <a href=\"http://nodejs.cn/api/assert.html#assert_assert_value_message\">assert</a> 的断言方法，单元测试用例可能是这样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">'43'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> foo <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'expect foo to be a number'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>\n  tea<span class=\"token punctuation\">.</span>flavors <span class=\"token operator\">&amp;&amp;</span> tea<span class=\"token punctuation\">.</span>flavors<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'c should have property flavors with length of 3'</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>有几个显著待优化的问题：</p>\n<ol>\n<li>命令式的断言语句阅读不直观；</li>\n<li>为了 report 的可读性，需要传入额外的提示语（如<code class=\"language-text\">expect foo to be a number</code>）。</li>\n</ol>\n<p>如果这个 case 基于 <a href=\"https://www.chaijs.com/\">chai</a> 来书写的话，可读性会立马上一个台阶：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">'43'</span>\n\n<span class=\"token comment\">// AssertionError: '43' should be a 'number'.</span>\nfoo<span class=\"token punctuation\">.</span>should<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntea<span class=\"token punctuation\">.</span>should<span class=\"token punctuation\">.</span>have<span class=\"token punctuation\">.</span><span class=\"token function\">property</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flavors'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>with<span class=\"token punctuation\">.</span><span class=\"token function\">lengthOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>可以发现测试用例变得更加易读易写了，而且当断言失败，也会自动根据链式调用产生的状态，自动拼装出更友好的错误信息，特别是当与 mocha 等测试框架结合时，可以直接生成直观的测试报告：</p>\n<p><img src=\"https://p1.music.126.net/oyk8W_V__TqGisx3feAGJg==/109951164681295531.png\"></p>\n<blockquote>\n<p>通过增加类似自然语言的辅助语法(动、名、介、副等)，可以使得程序语句更直观易懂。</p>\n</blockquote>\n<h3>风格总结</h3>\n<p>本文并未囊括所有内部 DSL 实现风格(比如也有些基于 Decorator 装饰器的玩法)，且所列风格都不是银弹，都有其适用场景，它们之间存在互补效应。\n<img src=\"https://p1.music.126.net/-_kmmM-JS6llFaqdE8cIJQ==/109951164697390126.png\"></p>\n<h2>内部 DSL 的一些迷思</h2>\n<p>通过上面的一些惯用风格的介绍，我们建立了对前端内部 DSL 的一些了解，本节会针对「Why」的问题做下深入讨论：</p>\n<h3>为何选择 JavaScript 作为宿主语言</h3>\n<p>从风格案例可以看到，宿主语言直接决定了内部 DSL 的「语法」优化的上限。正如 ROR 之于 Ruby、Gradle 之于 Groovy，典型的前期选择大于后天努力。而前端开发最趁手的语言 JavaScript 其实在构建内部 DSL 时具备了很大的优势，因为它那些大杂烩般的语言特性：</p>\n<ul>\n<li>借鉴 Java 语言的数据类型和内存管理，抽象度高。</li>\n<li>基于对象，且拥有方便的对象字面量表示等，数据表达力一流。</li>\n<li>函数为第一等公民（first class），可以有一些泛 FP 的应用。</li>\n<li>使用基于原型（prototype）的继承机制，并且可扩展原始类型如 Number。</li>\n<li>Proxy、Reflect 等新特性加持下具备了极强的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Meta_programming\">元编程能力</a>。</li>\n</ul>\n<p>放荡不羁的语言特性使得它几乎可以 Hold 住任何内部 DSL 的构建风格，另外它那活跃到离谱的社区也奠定了天然的开发者基础。</p>\n<p>JavaScript 存在的天然缺陷就是它那衍生自 C 的语法，导致噪音较强，使用一些变种语言（如 CoffeeScript）可以扭转一些这种劣势。</p>\n<h3>库（接口）还是内部 DSL</h3>\n<p>外部 DSL 的边界问题往往是 DSL 与 GPPL 的区别，这个在社区中的争议并不算很大。而关于内部 DSL 的讨论，特别是与库（接口）的差异问题就一直都没消停过，确实存在模糊的部分。</p>\n<p>实际上 DSL 也有个别名叫<strong>流畅接口</strong>，所以它本身也属于接口封装或库封装的一种模式，目标是极限表达力。但它相较于传统接口封装，有几个显著设计差异点：</p>\n<ul>\n<li>语言性。</li>\n<li>不受传统编程最佳实践的束缚：如命令-查询分离、迪米特法则等。</li>\n</ul>\n<p>比如在内部 DSL 中，得到代码如 <code class=\"language-text\">foo.should.be.a.number</code> 就像是一个在既定语法下有关联的整句，而不是命令式代码的集合。而 jQuery 中 <code class=\"language-text\">html</code> 即是查询方法（<code class=\"language-text\">.html()</code>）也是命令方法（<code class=\"language-text\">.html(&#39;content to set&#39;)</code>），这显然背离了命令查询分离的原则。它们设计的首要目标是「极限流畅的表现力」，而非职责清晰、降低耦合度等传统的封装抽象准则。</p>\n<p>其实本文更认同松本行弘先生在<a href=\"https://book.douban.com/subject/24536403/\">《代码的未来》</a>中引述的观点，这也算最终解开了作者对于内部 DSL 的疑惑和心结：</p>\n<blockquote>\n<p>库设计就是语言设计</p>\n</blockquote>\n<p><strong>编程语言只确定了基本语法框架和少量词汇，库设计应该将其与充当词汇池的类、方法、属性甚至变量相结合，并将它们按语义有机结合起来</strong>，最终真正实现「在限定任务下，编程工作者只需要关注 What，而无需关注 How」的设计目标。这也就是 <code class=\"language-text\">2.weeks.ago</code> 的魔力所在，编程（语言）的发展方向就应该如此，才能达到更高的抽象维度。</p>\n<p>所以与其尝试去为内部 DSL 划分一个明确的边界，不如根据它的要求去改善你的接口设计。这里引申另一个更激进的观点：</p>\n<blockquote>\n<p><strong>Programming is a process of designing DSL for your own application.</strong></p>\n</blockquote>\n<h3>内部 DSL 实践的一些坑</h3>\n<p>除了由于依赖于宿主语言，导致功能性缺失和额外的语法噪音之外，内部 DSL 也存在其它不可忽视的问题。</p>\n<h4>不友好的异常</h4>\n<p>在 <strong>[风格3: 级联属性]</strong> 案例中，其实我们没有定义 <code class=\"language-text\">minutes</code> 这个单位, 如果错误的使用<code class=\"language-text\">(5).minutes.later</code>，将得到以下错误提示：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Uncaught TypeError: Cannot <span class=\"token builtin class-name\">read</span> property <span class=\"token string\">'later'</span> of undefined</code></pre></div>\n<p>而不是我们预期的类似报错信息：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Uncaught SyntaxError<span class=\"token punctuation\">:</span> Unexpected unit minutes</code></pre></div>\n<p>这是由于异常处理机制也遵循宿主语言，在库封装层面做 DSL 抽象依然无法逃脱这个限制，这也是外部 DSL 的优势所在，不过基于 <strong>[风格6：动态代理]</strong> 提到的 Proxy，我们仍能做一些微不足道的小优化：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">UNITS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'days'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'weeks'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'hours'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> five <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">UNITS</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token function\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Invalid unit [</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>property<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">] after </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>target<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n       <span class=\"token comment\">// blablabla</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>粘贴到控制台并输入 <code class=\"language-text\">five.minutes</code>，你将看到更友好的错误提示：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Uncaught TypeError<span class=\"token punctuation\">:</span> invalid units <span class=\"token punctuation\">[</span>minutes<span class=\"token punctuation\">]</span> after <span class=\"token number\">5</span></code></pre></div>\n<h4>容易忽视冰山之下的设计</h4>\n<p>内部 DSL 的设计要点在于表现层是否流畅，而缺乏对底层领域模型的抽象封装要求，这可能导致 DSL 的「核」是缺乏有效设计的。在实践 DSL 时，我们在领域模型这层仍然要遵循最佳编程实践，比如本文 <code class=\"language-text\">2.weeks.later</code> 背后的 <code class=\"language-text\">Duration</code> 等领域模型实体。</p>\n<p>作者曾为内部一个历史悠久的庞大前端框架扩展了一个类似 jQuery 的流畅 API 的接口（2012 年勿喷），去掉注释仅仅花费了不到 <a href=\"https://github.com/genify/nej/blob/master/src/util/chain/NodeList.js\">500 行代码</a>，这个绝大部分归功于框架底层的深厚设计功底和一致性，而非我上层的 DSL 语法糖包装。</p>\n<p>此外在 DSL 设计中，语法和语义同样重要，上述诸多例子也证明了：语法的简洁不一定带来流畅性，必须要结合语义模型来设计。</p>\n<blockquote>\n<p>关于语法与语义：<code class=\"language-text\">a || b</code> 和 <code class=\"language-text\">a or b</code> 语法不同，但语义相同；而 <code class=\"language-text\">a &gt; b</code>（Java）和<code class=\"language-text\">a &gt; b</code>（Shell）语法相同，但语义不同</p>\n</blockquote>\n<p>这部分建议在外部 DSL 的设计工作中也同样重要。</p>\n<h4>编辑器支持</h4>\n<p>有些内部 DSL 依赖排版来达到最佳表现，绝大部分语言（包括外部 DSL）的自动格式化引擎都是基于语法树解析来实现的，但内部 DSL 就没那么幸运了，由于它在实际语法层面并没有定义，所以经常会发生在编辑器使用「Format Document」后前功尽弃的情况，这类现象在基于缩进的语言中会比较少。</p>\n<p>特殊的代码高亮就更难了，即使是自动补全，也需要一些额外的工作才能被支持。</p>\n<h2>小结</h2>\n<p>常规编程解决思路下表达更多的是「How」即如何实现的细节，牵扯进的表达式、语句和数据结构等编程元素会影响到领域工作者对本源问题的理解。而 DSL 的秘诀在于它强调表达是「What」，将原本的命令式编程转化为极致的声明式表述，使得 DSL 具备强大的自解释性（self-explanatory），从而提高编程效率，甚至可以赋能给没有编程经验的用户。</p>\n<p>本文主要针对内部DSL这个重要分支在前端的实践做了展开说明，并结合Javascript和前端领域的一些典型范例阐述了8种实现风格，并且强调这些风格并非独立的「银弹」，而是互为补充。</p>\n<p>本文也对一些迷思展开了讨论，我们探讨了 Javascript 做为内部 DSL 宿主语言的可行性，并强调了「DSL的设计指引比它的边界定义更应该受到关注」这一观点，最后引出一些内部 DSL 设计过程中的常见坑。</p>\n<h2>进一步阅读</h2>\n<p>请关注本文的第二部分 —— 外部 DSL，同时以下书籍可以帮助你进一步学习：</p>\n<ul>\n<li><a href=\"https://book.douban.com/subject/21964984/\">《领域特定语言》</a> - Martin Fowler</li>\n<li><a href=\"https://book.douban.com/subject/25741352/\">《领域专用语言实战》</a> - Debasish Ghosh</li>\n</ul>\n<h3>相关资料</h3>\n<ul>\n<li><a href=\"https://book.douban.com/subject/24536403/\">《代码的未来》</a> - 松本行弘</li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2011/06/birth_of_javascript.html\">Javascript诞生记</a> </li>\n<li><a href=\"https://blog.hellojs.org/declarative-programming-is-it-a-real-thing-e59fe5e893fd\">Declarative programming is it a real thing?</a> </li>\n<li><a href=\"https://draveness.me/dsl\">谈谈 DSL 以及 DSL 的应用（以 CocoaPods 为例）</a> </li>\n<li><a href=\"https://www.cnblogs.com/weidagang2046/archive/2011/10/30/2229293.html\">用流畅接口构造内部DSL</a></li>\n</ul>\n<blockquote>\n<p>本文发布自 <a href=\"https://github.com/x-orpheus\">网易云音乐前端团队</a>，文章未经授权禁止任何形式的转载。我们一直在招人，如果你恰好准备换工作，又恰好喜欢云音乐，那就 <a href=\"mailto:grp.music-fe@corp.netease.com\">加入我们</a>！</p>\n</blockquote>","frontmatter":{"title":"前端 DSL 实践指南（上）—— 内部 DSL","date":"2020-02-20","description":"本文作者由于工作经历上的特殊性，积累了一些关于前端 DSL 的实践经验（主要是外部 DSL），在所维护的开源项目中也有一些体现，同时作者在社区也有过一些不成体系的回答如《如何写一个类似 LESS 的编译工具》。这次我会尝试从前端开发的视角来完整探讨下 DSL 这个「难以细说」的议题。"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/dsl/","previous":{"fields":{"slug":"/catch-react-error/"},"frontmatter":{"title":"捕获 React 异常"}},"next":{"fields":{"slug":"/ssr-routing/"},"frontmatter":{"title":"支持动态路由的 React Server Side Rendering 实现"}}}}}