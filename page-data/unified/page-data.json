{"componentChunkName":"component---src-templates-blog-post-js","path":"/unified/","webpackCompilationHash":"1773a8c050ac4714f8ee","result":{"data":{"site":{"siteMetadata":{"title":"云音乐大前端专栏","author":"云音乐大前端团队","siteUrl":"https://musicfe.dev"}},"markdownRemark":{"id":"a01d0e11-d6de-5590-a04e-b63ce97fd4fc","excerpt":"作者：imyzf 概述 Content as structured data. \n—— unified 官网题词 unified 是一套文本处理相关的生态体系，结合其生态上的相关插件，能够处理 Markdown、HTML、自然语言等。而 unified…","html":"<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/12249606658/e8e5/d6d5/b526/126ccf59d7dc4636ef817760dcafd364.png\"></p>\n<blockquote>\n<p>作者：<a href=\"https://github.com/imyzf\">imyzf</a></p>\n</blockquote>\n<h2>概述</h2>\n<blockquote>\n<p>Content as structured data. <br>\n—— unified 官网题词</p>\n</blockquote>\n<p>unified 是一套文本处理相关的生态体系，结合其生态上的相关插件，能够处理 Markdown、HTML、自然语言等。而 unified 库本身又作为一个统一的执行接口，担任执行器的角色，调用其生态上相关的插件完成处理任务。</p>\n<p>从 <a href=\"https://unifiedjs.com\">unified 官网</a> 上可以看到，目前 unified 的使用非常广泛，包括 Prettier、Node.js 官网、Gatsby 都运用了 unified 的能力完成了一些功能。</p>\n<p><img src=\"https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/12203967253/cff4/abc4/3e6b/09023197df73332d8a4c7247fea08ae0.png\"></p>\n<p>图：unified 官网的使用举例</p>\n<p>常见的使用场景包括：</p>\n<ul>\n<li>基于 Markdown 生成 HTML 页面和站点</li>\n<li>Markdown/HTML 内容加工处理</li>\n<li>Markdown 语法检查、格式化</li>\n<li>作为底层库，封装特定场景的工具</li>\n</ul>\n<p>鉴于目前国内对 unified 体系的介绍文章非常少，本文将对 unified 的相关插件生态、工作原理作介绍，并对一些使用例子作解析，帮助读者了解 unified 体系的能力、原理和用途。</p>\n<h2>插件生态</h2>\n<p><img src=\"https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/12203966847/06a2/5cd4/c849/f85f6a8fa49b1d9b46d4f0d8d5db3437.png\"></p>\n<p>图：unified 生态相关插件</p>\n<h3>remark</h3>\n<p><a href=\"https://github.com/remarkjs/remark\">remark</a> 是 Markdown 相关的插件集合，提供了 Markdown 的解析、修改、转换为 HTML 等能力。</p>\n<p>目前提供的一些常用插件：</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/remark-parse\">remark-parse</a>: 提供解析 Markdown 的能力</li>\n<li><a href=\"https://github.com/remarkjs/remark-gfm\">remark-gfm</a>: 提供 GFM (GitHub flavored markdown) 支持</li>\n<li><a href=\"https://github.com/remarkjs/remark-lint\">remark-lint</a>: 提供 Markdown 的代码检查能力</li>\n<li><a href=\"https://github.com/remarkjs/remark-toc\">remark-toc</a>: 提供 Markdown 文档目录生成功能</li>\n<li><a href=\"https://github.com/remarkjs/remark-html\">remark-html</a> 提供将 Markdown 编译为 HTML 的能力</li>\n</ul>\n<p>完整的插件列表可以参考<a href=\"https://github.com/remarkjs/remark/blob/main/doc/plugins.md#list-of-plugins\">此处</a>，大约有 150 多个插件可供选择。</p>\n<p>我们可以在项目中使用这种便捷的方式调用 remark：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">remark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 一键初始化 Markdown 解析器</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">processSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'# Hello, world!'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 同步处理文本</span></code></pre></div>\n<p>等价于如下方式：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">unified</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用 unified 统一的接口</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>remarkParse<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 使用 Markdown 解析器插件</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>remarkStringify<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用 Markdown 文本序列化插件</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">processSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'# Hello, world!'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><img src=\"https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/12203965902/bf03/af16/c204/a00247f66bec98789fda351843dcce8e.png\"></p>\n<p>图：remark 使用和转换示例</p>\n<p>另外需要注意的是，GitHub 上目前有一个同名项目 <a href=\"https://github.com/remarkjs/remark\">gnab/remark</a>，其官网为 <a href=\"https://remarkjs.com/\">remarkjs.com</a>，虽然也是与 Markdown 相关的工具，但其与 unified 生态下的 remark 没有任何关系，本文提到的 remark 的官网为 <a href=\"https://remark.js.org/\">remark.js.org</a>，通过搜索引擎搜索相关资料时需要避免混淆。</p>\n<h3>rehype</h3>\n<p>与 remark 类似，<a href=\"https://github.com/rehypejs/rehype\">rehype</a> 是 HTML 相关的插件集合，提供了 HTML 的格式化、压缩、文档生成等能力。</p>\n<p>相比之下，rehype 的插件相对较少，只有 40 多个，详细的插件列表可以参考<a href=\"https://github.com/rehypejs/rehype/blob/main/doc/plugins.md\">插件列表文档</a></p>\n<p>同时，我们也可以使用<a href=\"https://www.npmjs.com/package/rehype-remark\">rehype-remark</a>和<a href=\"https://www.npmjs.com/package/remark-rehype\">remark-rehype</a>，实现两种语言的插件体系之间的互相转换。例如下面的例子，可以实现将 stdin 输入的 HTML 内容转换为 Markdown：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> unified <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'unified'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> stream <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'unified-stream'</span>\n<span class=\"token keyword\">import</span> rehypeParse <span class=\"token keyword\">from</span> <span class=\"token string\">'rehype-parse'</span>\n<span class=\"token keyword\">import</span> rehypeRemark <span class=\"token keyword\">from</span> <span class=\"token string\">'rehype-remark'</span>\n<span class=\"token keyword\">import</span> remarkStringify <span class=\"token keyword\">from</span> <span class=\"token string\">'remark-stringify'</span>\n\n<span class=\"token keyword\">const</span> processor <span class=\"token operator\">=</span> <span class=\"token function\">unified</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>rehypeParse<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 解析 HTML</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>rehypeRemark<span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 转换到 remark 体系</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>remarkStringify<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 将语法树转换为 Markdown 字符串</span>\n\nprocess<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>processor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>其他</h3>\n<p><a href=\"https://github.com/retextjs/retext\">retext</a> 和 <a href=\"https://github.com/redotjs/redot\">redot</a> 是两个比较小众的体系，使用量较少，开发也不如前述两个体系活跃，其用途如下：</p>\n<ul>\n<li>retext: 提供自然语言的处理能力，包括拼写检查、错误修正、可读性检查等</li>\n<li>redot: 提供 graphviz 的解析能力</li>\n</ul>\n<p>另外在 Markdown 领域，有两个命名非 <code class=\"language-text\">re</code> 开头的体系，<a href=\"https://github.com/mdx-js/mdx\">mdx</a> 和 <a href=\"https://github.com/micromark/micromark\">micromark</a>，分别对应特定的 Markdown 使用场景：</p>\n<ul>\n<li>mdx: 提供在 Markdown 文档中编写 JSX 的能力，实现在文档中引入各类组件，编写可交互的文档</li>\n<li>micromark: 一个极简的 Markdown 转换库，支持少量扩展插件，适合简单的 Markdown 转 HTML 场景，同时 remark 也复用了 micromark 的解析能力</li>\n</ul>\n<p>具体的信息可以查看项目文档了解，这里不再赘述。</p>\n<h2>工作原理</h2>\n<p>unified 的核心机制是基于 AST（abstract syntax trees，抽象语法树），在执行插件时 AST 会被传递给插件，可以对其进行各种处理。同时，也可以基于 AST 进行各种语言的转换，例如将 Markdown 文档解析后，转换为 HTML 进行处理，之后再转回 Markdown。</p>\n<p><img src=\"https://p5.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/12486937793/6339/ae27/ba60/6695fadf676bf7bc8bcfa3069686961c.png\"></p>\n<p>图：unified 工作流程</p>\n<p>例如我们可以在插件中遍历 AST，将所有 <code class=\"language-text\">heading</code> 节点打印出来：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">tree</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">,</span> <span class=\"token string\">'heading'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面例子中的 <code class=\"language-text\">visit</code> 方法来自 unist-util-visit 工具，提供了遍历节点的功能。unified 使用了一种称为 unist 或者 UST 的 AST 标准，使得相同的工具能够在不同的语言上使用。例如针对 Markdown 和 HTML 语言的 AST，由于他们基于相同的标准，我们可以使用同样的 <code class=\"language-text\">visit</code> API 实现同样的功能：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span>markdownAST<span class=\"token punctuation\">,</span> <span class=\"token string\">'images'</span><span class=\"token punctuation\">,</span> transformImages<span class=\"token punctuation\">)</span>\n<span class=\"token function\">visit</span><span class=\"token punctuation\">(</span>htmlAST<span class=\"token punctuation\">,</span> <span class=\"token string\">'img'</span><span class=\"token punctuation\">,</span> transformImgs<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>场景举例</h2>\n<p>接下来将列举一些基于 unified 生态的使用场景，帮助大家进一步了解其用途。</p>\n<h3>Node.js 官网</h3>\n<p>Node.js 官网主要在语法检查、文档构建两个方面使用了 unified：</p>\n<ul>\n<li>使用 remark-cli 检查 Markdown 文档，参考其 <a href=\"https://github.com/nodejs/nodejs.org/blob/main/package.json#L18\">package.json</a> 中的脚本配置</li>\n<li>使用 unified 进行文档构建，参考 <a href=\"https://github.com/nodejs/node/blob/master/tools/doc/generate.mjs\">generate.mjs</a> 中的代码</li>\n</ul>\n<h3>dumi</h3>\n<p><a href=\"https://d.umijs.org/zh-CN\">dumi</a> 是一款为组件开发场景定制的文档工具，其核心功能就是将 Markdown 文档转换为 HTML 页面。查看其源码，我们会发现其使用了 unified 作为转换器，在 <a href=\"https://github.com/umijs/dumi/blob/master/packages/preset-dumi/src/transformer/remark/index.ts\">remark/index.ts</a> 中引入了 unified，并调用了一些列自定义的或者社区提供的插件进行处理。</p>\n<p>由于使用了非常多的自定义插件，dumi 源码可以作为极佳的 unified 插件开发参考例子。例如参考 <a href=\"https://github.com/umijs/dumi/blob/master/packages/preset-dumi/src/transformer/remark/link.ts\">link.ts</a>，可以了解如何将 Markdown 中的外部链接，通过修改 AST，在生成的页面中增加一个链接小图标，提示用户这是一个指向外部站点的链接。</p>\n<p>文档源码：</p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token url\">[<span class=\"token content\">云音乐官网</span>](https://music.163.com/)</span></code></pre></div>\n<p>转换为：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>noopener noreferrer<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://music.163.com/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  云音乐官网\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>__dumi-default-external-link-icon<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>……<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3>react-markdown</h3>\n<p><a href=\"https://github.com/remarkjs/react-markdown\">react-markdown</a> 作为 remark 体系的一部分，是基于 unified 生态的上层封装，提供了一个能够渲染 Markdown 的 React 组件。在 React 框架中，比起直接使用 remark 将 Markdown 转换为 HTML 再使用 <code class=\"language-text\">dangerouslySetInnerHTML</code> 渲染，使用 react-markdown 更加安全可靠，使用方式也更加简单便捷。</p>\n<p><img src=\"https://p6.music.126.net/obj/wonDlsKUwrLClGjCm8Kx/12486746944/8939/d40a/1d71/8ce67df7efef7788d7d27077af47053e.png\"></p>\n<p>图：react-markdown 工作原理</p>\n<p>上图展示了 react-markdown 的工作原理，流程如下：</p>\n<ol>\n<li>通过 remark 将 Markdown 转换为对应的 AST —— mdast</li>\n<li>使用 remark 插件对 mdast 进行处理</li>\n<li>通过 remark-rehype 将 mdast 转换为 HTML 的 AST —— hast</li>\n<li>使用 rehype 插件对 hast 进行处理</li>\n<li>使用 React 组件渲染 hast 为 React 元素</li>\n</ol>\n<p>以上整个流程其实是 Markdown 渲染为 HTML 的通用处理流程 ，我们在实现类似的库时，也可以作为参考。</p>\n<h2>关于作者</h2>\n<p>目前 unified 生态总共有 333 个开源项目（截至 2022.01.05），其核心开发者为 Titus Wormer。从 Wormer 的<a href=\"https://wooorm.com/\">个人网站</a>可以了解到，他来自荷兰，毕业于阿姆斯特丹应用科学大学，并且曾经担任过该大学的讲师。作为一名全职开源贡献者，总共维护了 535 多个项目，其中有 50% 的时间精力投入到 unified 项目上。能够凭一己之力，对开源社区作出如此大的贡献，非常值得敬佩。关于他是如何管理 unified 组织的，可以参考 <a href=\"https://github.com/unifiedjs/collective\">unified collective</a> 文档作进一步了解。</p>\n<blockquote>\n<p>本文发布自 <a href=\"https://github.com/x-orpheus\">网易云音乐大前端团队</a>，文章未经授权禁止任何形式的转载。我们常年招收前端、iOS、Android，如果你准备换工作，又恰好喜欢云音乐，那就加入我们 grp.music-fe(at)corp.netease.com！</p>\n</blockquote>","frontmatter":{"title":"结构化文本处理利器 unified 生态介绍","date":"2022-01-24","description":"本文将对 unified 的相关插件生态、工作原理作介绍，并对一些使用例子作解析，帮助读者了解 unified 体系的能力、原理和用途。"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/unified/","previous":{"fields":{"slug":"/animation-perf/"},"frontmatter":{"title":"从浏览器渲染原理谈动画性能优化"}},"next":null}}}