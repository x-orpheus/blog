{"componentChunkName":"component---src-templates-blog-post-js","path":"/catch-react-error/","webpackCompilationHash":"6094ab385e61cbba192a","result":{"data":{"site":{"siteMetadata":{"title":"云音乐大前端专栏","author":"云音乐大前端团队","siteUrl":"https://musicfe.dev"}},"markdownRemark":{"id":"87c9484e-366a-5034-aaf1-122b2eb3b36f","excerpt":"此项目为云音乐营收组稳定性工程的前端部分，本文作者 章伟东，项目其他参与者赵祥涛 一个 bug…","html":"<img src=\"https://p1.music.126.net/yQQYPREBOFr9d_1MQJfLiQ==/109951164622691316.png\">\n<blockquote>\n<p>此项目为云音乐营收组稳定性工程的前端部分，本文作者 <a href=\"https://github.com/xff1874\">章伟东</a>，项目其他参与者<a href=\"https://sylvenas.github.io/\">赵祥涛</a></p>\n</blockquote>\n<h2>一个 bug 引发的血案</h2>\n<p>韩国某著名男子天团之前在我们平台上架了一张重磅数字专辑，本来是一件喜大普奔的好事，结果上架后投诉蜂拥而至。部分用户反馈页面打开就崩溃，紧急排查后发现真凶就是下面这段代码。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> isCreator<span class=\"token punctuation\">,</span> canSignOut<span class=\"token punctuation\">,</span> canSignIn <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>  supportCard<span class=\"token punctuation\">,</span> creator<span class=\"token punctuation\">,</span> fansList<span class=\"token punctuation\">,</span> visitorId<span class=\"token punctuation\">,</span> memberCount <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">getUserIcon</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>userType <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>i className<span class=\"token operator\">=</span><span class=\"token string\">\"icn u-svg u-svg-yyr_sml\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>authStatus <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>i className<span class=\"token operator\">=</span><span class=\"token string\">\"icn u-svg u-svg-vip_sml\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>expertTags <span class=\"token operator\">&amp;&amp;</span> creator<span class=\"token punctuation\">.</span>expertTags<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>i className<span class=\"token operator\">=</span><span class=\"token string\">\"icn u-svg u-svg-daren_sml\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n         <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n     <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>这行 <code class=\"language-text\">if (obj.expertTags &amp;&amp; creator.expertTags.length )</code> 里面的 <code class=\"language-text\">creator</code> 应该是 <code class=\"language-text\">obj</code>，由于手滑，不小心写错了。</p>\n<p>对于上面这种情况，<code class=\"language-text\">lint</code> 工具无法检测出来，因为 <code class=\"language-text\">creator</code> 恰好也是一个变量，这是一个纯粹的逻辑错误。</p>\n<p>后来我们紧急修复了这个 bug，一切趋于平静。事情虽然到此为止，但是有个声音一直在我心中回响 <strong>如何避免这种事故再次发生</strong>。 对于这种错误，堵是堵不住的，那么我们就应该思考设计一种兜底机制，能够隔离这种错误，保证在页面部分组件出错的情况下，不影响整个页面。</p>\n<p><span id = \"ein\"></span></p>\n<h2>ErrorBoundary 介绍</h2>\n<p>从 React 16 开始，引入了 Error Boundaries 概念，它可以捕获它的<strong>子组件</strong>中产生的错误，记录错误日志，并展示降级内容，具体 <a href=\"https://reactjs.org/docs/error-boundaries.html\">官网地址</a>。</p>\n<blockquote>\n<p>Error boundaries are React components that <strong>catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI</strong> instead of the component tree that crashed</p>\n</blockquote>\n<p>这个特性让我们眼前一亮，精神为之振奋，仿佛在黑暗中看到了一丝亮光。但是经过研究发现，<code class=\"language-text\">ErrorBoundary</code> 只能捕获子组件的 render 错误，有一定的局限性，以下是无法处理的情况：</p>\n<ul>\n<li><a href=\"https://github.com/facebook/react/issues/11409\">事件处理函数</a>（比如 onClick,onMouseEnter)</li>\n<li><a href=\"https://github.com/facebook/react/issues/11334\">异步代码</a>（如 requestAnimationFrame，setTimeout,promise)</li>\n<li>服务端渲染</li>\n<li>ErrorBoundary 组件本身的错误。</li>\n</ul>\n<p><span id=\"jump\"></span></p>\n<h3>如何创建一个 <code class=\"language-text\">ErrorBoundary</code> 组件</h3>\n<p>只要在 <code class=\"language-text\">React.Component</code> 组件里面添加 <code class=\"language-text\">static getDerivedStateFromError()</code> 或者 <code class=\"language-text\">componentDidCatch()</code> 即可。前者在错误发生时进行降级处理，后面一个函数主要是做日志记录，<a href=\"https://reactjs.org/docs/error-boundaries.html\">官方代码</a> 如下</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ErrorBoundary</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> hasError<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Update state so the next render will show the fallback UI.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> hasError<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidCatch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> errorInfo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// You can also log the error to an error reporting service</span>\n    <span class=\"token function\">logErrorToMyService</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">,</span> errorInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>hasError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// You can render any custom fallback UI</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Something went wrong<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到 <code class=\"language-text\">getDerivedStateFromError</code> 捕获子组件发生的错误，设置 <code class=\"language-text\">hasError</code> 变量，<code class=\"language-text\">render</code> 函数里面根据变量的值显示降级的ui。</p>\n<p>至此一个 ErrorBoundary 组件已经定义好了，使用时只要包裹一个子组件即可，如下。</p>\n<p><span id = \"errorwrap\"></span></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>ErrorBoundary<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>MyWidget <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ErrorBoundary<span class=\"token operator\">></span></code></pre></div>\n<h3>Error Boundaries 的普遍用法。</h3>\n<p>看到 Error Boundaries 的使用方法之后，大部分团队的都会遵循官方的用法，写一个 <code class=\"language-text\">errorBoundaryHOC</code>,然后包裹一下子组件。下面 scratch 工程的一个例子</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">errorBoundaryHOC</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Blocks'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n        mapStateToProps<span class=\"token punctuation\">,</span>\n        mapDispatchToProps\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Blocks<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其中 <code class=\"language-text\">Blocks</code> 是一个 UI 展示组件，<code class=\"language-text\">errorBoundaryHOC</code> 就是错误处理组件，\n具体源码可以看 <a href=\"https://github.com/LLK/scratch-gui/blob/develop/src/containers/blocks.jsx\">这里</a></p>\n<h3>普遍用法的困境</h3>\n<p>上面的方法在 export 的时候包裹一个 <code class=\"language-text\">errorBoundaryHOC</code>。\n对于新开发的代码，使用比较方便，但是对于已经存在的代码，会有比较大的问题。</p>\n<p>因为 export 的格式有 <a href=\"https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export\">多种</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassName</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> name1<span class=\"token punctuation\">,</span> name2<span class=\"token punctuation\">,</span> …<span class=\"token punctuation\">,</span> nameN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> variable1 <span class=\"token keyword\">as</span> name1<span class=\"token punctuation\">,</span> variable2 <span class=\"token keyword\">as</span> name2<span class=\"token punctuation\">,</span> …<span class=\"token punctuation\">,</span> nameN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> name1 <span class=\"token keyword\">from</span> …</code></pre></div>\n<p>所以如果对原有代码用 <code class=\"language-text\">errorBoundaryHOC</code> 进行封装，会改变原有的代码结构，如果要后续不再需要封装删除也很麻烦，方案实施成本高，非常棘手。</p>\n<p>所以，我们在考虑是否有一种方法可以比较方便的处理上面的问题。</p>\n<h2>青铜时代 - BabelPlugin</h2>\n<p>在碰到上诉困境问题之后，我们的思路是：通过脚手架自动对子组件包裹错误处理组件。设计框架如下图：</p>\n<p><img src=\"https://p1.music.126.net/tysmu4OsQHxfA8SFMPVvlg==/109951164599347997.png\"></p>\n<p>简而言之分下面几步：</p>\n<ol>\n<li>判断是否是 React 16 版本</li>\n<li>读取配置文件</li>\n<li>检测是否已经包裹了 <code class=\"language-text\">ErrorBoundary</code> 组件。 如果没有，走 patch 流程。如果有，根据 <code class=\"language-text\">force</code> 标签判断是否重新包裹。</li>\n<li>\n<p>走包裹组件流程（图中的 patch 流程）：</p>\n<blockquote>\n<p>a. 先引入错误处理组件</p>\n</blockquote>\n<blockquote>\n<p>b. 对子组件用 <code class=\"language-text\">ErrorBoundary</code> 包裹</p>\n</blockquote>\n</li>\n</ol>\n<p>配置文件如下（.catch-react-error-config.json）：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"sentinel\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"imports\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"import ServerErrorBoundary from '$components/ServerErrorBoundary'\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"errorHandleComponent\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ServerErrorBoundary\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"filter\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/actual/\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"sourceDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test/fixtures/wrapCustomComponent\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>patch 前源代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>CustomComponent <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>读取配置文件 patch 之后的代码为：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//isCatchReactError</span>\n<span class=\"token keyword\">import</span> ServerErrorBoundary <span class=\"token keyword\">from</span> <span class=\"token string\">\"$components/ServerErrorBoundary\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>ServerErrorBoundary isCatchReactError<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>CustomComponent <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ServerErrorBoundary<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到头部多了</p>\n<p><code class=\"language-text\">import ServerErrorBoundary from &#39;$components/ServerErrorBoundary&#39;</code></p>\n<p>然后整个组件也被 <code class=\"language-text\">ServerErrorBoundary</code> 包裹，<code class=\"language-text\">isCatchReactError</code> 用来标记位，主要是下次 patch 的时候根据这个标记位做对应的更新，防止被引入多次。</p>\n<p>这个方案借助了 <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md\">babel plugin</a>，在代码编译阶段自动导入 ErrorBoundary 并批量组件包裹，核心代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> babelTemplate <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@babel/template\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> t <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"babel-types\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> visitor <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Program<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 在文件头部导入 ErrorBoundary</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// string 代码转换为 AST</span>\n      <span class=\"token keyword\">const</span> impstm <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">.</span><span class=\"token function\">ast</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"import ErrorBoundary from '$components/ErrorBoundary'\"</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>impstm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/**\n   * 包裹 return jsxElement\n   * @param {*} path\n   */</span>\n  <span class=\"token function\">ReturnStatement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> parentFunc <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">getFunctionParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> oldJsx <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>argument<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">!</span>oldJsx <span class=\"token operator\">||</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>parentFunc<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>key <span class=\"token operator\">||</span> parentFunc<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">.</span>name <span class=\"token operator\">!==</span> <span class=\"token string\">\"render\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n        oldJsx<span class=\"token punctuation\">.</span>type <span class=\"token operator\">!==</span> <span class=\"token string\">\"JSXElement\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 创建被 ErrorBoundary 包裹之后的组件树</span>\n    <span class=\"token keyword\">const</span> openingElement <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXOpeningElement</span><span class=\"token punctuation\">(</span>\n      t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXIdentifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ErrorBoundary\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> closingElement <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXClosingElement</span><span class=\"token punctuation\">(</span>\n      t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXIdentifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ErrorBoundary\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> newJsx <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">JSXElement</span><span class=\"token punctuation\">(</span>openingElement<span class=\"token punctuation\">,</span> closingElement<span class=\"token punctuation\">,</span> oldJsx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 插入新的 jxsElement, 并删除旧的</span>\n    <span class=\"token keyword\">let</span> newReturnStm <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">returnStatement</span><span class=\"token punctuation\">(</span>newJsx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newReturnStm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>此方案的核心是对子组件用自定义组件进行包裹，只不过这个自定义组件刚好是 ErrorBoundary。如果需要，自定义组件也可以是其他组件比如 log 等。</p>\n<p>完整 GitHub 代码实现 <a href=\"https://github.com/xff1874/react-error-sentinel\">这里</a></p>\n<p>虽然这种方式实现了错误的捕获和兜底方案，但是非常复杂，用起来也麻烦，要配置 Webpack 和 <code class=\"language-text\">.catch-react-error-config.json</code> 还要运行脚手架，效果不令人满意。</p>\n<h2>黄金时代 - Decorator</h2>\n<p>在上述方案出来之后，很长时间都找不到一个优雅的方案，要么太难用（babelplugin）, 要么对于源码的改动太大（HOC）, 能否有更优雅的实现。</p>\n<p>于是就有了装饰器 (Decorator) 的方案。</p>\n<p>装饰器方案的源码实现用了 TypeScript，使用的时候需要配合 Babel 的插件转为 ES 的版本，具体看下面的使用说明</p>\n<p>TS 里面提供了装饰器工厂，类装饰器，方法装饰器，访问器装饰器，属性装饰器，参数装饰器等多种方式，结合项目特点，我们用了类装饰器。</p>\n<h3>类装饰器介绍</h3>\n<blockquote>\n<p>类装饰器在类声明之前被声明（紧靠着类声明）。 类装饰器应用于类构造函数，可以用来监视，修改或替换类定义。</p>\n</blockquote>\n<p>下面是一个例子。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">SelfDriving</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">constructorFunction<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Function</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-- decorator function invoked --'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    constructorFunction<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>selfDrivable <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n@SelfDriving\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> _make<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">make<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_make <span class=\"token operator\">=</span> make<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> car<span class=\"token punctuation\">:</span> Car <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nissan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">selfDriving: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>car<span class=\"token punctuation\">[</span><span class=\"token string\">'selfDrivable'</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token operator\">--</span> decorator <span class=\"token keyword\">function</span> invoked <span class=\"token operator\">--</span>\nCar <span class=\"token punctuation\">{</span> _make<span class=\"token punctuation\">:</span> <span class=\"token string\">'Nissan'</span> <span class=\"token punctuation\">}</span>\nselfDriving<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span></code></pre></div>\n<p>上面代码先执行了 <code class=\"language-text\">SelfDriving</code> 函数，然后 car 也获得了 <code class=\"language-text\">selfDrivable</code> 属性。</p>\n<p>可以看到 Decorator 本质上是一个函数，也可以用<code class=\"language-text\">@+函数名</code>装饰在类，方法等其他地方。 装饰器可以改变类定义，获取动态数据等。</p>\n<p>完整的 TS 教程 Decorator 请参照 <a href=\"https://www.tslang.cn/docs/handbook/decorators.html\">官方教程</a></p>\n<p>于是我们的错误捕获方案设计如下</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">@<span class=\"token function\">catchreacterror</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>click me<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">catchreacterror</code> 函数的参数为 <code class=\"language-text\">ErrorBoundary</code> 组件，用户可以使用自定义的 <code class=\"language-text\">ErrorBoundary</code>，如果不传递则使用默认的 <code class=\"language-text\">DefaultErrorBoundary</code> 组件；</p>\n<p><code class=\"language-text\">catchreacterror</code> 核心代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> forwardRef <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">catchreacterror</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">Boundary <span class=\"token operator\">=</span> DefaultErrorBoundary</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">InnerComponent</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">WrapperComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> forwardedRef <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>Boundary<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>InnerComponent <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>this<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">}</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>forwardedRef<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Boundary<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>返回值为一个 HOC，使用 <code class=\"language-text\">ErrorBoundary</code> 包裹子组件。</p>\n<h3>增加服务端渲染错误捕获</h3>\n<p>在 <a href=\"#ein\">介绍</a> 里面提到，对于服务端渲染，官方的 <code class=\"language-text\">ErrorBoundary</code> 并没有支持，所以对于 SSR 我们用 <code class=\"language-text\">try/catch</code> 做了包裹：</p>\n<ol>\n<li>先判断是否是服务端 <code class=\"language-text\">is_server</code>：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">is_server</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> window <span class=\"token operator\">!==</span> <span class=\"token string\">\"undefined\"</span> <span class=\"token operator\">&amp;&amp;</span> window<span class=\"token punctuation\">.</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li>包裹</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">is_server</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> originalRender <span class=\"token operator\">=</span> <span class=\"token class-name\">InnerComponent</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">InnerComponent</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">originalRender</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Something is Wrong<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最后，就形成了 <code class=\"language-text\">catch-react-error</code> 这个库，方便大家捕获 React 错误。</p>\n<p><span id =\"usage\"></span></p>\n<h3>catch-react-error 使用说明</h3>\n<h4>1. 安装 <code class=\"language-text\">catch-react-error</code></h4>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm install catch-react-error</code></pre></div>\n<h4>2. 安装 ES7 Decorator babel plugin</h4>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm install --save-dev @babel/plugin-proposal-decorators\nnpm install --save-dev @babel/plugin-proposal-class-properties</code></pre></div>\n<p>添加 babel plugin</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"@babel/plugin-proposal-decorators\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"legacy\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"@babel/plugin-proposal-class-properties\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"loose\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>3. 导入 catch-react-error</h4>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> catchreacterror <span class=\"token keyword\">from</span> <span class=\"token string\">\"catch-react-error\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>4. 使用 <code class=\"language-text\">@catchreacterror</code> Decorator</h4>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">@<span class=\"token function\">catchreacterror</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>click me<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">catchreacterror</code> 函数接受一个参数：<code class=\"language-text\">ErrorBoundary</code>（不提供则默认采用 <code class=\"language-text\">DefaultErrorBoundary</code>)</p>\n<h4>5. 使用 <code class=\"language-text\">@catchreacterror</code> 处理 FunctionComponent</h4>\n<p>上面是对于<code class=\"language-text\">ClassComponent</code>做的处理，但是有些人喜欢用函数组件，这里也提供使用方法，如下。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Content</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> SafeContent <span class=\"token operator\">=</span> <span class=\"token function\">catchreacterror</span><span class=\"token punctuation\">(</span>DefaultErrorBoundary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>header className<span class=\"token operator\">=</span><span class=\"token string\">\"App-header\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>这是正常展示内容<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>header<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>SafeContent<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>6. 如何创建自己所需的 Custom Error Boundaries</h4>\n<p>参考上面 <a href=\"#jump\">如何创建一个 <code class=\"language-text\">ErrorBoundary</code> 组件</a>, 然后改为自己所需即可，比如在 <code class=\"language-text\">componentDidCatch</code> 里面上报错误等。</p>\n<p>完整的 GitHub 代码在此 <a href=\"https://github.com/x-orpheus/catch-react-error\">catch-react-error</a>。</p>\n<blockquote>\n<p>本文发布自 <a href=\"https://github.com/x-orpheus\">网易云音乐前端团队</a>，文章未经授权禁止任何形式的转载。我们一直在招人，如果你恰好准备换工作，又恰好喜欢云音乐，那就 <a href=\"mailto:grp.music-fe@corp.netease.com\">加入我们</a>！</p>\n</blockquote>","frontmatter":{"title":"捕获 React 异常","date":"2020-01-14","description":"韩国某著名男子天团之前在我们平台上架了一张重磅数字专辑，本来是一件喜大普奔的好事，结果上架后投诉蜂拥而至。部分用户反馈页面打开就崩溃，紧急排查后发现真凶就是下面这段代码。"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/catch-react-error/","previous":{"fields":{"slug":"/web-audio/"},"frontmatter":{"title":"用 Web 实现一个简易的音频编辑器"}},"next":{"fields":{"slug":"/dsl/"},"frontmatter":{"title":"前端 DSL 实践指南（上）—— 内部 DSL"}}}}}