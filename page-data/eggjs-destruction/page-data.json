{"componentChunkName":"component---src-templates-blog-post-js","path":"/eggjs-destruction/","webpackCompilationHash":"1773a8c050ac4714f8ee","result":{"data":{"site":{"siteMetadata":{"title":"云音乐大前端专栏","author":"云音乐大前端团队","siteUrl":"https://musicfe.dev"}},"markdownRemark":{"id":"85e0417c-faee-559c-a87a-9e9a2eb543f3","excerpt":"Eggjs_logo 阅读本文前，请先浏览Eggjs 官方例子和 了解Koajs 本文作者：东东章 开始 例子 官方给了这样一个例子，手动搭建 Hacker News…","html":"<p><img src=\"https://zos.alipayobjects.com/rmsportal/JFKAMfmPehWfhBPdCjrw.svg\" alt=\"Eggjs_logo\"></p>\n<p>阅读本文前，请先浏览<a href=\"https://eggjs.org/zh-cn/intro/quickstart.html\">Eggjs 官方例子</a>和 了解<a href=\"https://koajs.com/\">Koajs</a></p>\n<blockquote>\n<p>本文作者：<a href=\"https://www.zhihu.com/people/huo-hai-jin-xing-shi\">东东章</a></p>\n</blockquote>\n<h2>开始</h2>\n<p><img src=\"https://cloud.githubusercontent.com/assets/227713/22960991/812999bc-f37d-11e6-8bd5-a96ca37d0ff2.png\" alt=\"例子\"></p>\n<p>官方给了这样一个例子，手动搭建 Hacker News。</p>\n<p>当我们看到这个页面的时候，不要着急往下看教程。 先自我思考下如何实现这个页面，要用到哪些技术：</p>\n<ol>\n<li>路由处理。我们需要一个角色处理接受 <code class=\"language-text\">/news</code> 请求，除此之外，一般还有 <code class=\"language-text\">/</code> 默认首页，也就是说至少 2 个 URL。</li>\n<li>页面展示。这里可以用模板，也可以直接自己拼接 HTML 元素。nodejs 模板有<a href=\"https://pugjs.org/api/getting-started.html\">Pug</a>，<a href=\"https://ejs.co/\">EJS</a>，<a href=\"https://handlebarsjs.com/\">Handlebarsjs</a>等多个模板。</li>\n<li>取数问题。有一个角色处理请求并拿到返回的数据。</li>\n<li>合并数据。将模板和取到的数据结合起来，显示最终的结果。</li>\n</ol>\n<h2>MVC</h2>\n<p>在服务端有个很经典的 MVC 设计模式来解决这类问题。</p>\n<p><img src=\"https://developer.mozilla.org/en-US/docs/Glossary/MVC/model-view-controller-light-blue.png\" alt=\"mvc\"></p>\n<ol>\n<li>Modal: 管理数据和业务逻辑。通常细分为 service (业务逻辑) 和 dao (数据库管理) 两层。</li>\n<li>View： 布局和页面展示。</li>\n<li>Controller：将相关请求路由到对应的 Modal 和 View。</li>\n</ol>\n<p>下面以<code class=\"language-text\">Java Spring MVC</code>为例</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GreetingController</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/greeting\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"ownerId\"</span><span class=\"token punctuation\">,</span> required<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> defaultValue<span class=\"token operator\">=</span><span class=\"token string\">\"World\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> ownerId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Model</span> model<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> ownerService<span class=\"token punctuation\">.</span><span class=\"token function\">findOwner</span><span class=\"token punctuation\">(</span>ownerId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmodel<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"greeting\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>模板<code class=\"language-text\">greeting.html</code></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\"><span class=\"token namespace\">th:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>Hello, ' + ${name} + '!'<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ol>\n<li>首先用注解 <code class=\"language-text\">@Controller</code> 定义了一个 <code class=\"language-text\">GreetingController</code> 类。</li>\n<li><code class=\"language-text\">@GetMapping(&quot;/greeting&quot;)</code> 接受了 <code class=\"language-text\">/greeting</code>，并交给 <code class=\"language-text\">public String greeting</code> 处理，这块属于 Controller 层。</li>\n<li><code class=\"language-text\">String name = ownerService.findOwner(ownerId);model.addAttribute(&quot;name&quot;, name);</code> 获取数据，属于 Modal 层。</li>\n<li><code class=\"language-text\">return &quot;greeting&quot;;</code> 返回对应模板 (View 层)，然后与取得数据结合形成最终结果。</li>\n</ol>\n<p>有了上面的经验之后，接下来 我们将目光转向 Eggjs。我们可以根据上面的 MVC 架构，完成给出的例子。</p>\n<p>因为实际上是有两个页面，一个是<code class=\"language-text\">/news</code>, 另外一个是<code class=\"language-text\">/</code>, 我们首先从首页<code class=\"language-text\">/</code>的开始。</p>\n<p>先定义一个 Controller.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// app/controller/home.js</span>\n\n<span class=\"token keyword\">const</span> Controller <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'egg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Controller<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HomeController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token string\">'Hello world'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> HomeController<span class=\"token punctuation\">;</span></code></pre></div>\n<p>用 CJS 的标准先引入框架的 Controller，定义一个了<code class=\"language-text\">HomeController</code>类，并有方法<code class=\"language-text\">index</code>。</p>\n<p>类已经定义好，接下来就是实例化阶段。</p>\n<p>如果熟悉 Koajs 的开发，一般会用 new 关键字</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如果熟悉 Java 开发，一般会用注解来实例化，比如下面的 person 用了<code class=\"language-text\">@Autowired</code> 这个注解来实现自动实例化 。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Customer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>                               \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Person</span> person<span class=\"token punctuation\">;</span>                   \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> type<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>从上面的例子看，发现注解不但能处理请求，同时也能实例对象，非常方便。</p>\n<p>ES7 里面有个也有类似的概念装饰器 <a href=\"https://github.com/tc39/proposal-decorators\">Decorators</a>，然后配合 <a href=\"https://jkchao.github.io/typescript-book-chinese/tips/metadata.html\">reflect-metadata</a>实现类似效果，这也是当前 Node 框架的标配做法。</p>\n<p>然而，因为种种原因，Eggjs 即没有让你自己直接 new 一个实例，也没有用装饰器方法，而是自己实现了一套实例初始化规则：</p>\n<blockquote>\n<p>它会读取当前的文件，然后根据文件名初始化一个实例，最后绑定到内置基础对象上。</p>\n</blockquote>\n<p>比如上面的<code class=\"language-text\">app/controller/home.js</code>, 会产生一个 home 实例。因为是 Controller 角色，所以会绑定到 contoller 这个内置对象上。同时 contoller 对象也是内置 app 对象的一部分，更多的内置对象可以看<a href=\"https://eggjs.org/zh-cn/basics/objects.html\">这里</a>。</p>\n<p>总的来说，基本上所有的实例化对象都被绑定到 app 和 ctx 两个内置对象上了，访问规则为<code class=\"language-text\">this.(app|ctx).类型(controller|service...).自己定义的文件名.方法名</code>。</p>\n<p>请求方面，Eggjs 用一个 router 对象来处理</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// app/router.js</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">app</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> router<span class=\"token punctuation\">,</span> controller <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> app<span class=\"token punctuation\">;</span>\n  router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> controller<span class=\"token punctuation\">.</span>home<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上面的代码指 router 将 / 请求交由 home 实例的 index 方法处理。</p>\n<p>文件目录规则也是按照约定放置</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">egg<span class=\"token operator\">-</span>example\n├── app\n│   ├── controller\n│   │   └── home<span class=\"token punctuation\">.</span>js\n│   └── router<span class=\"token punctuation\">.</span>js\n├── config\n│   └── config<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">.</span>js\n└── <span class=\"token keyword\">package</span><span class=\"token punctuation\">.</span>json</code></pre></div>\n<p>app 目录放置了所有与其相关的子元素目录。</p>\n<p>至此，我们完成了首页的工作，接下来考虑 /news 列表页。</p>\n<h3>列表页</h3>\n<p>同理，我们先定义 MVC 里面的 C，然后处理剩下两个角色。</p>\n<p>有了上面的经验，我们先创建一个 NewsController 类的 list 方法，然后在 router.js 添加对 /news 的处理，指定到对应的方法，如下。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// app/controller/news.js</span>\n<span class=\"token keyword\">const</span> Controller <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'egg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Controller<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NewsController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> dataList <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      list<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">:</span> <span class=\"token string\">'this is news 1'</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">:</span> <span class=\"token string\">'/news/1'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">:</span> <span class=\"token string\">'this is news 2'</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">:</span> <span class=\"token string\">'/news/2'</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'news/list.tpl'</span><span class=\"token punctuation\">,</span> dataList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> NewsController<span class=\"token punctuation\">;</span></code></pre></div>\n<p>数据 dataList 先写死，后续用 service 替换。\n<code class=\"language-text\">this.ctx.render(&#39;news/list.tpl&#39;, dataList)</code>这里是模板与数据的结合。</p>\n<p><code class=\"language-text\">news/list.tpl</code>属于 view，根据上面我们所知的命名规范，完整目录路径应该是<code class=\"language-text\">app/view/news/list.tpl</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// app/router.js 添加了/news请求路径，指定news对象的list对象处理</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">app</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> router<span class=\"token punctuation\">,</span> controller <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> app<span class=\"token punctuation\">;</span>\n  router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> controller<span class=\"token punctuation\">.</span>home<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/news'</span><span class=\"token punctuation\">,</span> controller<span class=\"token punctuation\">.</span>news<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>模板渲染。</h3>\n<p>根据 MVC 模型，现在我们已经有了 C，剩下就是 M 和 V，M 数据已经写死，先处理 View。</p>\n<p>之前说过，nodejs 模板有<a href=\"https://pugjs.org/api/getting-started.html\">Pug</a>,<a href=\"https://ejs.co/\">Ejs</a>，<a href=\"https://handlebarsjs.com/\">handlebarsjs</a>,<a href=\"https://mozilla.github.io/nunjucks/\">Nunjucks</a>等多种。</p>\n<p>有时候在项目中要根据情况来从多个模板选择具体某个，因此需要框架做到：</p>\n<ol>\n<li>声明多个模板类型。</li>\n<li>配置具体使用某个模板。</li>\n</ol>\n<p>为了更好的管理，声明和使用要分开，配置一般放在 config 目录下，所以有了<code class=\"language-text\">config/plugin.js</code>和<code class=\"language-text\">config/config.default.js</code>。前者做定义，后者具体配置。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// config/plugin.js 声明了2个view模板</span>\nexports<span class=\"token punctuation\">.</span>nunjucks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  enable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">package</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'egg-view-nunjucks'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span>ejs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  enable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">package</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'egg-view-ejs'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// config/config.default.js 具体配置使用某个模板。</span>\nexports<span class=\"token punctuation\">.</span>view <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  defaultViewEngine<span class=\"token punctuation\">:</span> <span class=\"token string\">'nunjucks'</span><span class=\"token punctuation\">,</span>\n  mapping<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'.tpl'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'nunjucks'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>然后写一个<code class=\"language-text\">nunjucks</code>的具体模板的具体内容如下</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// app/view/news/list.tpl</span>\n<span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>Hacker News<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>link rel<span class=\"token operator\">=</span><span class=\"token string\">\"stylesheet\"</span> href<span class=\"token operator\">=</span><span class=\"token string\">\"/public/css/news.css\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>ul <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"news-view view\"</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> list <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span>li <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"item\"</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"{{ item.url }}\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> item<span class=\"token punctuation\">.</span>title <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endfor <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></code></pre></div>\n<p>下面处理 service，取名为 news.js 文件路径参照上面，放在 app 目录的子目录 service 下面。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// app/service/news.js </span>\n<span class=\"token keyword\">const</span> Service <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'egg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Service<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NewsService</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Service</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">page <span class=\"token operator\">=</span> <span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// read config</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> serverUrl<span class=\"token punctuation\">,</span> pageSize <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>news<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// use build-in http client to GET hacker-news api</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">:</span> idList <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">curl</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>serverUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/topstories.json</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        orderBy<span class=\"token punctuation\">:</span> <span class=\"token string\">'\"$key\"'</span><span class=\"token punctuation\">,</span>\n        startAt<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>pageSize <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>page <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        endAt<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>pageSize <span class=\"token operator\">*</span> page <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      dataType<span class=\"token punctuation\">:</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// parallel GET detail</span>\n    <span class=\"token keyword\">const</span> newsList <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>\n      Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>idList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>serverUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/item/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>idList<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.json</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">curl</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> dataType<span class=\"token punctuation\">:</span> <span class=\"token string\">'json'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> newsList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> NewsService<span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">const { serverUrl, pageSize } = this.config.news;</code> 这行有 2 个分页参数，具体应该配置在哪里？</p>\n<p>根据我们上面的经验，<code class=\"language-text\">config.default.js</code>配置了具体模板使用参数，因此这里就是一个比较合适的地方。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// config/config.default.js</span>\n<span class=\"token comment\">// 添加 news 的配置项</span>\nexports<span class=\"token punctuation\">.</span>news <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  pageSize<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n  serverUrl<span class=\"token punctuation\">:</span> <span class=\"token string\">'https://hacker-news.firebaseio.com/v0'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>service 有了，现在是把固定写死的数据改为动态取数的模式，修改对应的如下</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// app/controller/news.js</span>\n<span class=\"token keyword\">const</span> Controller <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'egg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Controller<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NewsController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> page <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>page <span class=\"token operator\">||</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> newsList <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> ctx<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>news<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'news/list.tpl'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> list<span class=\"token punctuation\">:</span> newsList <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> NewsController<span class=\"token punctuation\">;</span></code></pre></div>\n<p>这行<code class=\"language-text\">ctx.service.news.list(page)</code>, 可以发现 service 不是像 controller 一样绑定在 app 上，而是 ctx 上，这是有意为之，具体看<a href=\"https://github.com/eggjs/egg/issues/2453\">讨论</a></p>\n<p>至此，基本上完成了我们的整个页面。</p>\n<h3>目录结构</h3>\n<p>当我们完成上面的工作之后，看一下完整的目录规范</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">egg<span class=\"token operator\">-</span>project\n├── <span class=\"token keyword\">package</span><span class=\"token punctuation\">.</span>json\n├── app<span class=\"token punctuation\">.</span><span class=\"token function\">js</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n├── agent<span class=\"token punctuation\">.</span><span class=\"token function\">js</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n├── app\n<span class=\"token operator\">|</span>   ├── router<span class=\"token punctuation\">.</span>js\n│   ├── controller\n│   <span class=\"token operator\">|</span>   └── home<span class=\"token punctuation\">.</span>js\n│   ├── <span class=\"token function\">service</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n│   <span class=\"token operator\">|</span>   └── user<span class=\"token punctuation\">.</span>js\n│   ├── <span class=\"token function\">middleware</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n│   <span class=\"token operator\">|</span>   └── response_time<span class=\"token punctuation\">.</span>js\n│   ├── <span class=\"token function\">schedule</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n│   <span class=\"token operator\">|</span>   └── my_task<span class=\"token punctuation\">.</span>js\n│   ├── <span class=\"token keyword\">public</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n│   <span class=\"token operator\">|</span>   └── reset<span class=\"token punctuation\">.</span>css\n│   ├── <span class=\"token function\">view</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n│   <span class=\"token operator\">|</span>   └── home<span class=\"token punctuation\">.</span>tpl\n│   └── <span class=\"token function\">extend</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n│       ├── helper<span class=\"token punctuation\">.</span><span class=\"token function\">js</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n│       ├── request<span class=\"token punctuation\">.</span><span class=\"token function\">js</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n│       ├── response<span class=\"token punctuation\">.</span><span class=\"token function\">js</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n│       ├── context<span class=\"token punctuation\">.</span><span class=\"token function\">js</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n│       ├── application<span class=\"token punctuation\">.</span><span class=\"token function\">js</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n│       └── agent<span class=\"token punctuation\">.</span><span class=\"token function\">js</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n├── config\n<span class=\"token operator\">|</span>   ├── plugin<span class=\"token punctuation\">.</span>js\n<span class=\"token operator\">|</span>   ├── config<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">.</span>js\n│   ├── config<span class=\"token punctuation\">.</span>prod<span class=\"token punctuation\">.</span>js\n<span class=\"token operator\">|</span>   ├── config<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span><span class=\"token function\">js</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>   ├── config<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span><span class=\"token function\">js</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>   └── config<span class=\"token punctuation\">.</span>unittest<span class=\"token punctuation\">.</span><span class=\"token function\">js</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n└── test\n    ├── middleware\n    <span class=\"token operator\">|</span>   └── response_time<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>js\n    └── controller\n        └── home<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>js</code></pre></div>\n<p>第一次看到这个的时候，会有一些困扰，为什么有了 app 目录，还有 agent.js 和 app.js， schedule 目录又是什么， config 目录下面一大堆东西是什么。</p>\n<p>先说 config 目录，\nplugin.js 之前说过是定义插件的。</p>\n<p>下面一堆 config.xxx.js 到底是个什么东东？</p>\n<p>我们先看下普通 webpack 的配置，一般有三个文件。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">scripts\n├── webpack<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>js\n├── webpack<span class=\"token punctuation\">.</span>dev<span class=\"token punctuation\">.</span>js\n└── webpack<span class=\"token punctuation\">.</span>prod<span class=\"token punctuation\">.</span>js</code></pre></div>\n<p>在 webpack.dev.js 和 webpack.prod.js 里面，我们通过 webpack-merge <strong>手动</strong>合并 webpack.common.js 。</p>\n<p>而在 Eggjs 里面会<strong>自动</strong>合并 config.default.js, 这在开始的时候确实让人困扰，比如当你环境是 prod 时候，config.prod.js 会自动合并 config.default.js。</p>\n<p>环境通过<code class=\"language-text\">EGG_SERVER_ENV=prod npm start</code>指定，更多说明参见<a href=\"https://eggjs.org/zh-cn/basics/config.html\">配置</a></p>\n<p>app 目录下面 router.js, controller,service,view 等目录已经清楚，middleware 目录放置的是 Koajs 的中间件，extend 目录是对<a href=\"https://eggjs.org/zh-cn/basics/extend.html\">原生对象</a>的扩展，我们一些常用的方法一般会放在 util.js 文件中，这里对应的是 helper.js。</p>\n<p>接下来说下 app.js , agent.js 和 app/schedule ，这三者的关系。</p>\n<p>当我们在本地开发阶，一般只会起一个实例，通常用<code class=\"language-text\">node app.js</code> 启动。\n但是我们在部署的时候，一般会有多个，通常用 pm2 来管理，如<code class=\"language-text\">pm2 start app.js</code>。一个实例对应一个进程。</p>\n<p>而 Eggjs 自己实现了一套多进程管理方式，分别有 Master、Agent、Worker 三个角色。</p>\n<p>Master: 数量 1，性能稳定，不做具体工作，负责其他两者的管理工作，类似 pm2 。</p>\n<p>Agent: 数量 1, 性能稳定，一些后端工作，比如长连接监听后端配置，然后做一些通知。</p>\n<p>Worker: 性能不稳定，数量多个 (默认核数)，业务代码跑这个上面。</p>\n<p>那上面 app.js (包括 app 目录) 等就是跑在 worker 进程下，会有多个。\nagent.js 跑在 Agent 进程下。</p>\n<p>以本人电脑<code class=\"language-text\">MacBook Pro (13-inch, M1, 2020)</code>为例，这电脑有 8 核，所以基本上会有 8 个 worker 进程，一个 agent 和一个 master 进程。</p>\n<p>下图可以看得更清晰，可以看到起了 8 个<code class=\"language-text\">app_worker.js</code>, 一个<code class=\"language-text\">agent_work.js</code>, 还有一个 master 进程\n<img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/11313742054/8626/0016/9f76/ade08e2bf57fb423f5af7e0925b6eccc.png\" alt=\"egg_progress\"></p>\n<p>那 schedule 又是什么呢？这里是 worker 进程执行定时任务。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// app/schedule/force_refresh.js</span>\nexports<span class=\"token punctuation\">.</span>schedule <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  interval<span class=\"token punctuation\">:</span> <span class=\"token string\">'10m'</span><span class=\"token punctuation\">,</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'all'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 所有worker进程，8个都会执行</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span>schedule <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  interval<span class=\"token punctuation\">:</span> <span class=\"token string\">'10s'</span><span class=\"token punctuation\">,</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'worker'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 每台机器上只有一个 worker 会执行定时任务，每次执行定时任务的 worker 随机。</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>schedule 和 agent.js 根据自己需要来判断 具体使用哪种。</p>\n<p>上面是<code class=\"language-text\">Eggjs</code>多进程的简单分析，具体可以看<a href=\"https://eggjs.org/zh-cn/core/cluster-and-ipc.html\">这里</a></p>\n<h3>插件</h3>\n<p>如果现在让你设计一个插件系统，要求插件之间有依赖关系，要有环境判断，要有开关控制插件启动，该如何设计？</p>\n<p>我们首先想到的是依赖处理，这块前端已经非常成熟，可以借助 npm，来进行依赖管理。</p>\n<p>另外像环境判断等一些参数，可以参考第三方库例如 browserslist，在 package.json 添加一个字段配置，也可以专门新建一个.xxxxrc 配置。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//package.json 写法</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"private\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"dependencies\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"autoprefixer\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"^6.5.4\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"browserslist\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"last 1 version\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"> 1%\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"IE 10\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//.browserslistrc</span>\n\n# Browsers that we support\nlast <span class=\"token number\">1</span> version\n<span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token operator\">%</span>\n<span class=\"token constant\">IE</span> <span class=\"token number\">10</span> # sorry</code></pre></div>\n<p>由此，我们可以定义自己的配置如下</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//package.json</span>\n<span class=\"token punctuation\">{</span>\n\tmyplugin<span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span>\n\t\tenv<span class=\"token punctuation\">:</span><span class=\"token string\">\"dev\"</span><span class=\"token punctuation\">,</span>\n\t\tothers<span class=\"token punctuation\">:</span><span class=\"token string\">\"xxx\"</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Eggjs 的插件也是这样设计的</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"eggPlugin\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"env\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"local\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"unittest\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"prod\"</span> <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但是 Eggjs 对于依赖管理，名字都自己做了处理，导致看上去比较冗余。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//package.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"eggPlugin\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"rpc\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"dependencies\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"registry\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"optionalDependencies\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"vip\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"env\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"local\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"unittest\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"prod\"</span> <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>所有的一些都写在 eggPlugin 的配置里面，包括插件名字，依赖等，而不是利用 package.json 已有的字段和能力。这也是开始的时候比较困惑的地方。</p>\n<p>官方给出的解释是:</p>\n<blockquote>\n<p><a href=\"https://eggjs.org/zh-cn/advanced/plugin.html\">首先 Egg 插件不仅仅支持 npm 包，还支持通过目录来找插件</a></p>\n</blockquote>\n<p>现在可以通过 yarn 的 workspace 和 lerna 这种 monorepo 的方式，更好的管理插件。</p>\n<p>看一下插件的目录和内容，其实是简化版应用。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">.</span> egg<span class=\"token operator\">-</span>hello\n├── <span class=\"token keyword\">package</span><span class=\"token punctuation\">.</span>json\n├── app<span class=\"token punctuation\">.</span><span class=\"token function\">js</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n├── agent<span class=\"token punctuation\">.</span><span class=\"token function\">js</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n├── app\n│   ├── <span class=\"token function\">extend</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n│   <span class=\"token operator\">|</span>   ├── helper<span class=\"token punctuation\">.</span><span class=\"token function\">js</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n│   <span class=\"token operator\">|</span>   ├── request<span class=\"token punctuation\">.</span><span class=\"token function\">js</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n│   <span class=\"token operator\">|</span>   ├── response<span class=\"token punctuation\">.</span><span class=\"token function\">js</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n│   <span class=\"token operator\">|</span>   ├── context<span class=\"token punctuation\">.</span><span class=\"token function\">js</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n│   <span class=\"token operator\">|</span>   ├── application<span class=\"token punctuation\">.</span><span class=\"token function\">js</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n│   <span class=\"token operator\">|</span>   └── agent<span class=\"token punctuation\">.</span><span class=\"token function\">js</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n│   ├── <span class=\"token function\">service</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n│   └── <span class=\"token function\">middleware</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n│       └── mw<span class=\"token punctuation\">.</span>js\n├── config\n<span class=\"token operator\">|</span>   ├── config<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">.</span>js\n│   ├── config<span class=\"token punctuation\">.</span>prod<span class=\"token punctuation\">.</span>js\n<span class=\"token operator\">|</span>   ├── config<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span><span class=\"token function\">js</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>   ├── config<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span><span class=\"token function\">js</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>   └── config<span class=\"token punctuation\">.</span>unittest<span class=\"token punctuation\">.</span><span class=\"token function\">js</span> <span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span>\n└── test\n    └── middleware\n        └── mw<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>js</code></pre></div>\n<ol>\n<li>去掉了 router 和 controller。这部分之前说过主要处理请求，进行转发，而插件的定义是增强的中间件，所以没必要。</li>\n<li>去掉了 plugin.js。 这个文件的主要作用就是引入或开启其他插件。框架已经做了这部分工作，这里就没必要。</li>\n</ol>\n<p>由于插件是一个小型应用，因为会存在插件中和框架重复的情况，因此 Eggjs 的加载顺序是 <strong>插件 &#x3C; 框架 &#x3C; 应用</strong>。</p>\n<p>比如 插件有个 config.default.js，框架也有 config.default.js，应用也有 config.default.js。</p>\n<p>最后会合并成一个 config.default.js, 执行顺序为</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> finalConfig<span class=\"token operator\">=</span> Objeact<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>插件的config<span class=\"token punctuation\">,</span>框架的config，应用的config<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>总结</h2>\n<p>Eggjs 的出现和框架设计带有自身的特点和时代的因素，\n本文作为入门的一个解读，希望能帮助大家能够更好的掌握这个框架。</p>\n<blockquote>\n<p>本文发布自 <a href=\"https://github.com/x-orpheus\">网易云音乐大前端团队</a>，文章未经授权禁止任何形式的转载。我们常年招收前端、iOS、Android，如果你准备换工作，又恰好喜欢云音乐，那就加入我们 grp.music-fe(at)corp.netease.com！</p>\n</blockquote>","frontmatter":{"title":"Eggjs 入门解构","date":"2021-12-02","description":"Eggjs虽然提供了入门教程，但是有大量的约定俗成，对于理解上有一定的成本和门槛。本文以快速入门的例子通过不同的角度进行解读，阐述相关编程思想，希望能帮助大家能更好的掌握这一框架"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/eggjs-destruction/","previous":{"fields":{"slug":"/android-privacy/"},"frontmatter":{"title":"Android 隐私合规静态检查"}},"next":{"fields":{"slug":"/look-map/"},"frontmatter":{"title":"LOOK直播活动地图生成器方案"}}}}}