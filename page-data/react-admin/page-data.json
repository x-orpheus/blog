{"componentChunkName":"component---src-templates-blog-post-js","path":"/react-admin/","webpackCompilationHash":"c671f8468f2ff1de187e","result":{"data":{"site":{"siteMetadata":{"title":"云音乐大前端专栏","author":"云音乐大前端团队","siteUrl":"https://musicfe.dev"}},"markdownRemark":{"id":"6fd2ac5b-6adc-5fb1-aa55-516c43de7787","excerpt":"本文作者：鲍观霞 背景 随着 React 生态的快速发展，社区基于 React…","html":"<p><img src=\"https://p1.music.126.net/YGybUqS1Xpw22FQkmdSMJQ==/109951164829382440.jpg\"></p>\n<blockquote>\n<p>本文作者：鲍观霞</p>\n</blockquote>\n<h2>背景</h2>\n<p>随着 React 生态的快速发展，社区基于 React 的状态管理方案层出不穷，这意味着很多方案开发者依然要做很多选择，没有约定的团队，沟通成本和跨团队协作成本，以及长期的维护是非常高的，这时候统一一套开发模式就显得尤为重要。 </p>\n<p>本文将介绍如何从零开始搭建一个高可复用的后台框架，让每一个人都能轻松搭出自己的后台，深入了解自己的框架。 </p>\n<p>亲手实践一套项目框架有诸多好处：<br>\n1、业务可定制性强（比如，你们团队有一套业务定制型强的 UI 组件库；你们团队有一套自己的状态管理最佳实践；你们团队有一套复杂的权限管理流程等等）  </p>\n<blockquote>\n<p>PS: 当然你完全可以找个第三方框架改造成自己想要的样子，但是入手成本、后续的维护成本、技术更新成本都会很高  </p>\n</blockquote>\n<p>2、收敛技术栈、屏蔽底层差异、统一开发体验，帮助团队降低开发和维护成本<br>\n3、成为框架掌控者，技术升级、底层改造随心所欲   </p>\n<h2>写在前面</h2>\n<p>本文拟讲述从零搭建 React 后台开发框架的核心技术和搭建流程，涉及到的技术并非唯一可选技术栈，你可以随时用你熟悉的技术栈代替它。同时我会尽量降低阅读本文的难度，降低前端开发的门槛，但是还是有一些需要具备的知识： </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">-</span> React Hooks       \n<span class=\"token operator\">-</span> React<span class=\"token operator\">-</span>Redux  \n<span class=\"token operator\">-</span> React Router <span class=\"token number\">5.0</span>   \n<span class=\"token operator\">-</span> Ant Design <span class=\"token number\">4.</span>x  </code></pre></div>\n<p>该项目基本搭建了一个企业级管理系统的骨架结构，提供通用功能及扩展需求，不涉及业务逻辑开发，不涉及数据请求，所有数据均为 mock。  </p>\n<h2>开始搭建</h2>\n<h3>基础结构及配置</h3>\n<p>1、 创建基本项目目录和结构<br>\n推荐 Create React App 创建基本项目结构。网上很多相关初始化流程，这里不再赘述。官方教程在<a href=\"https://www.html.cn/create-react-app/docs/getting-started/\">这里</a>。   </p>\n<blockquote>\n<p>Create React App 是 React 官方推出的构建 React 单页面应用的脚手架工具。它本身集成了 Webpack，并配置了一系列内置的 loader 和基础的 npm 的脚本，可以很轻松的实现零配置就可以快速开发 React 的应用。</p>\n</blockquote>\n<p>默认的项目目录结构如下:    </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">├── <span class=\"token keyword\">package</span><span class=\"token punctuation\">.</span>json\n├── <span class=\"token keyword\">public</span>                  # 静态目录\n│   ├── favicon<span class=\"token punctuation\">.</span>ico\n│   ├── index<span class=\"token punctuation\">.</span>html          # 最终的html的基础模板【默认是单页面应】\n│   └── manifest<span class=\"token punctuation\">.</span>json\n├── src\n│   ├── App<span class=\"token punctuation\">.</span>css             # App根组件的css\n│   ├── App<span class=\"token punctuation\">.</span>js              # App组件代码\n│   ├── App<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>js\n│   ├── index<span class=\"token punctuation\">.</span>css           # 启动文件样式\n│   ├── index<span class=\"token punctuation\">.</span>js            # 启动的文件（执行入口）\n│   ├── logo<span class=\"token punctuation\">.</span>svg\n│   └── serviceWorker<span class=\"token punctuation\">.</span>js\n└── yarn<span class=\"token punctuation\">.</span>lock</code></pre></div>\n<p>2、执行命令  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm start\n# or\nyarn start</code></pre></div>\n<p>打开 <a href=\"http://localhost:3000\">http://localhost:3000</a> 在浏览器中查看它。</p>\n<p>至此，一个简易的 React 项目就成了。  </p>\n<h2>项目进阶</h2>\n<h3>React Router</h3>\n<h5>为什么选动态化路由</h5>\n<p>大多数人习惯了配置式路由的开发方式，包括像 Angular，Express, Ember 等，近一点的 包括 Ant Design Pro 和 Umi 框架，都是静态路由配置。React Router V4 之前也沿用了这一方式，但是在 React Router V4 版本做了一次不向前兼容的重构升级。  那 React Router V3 配置式路由的痛点在哪里？为何要动态化？<br>\n我理解这块的 React Router V3 的痛点有以下几点：  </p>\n<blockquote>\n<p>为了方便介绍，React Router V3 以下简称 V3；React Router V4 以下简称 V4；</p>\n</blockquote>\n<ul>\n<li>V3 脱离了 React 组件化思想。V3 虽然形式上是 React 组件，但是其实它与 UI 没有任何关系，只是提供了一条配置项而已。<br>\n这一点可以从相关源码追溯  </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Route <span class=\"token operator\">=</span> <span class=\"token function\">createReactClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 无关代码</span>\n\n  <span class=\"token comment\">/* istanbul ignore next: sanity check */</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">invariant</span><span class=\"token punctuation\">(</span>\n      <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'&lt;Route> elements are for router configuration only and should not be rendered'</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里 Route 的 render 方法中，没有做任何 UI 渲染相关的工作，不是一个正宗的组件。  </p>\n<ul>\n<li>V3 路由写法需要满足约定的格式，比如不能将 Route 脱离 Router 使用，这与 React 倡导的“可以声明式灵活性进行组件组装”的理念相违背。</li>\n<li>V3 提供了很多类似生命周期的方法，如：onEnter, onUpdate, onLeave 等用来为处于不同阶段的路由提供钩子方法。但是 React 本身有一套完善的生命周期方法。V3 路由方式的问题在于，它在 React 组件思想之外，设计了一套独立的 API，这有侵入性。  </li>\n<li>集中式路由层层嵌套，在配置中你需要关心路由所属的祖先层级，页面展示由顶级路由来决定，无法体现动态路由的灵活性。 </li>\n</ul>\n<p>当然，V4 版本已经解决了这些问题。在 V4 版本中，抛弃了传统的路由概念，Route 回归组件化。  </p>\n<p>V4 开始采用单代码仓库模型结构，每个仓库负责不同的功能场景，他们分别相互独立。</p>\n<ul>\n<li>react-router 路由基础库  </li>\n<li>react-router-dom 浏览器中使用的封装  </li>\n<li>react-router-native React native 封装</li>\n</ul>\n<p>本文我们只需要用到 react-router-dom 这个仓库，如果你不明白为什么，看<a href=\"https://itbilu.com/nodejs/npm/react-router.html\">这里</a>；</p>\n<p>你需要掌握 react-router-dom 这些组件：  </p>\n<ul>\n<li>BrowserRouter</li>\n<li>Route </li>\n<li>Switch </li>\n<li>Link </li>\n</ul>\n<p>你需要掌握 react-router-dom 这些对象及其方法:  </p>\n<ul>\n<li>history   </li>\n<li>location  </li>\n<li>match  </li>\n</ul>\n<p>React Router 从 4.0 开始完全移除中心化配置，不再主张集中式路由，让 React 回归组件化开发，它本身只是提供了导航功能的组件。\n这里我们根据推荐的动态化思路设计路由，入口只设计一级菜单，业务管理各自子路由。  </p>\n<p>篇幅问题，这里只列举二级路由的情况，多级路由同理。  </p>\n<p>1、安装依赖</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm install <span class=\"token operator\">--</span>save react<span class=\"token operator\">-</span>router<span class=\"token operator\">-</span>dom\ncd src\ntouch router<span class=\"token punctuation\">.</span>js  <span class=\"token comment\">// 构造我们的一级路由</span></code></pre></div>\n<p>2、构造 src 目录（你可以灵活定制），我希望它是这样的</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">.</span>\n├── src\n│   ├── index<span class=\"token punctuation\">.</span>js                      <span class=\"token comment\">// 入口文件</span>\n│   ├── pages\n│   │   ├── demo1                     <span class=\"token comment\">// 一级菜单A</span>\n│   │   │   ├── index<span class=\"token punctuation\">.</span>js\n│   │   │   ├── page1                 <span class=\"token comment\">// A下面的二级页面a</span>\n│   │   │   │   └── index<span class=\"token punctuation\">.</span>js\n│   │   │   └── page2                 <span class=\"token comment\">// A下面的二级页面b</span>\n│   │   │       └── index<span class=\"token punctuation\">.</span>js\n│   │   └── demo2                     <span class=\"token comment\">// 一级菜单B</span>\n│   │       ├── index<span class=\"token punctuation\">.</span>js\n│   │       ├── page1                 <span class=\"token comment\">// B下面的二级页面a</span>\n│   │       │   └── index<span class=\"token punctuation\">.</span>js\n│   │       └── page2                 <span class=\"token comment\">// B下面的二级页面b</span>\n│   │           └── index<span class=\"token punctuation\">.</span>js\n│   └── router<span class=\"token punctuation\">.</span>js</code></pre></div>\n<p>3、构造一级路由    </p>\n<blockquote>\n<p>router.js</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Switch<span class=\"token punctuation\">,</span> Route <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 一级菜单</span>\n<span class=\"token keyword\">import</span> demo1 <span class=\"token keyword\">from</span> <span class=\"token string\">'./pages/demo1'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> demo2 <span class=\"token keyword\">from</span> <span class=\"token string\">'./pages/demo2'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Route render<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/demo1\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>demo1<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/demo2\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>demo2<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Switch<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>4、让一级路由去管理我们的二级路由  </p>\n<blockquote>\n<p>pages/demo1/index.js（同级页面类似）</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Switch<span class=\"token punctuation\">,</span> Route <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> page1 <span class=\"token keyword\">from</span> <span class=\"token string\">'./page1'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> page2 <span class=\"token keyword\">from</span> <span class=\"token string\">'./page2'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Router</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> match <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>match<span class=\"token punctuation\">.</span>path<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span> exact component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>page1<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>match<span class=\"token punctuation\">.</span>path<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/page1</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>page1<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>match<span class=\"token punctuation\">.</span>path<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/page2</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>page2<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Switch<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Switch 中包含 Route，只渲染第一个匹配的路由。因此主路由匹配加上 exact 去精确匹配，不会拦截后面的匹配。   </p>\n<p>5、入口文件加入路由  </p>\n<blockquote>\n<p>src/index.js</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDom <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BrowserRouter <span class=\"token keyword\">as</span> Router  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> routeChildren <span class=\"token keyword\">from</span> <span class=\"token string\">'./router'</span><span class=\"token punctuation\">;</span>\n\nReactDom<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Router<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>routeChildren<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Router<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里我们用的是 BrowserRouter 组件，打开 BrowserRouter 文件可以看到它声明了实例属性 history 对象，history 对象的创建来自 history 包的 createBrowserHistory 方法。  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createBrowserHistory <span class=\"token keyword\">as</span> createHistory <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"history\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BrowserRouter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  \n  history <span class=\"token operator\">=</span> <span class=\"token function\">createHistory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Router history<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">}</span> children<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>history 对象上拥有许多的属性和方法，这些将在后面给我们提供很大的便利，如果你想了解更多关于 history 的访问，看<a href=\"https://medium.com/@pshrmn/a-little-bit-of-history-f245306f48dd\">这里</a>。  </p>\n<p>6、修改我们的业务页面  </p>\n<blockquote>\n<p>pages/demo1/page1/index.js（同级页面类似）</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Page1</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">history</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>demo2 page1<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Page1<span class=\"token punctuation\">;</span></code></pre></div>\n<p>至此，我们的路由设计就完成了。  </p>\n<p>现在，npm run start 跑起来看看~</p>\n<p><img src=\"https://p1.music.126.net/YPaulB-whtp815dLGPWsUw==/109951164828590080.gif\" alt=\"运行结果\"></p>\n<p>项目路由基本配置结束。  </p>\n<h3>配置式菜单管理</h3>\n<p>后台项目中，路由和菜单是组织起一个应用的关键骨架。设计完路由，接下来我们考虑导航菜单管理。<br>\n这一步，我们开始搭建框架核心能力： 菜单配置，UI 集成，状态管理，用户登陆，路由鉴权。    </p>\n<blockquote>\n<p>导航应集成在 Layout 结构中，和业务逻辑解耦，为了不让开发者菜单耦合到业务逻辑中，这里采用配置式菜单管理，开发者只需要关心菜单配置。<br>\n为了方便理解，UI 组件库选用 Ant Design。</p>\n</blockquote>\n<p>1、 菜单配置 &#x26; UI 集成    </p>\n<blockquote>\n<p>既然打算做配置式菜单，那么我们设计一个菜单配置，根据配置生成菜单。 </p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">cd src\ntouch menuConfig<span class=\"token punctuation\">.</span>js</code></pre></div>\n<p>menuConfig.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> menu <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        path<span class=\"token punctuation\">:</span> <span class=\"token string\">'demo1'</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">'一级菜单A'</span><span class=\"token punctuation\">,</span>\n        children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n            name<span class=\"token punctuation\">:</span> <span class=\"token string\">'subnav1'</span><span class=\"token punctuation\">,</span>\n            path<span class=\"token punctuation\">:</span> <span class=\"token string\">'page1'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            name<span class=\"token punctuation\">:</span> <span class=\"token string\">'subnav2'</span><span class=\"token punctuation\">,</span>\n            path<span class=\"token punctuation\">:</span> <span class=\"token string\">'page2'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        path<span class=\"token punctuation\">:</span> <span class=\"token string\">'demo2'</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">'一级菜单B'</span>\n        children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n            name<span class=\"token punctuation\">:</span> <span class=\"token string\">'测试'</span><span class=\"token punctuation\">,</span>\n            path<span class=\"token punctuation\">:</span> <span class=\"token string\">'page2'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>当然，你可以在配置中加入任意元素来丰富你的配置，比如 icon，redirect 等等； </p>\n<p>2、生成菜单配置  </p>\n<blockquote>\n<p>接下来需要根据这份配置，构造我们的导航，看一下 Ant Design 提供的 Menu 组件需要哪些数据？\n官方给的 demo 是： </p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Menu\n    theme<span class=\"token operator\">=</span><span class=\"token string\">\"dark\"</span>\n    mode<span class=\"token operator\">=</span><span class=\"token string\">\"inline\"</span>\n    defaultSelectedKeys<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Menu<span class=\"token punctuation\">.</span>Item key<span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span><span class=\"token operator\">></span>nav1<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Menu<span class=\"token punctuation\">.</span>Item<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Menu<span class=\"token punctuation\">.</span>Item key<span class=\"token operator\">=</span><span class=\"token string\">\"2\"</span><span class=\"token operator\">></span>nav2<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Menu<span class=\"token punctuation\">.</span>Item<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Menu<span class=\"token operator\">></span></code></pre></div>\n<p>为了让我们的配置能很方便的生成 Menu 组件，我们需要写个方法把我们的菜单转成平铺形式。用 path 作为 key，可以很方便的解析 selectKey。<br>\n我们希望我们的菜单可以根据 path 选中或切换，我们需要根据 MenuConfig 构造这样一份结构：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"selectMainMenu\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>    <span class=\"token comment\">// 当前访问一级菜单信息【用于标记一级菜单选中】</span>\n    <span class=\"token string\">\"path\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"demo1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"一级菜单A\"</span> \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"mainMenu\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>          <span class=\"token comment\">// 当前所有一级菜单信息【用于渲染一级导航】</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"path\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"demo1\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"一级菜单A\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"path\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"demo2\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"一级菜单B\"</span> \n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"subMenu\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>           <span class=\"token comment\">// 当前一级菜单下的所有子菜单【用于渲染子导航】</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"subnav1\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"path\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"page1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"subnav2\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"path\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"page2\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"paths\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"一级菜单A\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"path\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/demo1\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"prePath\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/demo1\"</span>   <span class=\"token comment\">// 一级路由+二级路由作为子菜单唯一 key【标识二级菜单状态】</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>生成的 HeadMenu 组件：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Menu theme<span class=\"token operator\">=</span><span class=\"token string\">\"dark\"</span>\n    mode<span class=\"token operator\">=</span><span class=\"token string\">\"horizontal\"</span>\n    selectedKeys<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>selectMainMenu<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>\n        mainMenu<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">&lt;</span>Menu<span class=\"token punctuation\">.</span>Item key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>path <span class=\"token operator\">===</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>path<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Menu<span class=\"token punctuation\">.</span>Item<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Menu<span class=\"token operator\">></span></code></pre></div>\n<p>生成的 SideMenu 组件：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Menu theme<span class=\"token operator\">=</span><span class=\"token string\">\"dark\"</span>\n    mode<span class=\"token operator\">=</span><span class=\"token string\">\"horizontal\"</span>\n    selectedKeys<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>currentPath<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>\n        subMenu<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">&lt;</span>Menu<span class=\"token punctuation\">.</span>Item key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prePath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>path<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>path <span class=\"token operator\">===</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prePath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>path<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                    <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Menu<span class=\"token punctuation\">.</span>Item<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Menu<span class=\"token operator\">></span></code></pre></div>\n<blockquote>\n<p>这一步转换并不复杂，自行实现。主要提供根据路由 path 标记菜单状态的思路。    </p>\n</blockquote>\n<p>3、Layout 集成 Menu 组件  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">BaseLayout</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> location<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> pathname <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> location<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>menuInfo<span class=\"token punctuation\">,</span> setMenuInfo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 菜单信息随着路径变化</span>\n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> newInfo <span class=\"token operator\">=</span> <span class=\"token function\">pathChange</span><span class=\"token punctuation\">(</span>pathname<span class=\"token punctuation\">,</span> menuConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setMenuInfo</span><span class=\"token punctuation\">(</span>newInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>pathname<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>Layout<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>Header className<span class=\"token operator\">=</span><span class=\"token string\">\"header\"</span> <span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"logo\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>HeadMenu menuInfo<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>menuInfo<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>HeadMenu<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Header<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>Content<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>Layout<span class=\"token operator\">></span>\n                    <span class=\"token operator\">&lt;</span>Sider width<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">200</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                        <span class=\"token operator\">&lt;</span>SideMenu menuInfo<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>menuInfo<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>SideMenu<span class=\"token operator\">></span>\n                    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Sider<span class=\"token operator\">></span>\n                    <span class=\"token operator\">&lt;</span>Content<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Content<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Layout<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Content<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Layout<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>4、将 Layout 应用于所有路由  </p>\n<blockquote>\n<p>改造一下我们的路由入口（加上 Layout 布局结构）：  </p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Switch<span class=\"token punctuation\">,</span> Route <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> BaseLayout <span class=\"token keyword\">from</span> <span class=\"token string\">'./layouts'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 各个一级路由</span>\n<span class=\"token keyword\">import</span> demo1 <span class=\"token keyword\">from</span> <span class=\"token string\">'./pages/demo1'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> demo2 <span class=\"token keyword\">from</span> <span class=\"token string\">'./pages/demo2'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Route render<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>BaseLayout <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">></span>\n                    <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/demo1\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>demo1<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span>\n                    <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/demo2\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>demo2<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Switch<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>BaseLayout<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span class=\"token punctuation\">;</span></code></pre></div>\n<p>我们的配置式菜单就完成了，它看起来是这样的：  </p>\n<p><img src=\"https://p1.music.126.net/nSHXNqryW2rMHQYKIn1QGw==/109951164828550175.gif\" alt=\"菜单\"></p>\n<h4>路由鉴权</h4>\n<p>toB 项目最大不同于 toC 的逻辑就在于权限控制，这也几乎是后台框架集成最复杂的部分。  </p>\n<p>在一个大型系统中，一个误操作产生的后果可能是非常严重的，权限管理是不可或缺的一个环节。  </p>\n<p>权限系统的存在最大程度上避免了这类问题 — 只要是界面上出现的功能，都是可以操作或不会产生严重后果的。\n每个帐号登陆后只能看到和自己有关的信息，可以更快速地理解自己工作范围内的业务。 </p>\n<h5><em>后台权限的基本构成</em></h5>\n<p>权限设计主要由三个要素构成：帐号，角色，权限。  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">-</span> 帐号：登录系统的唯一身份识别，一个账号代表一个用户；  \n\n<span class=\"token operator\">-</span> 角色：为账号批量分配权限。在一个系统中，不可能为每个帐号订制权限，所以给同一类帐号赋予一个“角色”，以达到批量分配权限的目的；  \n\n<span class=\"token operator\">-</span> 权限：对于前端来说，权限又分为页面权限和操作权限；其中页面权限分为菜单权限和路由权限；  </code></pre></div>\n<p>设计基本思路为： </p>\n<p><img src=\"https://p1.music.126.net/RDHiU8BjnvpyNrp-OdTGHg==/109951164828548221.png\"></p>\n<p>1、登陆实现</p>\n<p>login.js </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> connect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Login</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n    loginStatus<span class=\"token punctuation\">,</span>\n    location<span class=\"token punctuation\">,</span>\n    setLoginInfo<span class=\"token punctuation\">,</span>\n    history\n<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> redirectUrl <span class=\"token operator\">=</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> location<span class=\"token punctuation\">.</span>state <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 获取登录信息伪代码</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onFinish</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">values</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/**** 此处去获取登录信息并存放在全局 Store ****/</span>\n        <span class=\"token function\">setLoginInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            username<span class=\"token punctuation\">:</span> <span class=\"token string\">'小A'</span><span class=\"token punctuation\">,</span>\n            role<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>redirectUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"login layer\"</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>Form\n                name<span class=\"token operator\">=</span><span class=\"token string\">\"basic\"</span>\n                onFinish<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onFinish<span class=\"token punctuation\">}</span> <span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>Form<span class=\"token punctuation\">.</span>Item\n                    label<span class=\"token operator\">=</span><span class=\"token string\">\"用户名\"</span>\n                    name<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span>\n                    rules<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">:</span> <span class=\"token string\">'输入用户名'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">></span>\n                    <span class=\"token operator\">&lt;</span>Input <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Form<span class=\"token punctuation\">.</span>Item<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>Form<span class=\"token punctuation\">.</span>Item\n                    label<span class=\"token operator\">=</span><span class=\"token string\">\"密码\"</span>\n                    name<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span>\n                    rules<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">:</span> <span class=\"token string\">'输入密码'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">></span>\n                    <span class=\"token operator\">&lt;</span>Input<span class=\"token punctuation\">.</span>Password <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Form<span class=\"token punctuation\">.</span>Item<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>Form<span class=\"token punctuation\">.</span>Item<span class=\"token operator\">></span>\n                    <span class=\"token operator\">&lt;</span>Button type<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span> htmlType<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>登陆<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Form<span class=\"token punctuation\">.</span>Item<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Form<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    loginStatus<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">.</span>loginStatus\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapDispatchToProps</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">dispatch</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">setLoginInfo</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">setLoginInfo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n    mapStateToProps<span class=\"token punctuation\">,</span>\n\tmapDispatchToProps\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Login<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>connect() 的作用是将 Store 和 Component 连接起来。connect负责从 Redux state 树中读取部分数据，并通过 Props 来把这些数据提供给要渲染的组件。也传递 action 函数到 Props。<br>\nconnect 函数接收两个参数，一个 mapStateToProps，把 Redux 的 state，转为组件的 Props；还有一个参数是 mapDispatchToprops,\n把发射 actions 的方法，转为 Props 属性函数。</p>\n<p>2、用户状态管理<br>\nstore/login.js存储</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 设置state初始值</span>\n<span class=\"token keyword\">const</span> initState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    loginStatus<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    userInfo<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        username<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        role<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>  <span class=\"token comment\">// 用户权限标识</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">SET_LOGIN</span> <span class=\"token operator\">=</span> <span class=\"token string\">'SET_LOGIN'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// action</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setLoginInfo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">payload</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        payload<span class=\"token punctuation\">,</span>\n        type<span class=\"token punctuation\">:</span> <span class=\"token constant\">SET_LOGIN</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// reducer</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">loginReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">SET_LOGIN</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n                loginStatus<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                userInfo<span class=\"token punctuation\">:</span> action<span class=\"token punctuation\">.</span>payload\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>store/index.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore<span class=\"token punctuation\">,</span> combineReducers <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> loginReducer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./login'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> allReducers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    login<span class=\"token punctuation\">:</span> loginReducer\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> reducers <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span>allReducers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> store<span class=\"token punctuation\">;</span></code></pre></div>\n<p>入口 index.js 增加 Provider 下发 Store  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDom <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BrowserRouter <span class=\"token keyword\">as</span> Router <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Provider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">'./redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> routeChildren <span class=\"token keyword\">from</span> <span class=\"token string\">'./router'</span><span class=\"token punctuation\">;</span>\n\nReactDom<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Provider store<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Router<span class=\"token operator\">></span>\n            <span class=\"token punctuation\">{</span>routeChildren<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Router<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Provider 的作用是让 Store 在整个 App 中可用。</p>\n<p>3、登陆校验  </p>\n<blockquote>\n<p>我们需要在所有页面访问之前，校验用户登录状态，以免发生重复登陆；\n我们的 Layout 管理着所有页面入口，需要改造 layout.js   </p>\n</blockquote>\n<p>layout.js 增加如下逻辑：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> loginPath <span class=\"token operator\">=</span> <span class=\"token string\">'/login'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> pathname <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> location<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> redirectUrl <span class=\"token operator\">=</span> pathname <span class=\"token operator\">===</span> loginPath <span class=\"token operator\">?</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">:</span> pathname<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>校验是否登陆<span class=\"token operator\">--</span><span class=\"token operator\">></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loginStatus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>redirectUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            redirectUrl\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pathname <span class=\"token operator\">===</span> <span class=\"token string\">'/login'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这一步需要把当前页面作为 redirectUrl 带到登陆页，登陆后需返回原路径。  </p>\n<p>为了看演示效果，我们需要稍微调整我们的样式，样式效果自行添加。 </p>\n<p><img src=\"https://p1.music.126.net/Smoh4RHCMuS3NX3ipi3z0w==/109951164828781858.gif\" alt=\"登陆拦截\"></p>\n<p>3、用户鉴权  </p>\n<blockquote>\n<p>后台系统鉴权是个复杂且差异化很大的话题，本文只做抛砖引玉，为了方便理解思路，只介绍一种简单的权限方案。  </p>\n</blockquote>\n<p>我们设定，权限标识越小，拥有的权限越高，逐级之间为包含关系。<br>\n构造权限思路如下：  </p>\n<p><img src=\"https://p1.music.126.net/MY5_WxbLZh29ddLUpAU3dA==/109951164828550630.png\"></p>\n<p>根据这份权限方案，menuConfig.js 需要增加权限标识：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> menu <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        path<span class=\"token punctuation\">:</span> <span class=\"token string\">'demo1'</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">'一级菜单A'</span><span class=\"token punctuation\">,</span>\n        role<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// demo1 权限标识</span>\n        children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n            name<span class=\"token punctuation\">:</span> <span class=\"token string\">'subnav1'</span><span class=\"token punctuation\">,</span>\n            path<span class=\"token punctuation\">:</span> <span class=\"token string\">'page1'</span><span class=\"token punctuation\">,</span>\n            role<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>     <span class=\"token comment\">// demo1/page1 权限标识</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            name<span class=\"token punctuation\">:</span> <span class=\"token string\">'subnav2'</span><span class=\"token punctuation\">,</span>\n            path<span class=\"token punctuation\">:</span> <span class=\"token string\">'page2'</span><span class=\"token punctuation\">,</span>\n            role<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\">// demo1/page2 权限标识</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            name<span class=\"token punctuation\">:</span> <span class=\"token string\">'subnav3'</span><span class=\"token punctuation\">,</span>\n            path<span class=\"token punctuation\">:</span> <span class=\"token string\">'page3'</span><span class=\"token punctuation\">,</span>\n            role<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>     <span class=\"token comment\">// demo1/page3 权限标识</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            name<span class=\"token punctuation\">:</span> <span class=\"token string\">'subnav4'</span><span class=\"token punctuation\">,</span>\n            path<span class=\"token punctuation\">:</span> <span class=\"token string\">'page4'</span><span class=\"token punctuation\">,</span>\n            role<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>      <span class=\"token comment\">// demo1/page4 权限标识</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        path<span class=\"token punctuation\">:</span> <span class=\"token string\">'demo2'</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token string\">'一级菜单B'</span><span class=\"token punctuation\">,</span>\n        role<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>          <span class=\"token comment\">// demo2 权限标识</span>\n        children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n            name<span class=\"token punctuation\">:</span> <span class=\"token string\">'测试'</span><span class=\"token punctuation\">,</span>\n            path<span class=\"token punctuation\">:</span> <span class=\"token string\">'page2'</span><span class=\"token punctuation\">,</span>\n            role<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>       <span class=\"token comment\">// demo1/page2 权限标识</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>layout.js增加鉴权拦截，其余逻辑不变： </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> authChildren <span class=\"token operator\">=</span> children<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> role <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> userInfo<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>menuInfo<span class=\"token punctuation\">,</span> setMenuInfo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 用户角色配置，预留</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">filterMenu</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">menus</span> <span class=\"token operator\">=></span> menus\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>role <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> item<span class=\"token punctuation\">.</span>role <span class=\"token operator\">>=</span> role<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>children <span class=\"token operator\">&amp;&amp;</span> item<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>item<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">:</span> <span class=\"token function\">filterMenu</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> item<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 过滤菜单权限</span>\n    <span class=\"token keyword\">const</span> newMenuInfo <span class=\"token operator\">=</span> <span class=\"token function\">filterMenu</span><span class=\"token punctuation\">(</span>menuConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">const</span> curMenuInfo <span class=\"token operator\">=</span> <span class=\"token function\">onPathChange</span><span class=\"token punctuation\">(</span>pathname<span class=\"token punctuation\">,</span> newMenuInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setMenuInfo</span><span class=\"token punctuation\">(</span>curMenuInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>pathname<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 过滤路由权限</span>\n<span class=\"token keyword\">const</span> curPathAuth <span class=\"token operator\">=</span> menuInfo<span class=\"token punctuation\">.</span>paths\n    <span class=\"token operator\">?</span> menuInfo<span class=\"token punctuation\">.</span>paths<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>path <span class=\"token operator\">===</span> pathname<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 路由权限拦截</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>curPathAuth<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'{}'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    authChildren <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"n-privileges\"</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>对不起你没有访问该页面的权限<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>为了演示权限效果，我们增加用户权限切换。  </p>\n<p><img src=\"https://p1.music.126.net/NUwGo4gj9sW1dHme0JlkMA==/109951164828943304.gif\"></p>\n<p>框架结构基本形成。  </p>\n<h2>后续</h2>\n<p>当然，系统还需更多细节的完善，我们仅仅完成了核心流程。<br>\n多人合作的系统发展到后期的时候，我们需要考虑性能问题、跨域配置、数据 mock、eslint 等等。不属于核心流程的内容，在这里仅作讨论。 </p>\n<p>1、按需加载<br>\n单页应用的首屏渲染一直都是个大问题。优化资源加载，我们可以参考 React 16.3.0 新增的 Suspense 和 lazy 特性。<br>\nReact.lazy 提供了按需加载组件的方法，并且方法内部必须用到 import() 语法导入组件，配合 webpack 特性：遇到 import...from 语法会将依赖的包，合并到 bundle.js 中。可以如此实现：  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> page1 <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* webpackChunkName: \"page1\" */</span><span class=\"token string\">'./page1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>即可将 page1 打包为名为 page1.js 的文件。<br>\n配合 React.Suspense 可以很方便的实现懒加载过渡动画。  </p>\n<p>2、通用 NotFound<br>\n我们的路由设计使得我们能很方便的处理 Not Found 的情况。<br>\n在每一级 Switch 最后加上 path=\"*\" 可以拦截所有未匹配路由。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>match<span class=\"token punctuation\">.</span>path<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span> exact component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Home<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>match<span class=\"token punctuation\">.</span>path<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/page1</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>page1<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>match<span class=\"token punctuation\">.</span>path<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/page2</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>page2<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"*\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>NotFound<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Switch<span class=\"token operator\">></span></code></pre></div>\n<p>3、跨域配置<br>\n当我们本地开发做服务代理的时候，一般会选择在 dev_server 处进行代理。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">devServer<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    proxy<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'/api'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            target<span class=\"token punctuation\">:</span> <span class=\"token string\">'http://www.baidu.com/'</span><span class=\"token punctuation\">,</span>\n            changeOrigin<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            secure<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'/api2'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但这种方法在 create-react-app 生成的应用中无效，对于这种情况，create-react-app 的版本在低于 2.0 的时候可以在 package.json 增加 proxy 配置， 配置如下： </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"proxy\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'/api'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        target<span class=\"token punctuation\">:</span> <span class=\"token string\">'http://www.baidu.com/'</span><span class=\"token punctuation\">,</span>\n        changeOrigin<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        secure<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>create-react-app 的版本高于 2.0 版本的时候在 package.json 只能配置 string 类型，可以考虑用 http-proxy-middleware 代替。</p>\n<p>src/setupProxy.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createProxyMiddleware <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http-proxy-middleware'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">app</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'/api'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">createProxyMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      target<span class=\"token punctuation\">:</span> <span class=\"token string\">'http://localhost:5000'</span><span class=\"token punctuation\">,</span>\n      changeOrigin<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>当然，你可以也执行 npm run eject 命令，暴露 webpack 等配置，去修改 devServer。  </p>\n<p>4、数据 mock 能力<br>\n项目开发中，前端工程师需要依赖后端工程师的数据接口以及后端联调环境。但是其实我们也可以根据后端接口文档在接口没有开发完成之前自己 mock 数据进行调试，让接口消费者脱离接口生产者进行开发。  </p>\n<p>mock 数据常见的解决方案有：  </p>\n<ul>\n<li>在代码层硬编码</li>\n<li>在前端JS中拦截</li>\n<li>代理软件 (Fiddler、Charles)</li>\n<li>mock server</li>\n</ul>\n<p>这些方案要么对代码有侵入性，要么数据无法溯源，要么成本较高。<br>\n云音乐已开源一款 mock 平台，能帮助开发者管理接口。欢迎入坑：<a href=\"https://github.com/x-orpheus/nei\">NEI</a></p>\n<p>本文仅以个人经验产出，如对本文有任何意见和建议，欢迎讨论。  </p>\n<blockquote>\n<p>本文发布自 <a href=\"https://github.com/x-orpheus\">网易云音乐前端团队</a>，文章未经授权禁止任何形式的转载。我们一直在招人，如果你恰好准备换工作，又恰好喜欢云音乐，那就 <a href=\"mailto:grp.music-fe@corp.netease.com\">加入我们</a>！</p>\n</blockquote>","frontmatter":{"title":"从零搭建中后台框架的核心流程","date":"2020-04-17","description":"随着 React 生态的快速发展，社区基于 React 的状态管理方案层出不穷，这意味着很多方案开发者依然要做很多选择，没有约定的团队，沟通成本和跨团队协作成本，以及长期的维护是非常高的，这时候统一一套开发模式就显得尤为重要。 "}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/react-admin/","previous":{"fields":{"slug":"/web-video/"},"frontmatter":{"title":"Web 视频播放的那些事儿"}},"next":{"fields":{"slug":"/node-cli/"},"frontmatter":{"title":"Node CLI 工具的插件方案探索"}}}}}