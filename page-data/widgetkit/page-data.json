{"componentChunkName":"component---src-templates-blog-post-js","path":"/widgetkit/","webpackCompilationHash":"c6e4e6d97e90465f7c0a","result":{"data":{"site":{"siteMetadata":{"title":"云音乐大前端专栏","author":"云音乐大前端团队","siteUrl":"https://musicfe.dev"}},"markdownRemark":{"id":"8139f3ab-1b28-501b-a28d-d9c064023afe","excerpt":"题图 图片来源: https://unsplash.com/photos/aWQsnHaITD8/ 本文作者：闫冰 前言 苹果在今年的 WWDC20 上发布了小组件（WidgetKit），支持在 iOS、iPadOS 主屏幕展示动态信息和个性化内容。加上 iOS…","html":"<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4404666916/e47e/43ce/d0ff/16641363ab121df02f755894e0c5dc9f.jpg\" alt=\"题图\"></p>\n<p>图片来源: <a href=\"https://unsplash.com/photos/aWQsnHaITD8/\">https://unsplash.com/photos/aWQsnHaITD8/</a></p>\n<blockquote>\n<p>本文作者：<a href=\"http://github.com/yiios\">闫冰</a></p>\n</blockquote>\n<h2>前言</h2>\n<p>苹果在今年的 WWDC20 上发布了小组件（WidgetKit），支持在 iOS、iPadOS 主屏幕展示动态信息和个性化内容。加上 iOS 系统应用抽屉的加入，苹果对一向保守主屏幕大动干戈，导致用户也对小组件非常期待。但小组件的运行限制很多，如何在有限的机制上怎样做好用户体验就成为需要完成的挑战。</p>\n<h2>小组件简述</h2>\n<p>小组件可以在主屏幕上实现内容展示和功能跳转。\n系统会向小组件获取时间线，根据当前时间对时间线上的数据进行展示。点击正在展示的视觉元素可以跳转到APP内，实现对应的功能。</p>\n<p>云音乐的小组件效果如下：</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4510556346/7933/0441/b987/65a30b0f7b242a48cde7222c6e95ce43.png\" alt=\"preview\"></p>\n<h2>开发思路浅谈</h2>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4403656300/6045/b97c/71a3/934a21cb8e33b1686eb06d065adb3469.png\" alt=\"Widget 技术栈\"></p>\n<p>首先需要明确的是小组件是一个独立于 App 环境(即 App Extension)，小组件的生命周期/存储空间/运行进程都和 App 不同。所以我们需要引入这个环境下的一些基础设施，比如网络通信框架，图片缓存框架，数据持久化框架等。</p>\n<p>小组件本身的生命周期是一个很有意思的点。直白的来讲小组件的生命周期是和桌面进程一致的，但这不意味着小组件能随时的执行代码完成业务。小组件使用 Timeline 定义好的数据来渲染视图，我们的代码只能在刷新 Timeline (<code class=\"language-text\">getTimeline</code>)和创建快照（<code class=\"language-text\">getSnapshot</code>）时执行。一般而言，在刷新 Timeline 时获取网络数据，在创建快照时渲染合适的视图。</p>\n<p>大多数情况下都需要使用数据来驱动视图展示。这个数据可以通过网络请求获得，也可以利用 App Groups 的共享机制从 App 中获取。</p>\n<p>在刷新 Time Line 时获取到数据后，即可按照业务需求合成 Timeline。Timeline 是一个以 <code class=\"language-text\">TimelineEntry</code> 为元素的数组。 <code class=\"language-text\">TimelineEntry</code> 包含一个 <code class=\"language-text\">date</code> 的时间对象，用以告知系统在何时使用此对象来创建小组件的快照。也可以继承 <code class=\"language-text\">TimelineEntry</code> ，加入业务所需要的数据模型或其他信息。</p>\n<p>为了使小组件展示视图，需要用 SwiftUI 来完成对小组件的布局和样式搭建。在下面会介绍如何实现布局和样式。</p>\n<p>在用户点击小组件后，会打开 App，并调用 <code class=\"language-text\">AppDelegate</code> 的 <code class=\"language-text\">openURL:</code> 方法。我们需要在 <code class=\"language-text\">openURL:</code> 中处理这个事件，使用户直接跳转至所需的页面或调用某个功能。</p>\n<p>最后，如果需要开放给用户小组件的自定义选项，则使用 <code class=\"language-text\">Intents</code> 框架，预先定义好数据结构，并在用户编辑小组件提供数据，系统会根据数据来绘制界面。用户选择的自定义数据都会在刷新 Time Line (<code class=\"language-text\">getTimeline</code>)和创建快照（<code class=\"language-text\">getSnapshot</code>）时以参数的形式提供出来，之后根据不同的自定义数据执行不同的业务逻辑即可。</p>\n<h2>App Extension</h2>\n<p>如果你已经有了 App Extension 的开发经验，可以略过这个章节。</p>\n<p>按照苹果的说法：App Extension 可以将自定义功能和内容扩展到应用程序之外，并在用户与其他应用程序或系统交互时向用户提供。例如，您的应用可以在主屏幕上显示为小部件。也就是说小组件是一种 App Extension，小组件的开发工作，基本都在 App Extension 的环境中。</p>\n<p>App 和 App Extension有什么关系？</p>\n<p>本质上是两个独立的程序，你的主程序既不可以访问 App Extension 的代码，也不可以访问其存储空间，这完完全全就是两个进程、两个程序。App Extension 依赖你的 App 本体作为载体，如果将 App 卸载，那么 App Extension 也不会存在于系统中了。而且 App Extension 的生命周期大多数都作用于特定的领域，根据用户触发的事件由系统控制来管理。</p>\n<h3>创建 App Extension 和配置文件</h3>\n<p>下面简述一下如何创建小组件的 App Extension并配置证书环境。</p>\n<p>在 Xcode 中新增一个 Widget Extension（路径如下：File-New-Target-iOS选项卡-Widget Extension）。如果你需要小组件的自定义功能，则不要忘记勾选 <code class=\"language-text\">Include Configuration Intent</code>。</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4403686267/d480/dbbb/8273/8a64e3a9a1ed08d38917d3c7c62e4ae2.jpg\" alt=\"创建 App Extension 第一步\"></p>\n<p>在 Widget Extension 的 Target 中添加 App Groups，并保持和主程序相同的 App Group ID 。如果主程序中还没有App Groups，则需要这个时候同时增加主 App 的 App Groups，并定义好 Group ID。</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4403734752/c597/c074/6172/f186dadce106d73434db96541d474936.jpg\" alt=\"创建 App Extension 第二步\"></p>\n<p>如果你的开发者账号登录在 Xcode 中，那么此时应用程序的配置文件和 App ID 等配置都会是正确的。如果你没有登录 Xcode 中，则需要前往苹果开发者中心，手动创建 App Extension 的 App ID 和配置文件。此时不要忘记在 App ID 中配置 App Groups。</p>\n<h3>App Groups 数据通信</h3>\n<p>因为 App 和 App Extension 是不能直接通讯的，所以需要共享信息时，需要使用 App Groups 来进行通讯。App Groups 有两种共享数据的方式，<code class=\"language-text\">NSUserDefaults</code>和<code class=\"language-text\">NSFileManager</code>。</p>\n<h4>NSUserDefaults 共享数据</h4>\n<p>使用 NSUserDefaults 的 <code class=\"language-text\">initWithSuiteName:</code> 初始化实例。 <code class=\"language-text\">suitename</code>传入之前定义好的 App GroupID。</p>\n<div class=\"gatsby-highlight\" data-language=\"objc\"><pre class=\"language-objc\"><code class=\"language-objc\">- (instancetype)initWithSuiteName:(NSString *)suitename;</code></pre></div>\n<p>之后即可使用<code class=\"language-text\">NSUserDefaults</code>的实例的存取方法来储存和获取共享数据了。比如我们需要和小组件共享当前的用户信息，则可以如下操作。</p>\n<div class=\"gatsby-highlight\" data-language=\"objc\"><pre class=\"language-objc\"><code class=\"language-objc\">//使用 Groups ID 初始化一个供 App Groups 使用的 NSUserDefaults 对象\nNSUserDefaults *userDefaults = [[NSUserDefaults alloc] initWithSuiteName:@&quot;group.company.appGroupName&quot;];\n\n//写入数据\n[userDefaults setValue:@&quot;123456789&quot; forKey:@&quot;userID&quot;];\n\n//读取数据\nNSString *userIDStr = [userDefaults valueForKey:@&quot;userID&quot;];</code></pre></div>\n<h4>NSFileManager 共享数据</h4>\n<p>使用 NSFileManager 的 <code class=\"language-text\">containerURLForSecurityApplicationGroupIdentifier:</code> 获取 App Group 共享的储存空间地址，即可进行文件的存取操作。</p>\n<div class=\"gatsby-highlight\" data-language=\"objc\"><pre class=\"language-objc\"><code class=\"language-objc\">- (NSURL *)containerURLForSecurityApplicationGroupIdentifier:(NSString *)groupIdentifier;</code></pre></div>\n<h2>SwiftUI 构建组件</h2>\n<p>应该是基于耗电量等方面的考量，苹果要求小组件只能使用 SwiftUI ，也不能通过 <code class=\"language-text\">UIViewRepresentable</code> 桥接 <code class=\"language-text\">UIKit</code> 来使用。</p>\n<p>小组件的交互方式简单，只有点击，且视图较小。开发所需要的 SwiftUI 知识比较简单，合理构建出小组件视图即可，一般而言不会涉及到数据绑定等操作。</p>\n<p>这个章节主要介绍如何使用 SwiftUI 构建小组件，我会假设读者已经有了对 SwiftUI 的基础知识。如果你对 SwiftUI 还较为陌生，可以通过参考资料中的两个视频教程来增进了解(<a href=\"https://www.bilibili.com/video/BV1Ht4y1y7CE\">【十五分钟搞懂SwiftUI】布局篇</a>/<a href=\"https://www.bilibili.com/video/BV1o54y1i7xJ\">【十五分钟搞懂SwiftUI】样式篇</a>)。也可以查阅开发文档或者 WWDC19/20 的相关专题获取 SwiftUI 更多知识。</p>\n<h3>使用 SwiftUI 完成小组件视图</h3>\n<p>下面使用一个简单的开发例子，来帮助大家使用 SwiftUI 开发小组件视图。</p>\n<p>首先看小组件的视觉稿：</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4406974564/7486/bec8/c6f2/8c8e432c39a04f59b364355e5977480f.png\" alt=\"小组件视觉稿\"></p>\n<p>简单分析一下视觉稿中的视图元素：</p>\n<ol>\n<li>铺满全部的背景图片(<code class=\"language-text\">Image</code>)</li>\n<li>从底部至上的黑色渐变(<code class=\"language-text\">LinearGradient</code>)</li>\n<li>右上角的云音乐 Logo(<code class=\"language-text\">Image</code>)</li>\n<li>小组件中间的日历图标(<code class=\"language-text\">Image</code>)</li>\n<li>日历图标下面两行文字(<code class=\"language-text\">Text</code>)</li>\n</ol>\n<p>通过分析，不难发现要实现视觉稿的效果，需要使用 <code class=\"language-text\">Text</code> 、<code class=\"language-text\">Image</code> 、 <code class=\"language-text\">LinearGradient</code> 三个组件即可完成。</p>\n<p>将视觉元素 1/2/3 归为背景视图，方便其他组件复用。随后把组件内容类型相关的 4/5 归为前景视图。</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4406974501/e131/fb32/16fd/8bdb0cb190ea16f2a888e5dc0d881090.png\" alt=\"小组件视图分析\"></p>\n<p>先来实现背景视图：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">WidgetSmallBackgroundView</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token comment\">// 底部遮罩的占比为整体高度的 40%</span>\n    <span class=\"token keyword\">var</span> contianerRatio <span class=\"token punctuation\">:</span> <span class=\"token builtin\">CGFloat</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.4</span>\n    \n    <span class=\"token comment\">// 背景图片</span>\n    <span class=\"token keyword\">var</span> backgroundImage <span class=\"token punctuation\">:</span> <span class=\"token builtin\">Image</span> <span class=\"token operator\">=</span> <span class=\"token function\">Image</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"backgroundImageName\"</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">// 从上到下的渐变颜色</span>\n    <span class=\"token keyword\">let</span> gradientTopColor <span class=\"token operator\">=</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span>hex<span class=\"token punctuation\">:</span><span class=\"token number\">0x000000</span><span class=\"token punctuation\">,</span> alpha<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> gradientBottomColor <span class=\"token operator\">=</span> <span class=\"token function\">Color</span><span class=\"token punctuation\">(</span>hex<span class=\"token punctuation\">:</span><span class=\"token number\">0x000000</span><span class=\"token punctuation\">,</span> alpha<span class=\"token punctuation\">:</span> <span class=\"token number\">0.35</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">// 遮罩视图 简单封装 使代码更为直观</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function\">gradientView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">LinearGradient</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">LinearGradient</span><span class=\"token punctuation\">(</span>gradient<span class=\"token punctuation\">:</span> <span class=\"token function\">Gradient</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>gradientTopColor<span class=\"token punctuation\">,</span> gradientBottomColor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> startPoint<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">,</span> endPoint<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>bottom<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> some <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 使用 GeometryReader 获取小组件的大小</span>\n        <span class=\"token builtin\">GeometryReader</span><span class=\"token punctuation\">{</span> geo <span class=\"token keyword\">in</span>\n            <span class=\"token comment\">// 使用 ZStack 叠放 logo 图标 和 底部遮罩</span>\n            <span class=\"token builtin\">ZStack</span><span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 构建 logo 图标, 使用 frame 确定图标大小, 使用 position 定位图标位置</span>\n                <span class=\"token function\">Image</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"icon_logo\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">resizable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">scaledToFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> geo<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>width <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">ignoresSafeArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>all<span class=\"token punctuation\">)</span>\n\n                <span class=\"token comment\">// 构建 遮罩视图, 使用 frame 确定遮罩大小, 使用 position 定位遮罩位置</span>\n                <span class=\"token function\">gradientView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> geo<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> geo<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>height <span class=\"token operator\">*</span> <span class=\"token function\">CGFloat</span><span class=\"token punctuation\">(</span>contianerRatio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> geo<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>width <span class=\"token operator\">/</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> geo<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>height <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token function\">CGFloat</span><span class=\"token punctuation\">(</span>contianerRatio <span class=\"token operator\">/</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> geo<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> geo<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// 添加上覆盖底部的背景图片</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">background</span><span class=\"token punctuation\">(</span>backgroundImage\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">resizable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">scaledToFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>背景视图完成的效果如下图：</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4406974668/f845/cd92/c056/1168fbc8eb3e13a8f9aed89dd4fd48d6.png\" alt=\"小组件背景视图\"></p>\n<p>接下来把背景视图放置在小组件的视图中，并实现中间的图标和文案视图，这样就完成了整个组件的视觉构建过程：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">WidgetSmallView</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token comment\">// 设置大图标的宽高为小组件高度的 40%</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function\">bigIconWidgetHeight</span><span class=\"token punctuation\">(</span>viewHeight<span class=\"token punctuation\">:</span><span class=\"token builtin\">CGFloat</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">CGFloat</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> viewHeight <span class=\"token operator\">*</span> <span class=\"token number\">0.4</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> some <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token builtin\">GeometryReader</span><span class=\"token punctuation\">{</span> geo <span class=\"token keyword\">in</span>\n            <span class=\"token function\">VStack</span><span class=\"token punctuation\">(</span>alignment<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">,</span> spacing <span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">Image</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"iconImageName\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">resizable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">scaledToFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token function\">bigIconWidgetHeight</span><span class=\"token punctuation\">(</span>viewHeight<span class=\"token punctuation\">:</span> geo<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token function\">bigIconWidgetHeight</span><span class=\"token punctuation\">(</span>viewHeight<span class=\"token punctuation\">:</span> geo<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                \n                <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"每日推荐\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">foregroundColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>white<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">font</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token function\">system</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">fontWeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>medium<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">lineLimit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">:</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span>\n                \n                <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"为你带来每日惊喜\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">foregroundColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>white<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">font</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token function\">system</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">fontWeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>regular<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">opacity</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">lineLimit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// 增加 padding 使 Text 过长时不会触及小组件边框</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token function\">EdgeInsets</span><span class=\"token punctuation\">(</span>top<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> leading<span class=\"token punctuation\">:</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> bottom<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> trailing<span class=\"token punctuation\">:</span> <span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">frame</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> geo<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> geo<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span> alignment<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// 设置背景视图</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">background</span><span class=\"token punctuation\">(</span><span class=\"token function\">WidgetSmallBackgroundView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>通过上述简单的例子可以发现，在常规的流式布局中，使用 <code class=\"language-text\">VStack</code> 和 <code class=\"language-text\">HStack</code> 即可达到布局效果。而如果想要实现例子中 logo 图标的效果的话，就需要使用 <code class=\"language-text\">position/offset</code> 来改变定位坐标来达成目标了。</p>\n<h3>关于 Link 视图的一点补充</h3>\n<p>Link 是一个可以点击的视图，如果可能的话，它将在关联的应用程序中打开，否则将在用户的默认Web浏览器中打开。中/大尺寸的小组件可以用它来给点击区域设定不同的跳转参数。因为上面的例子是小尺寸的组件，不能使用 Link 来区分跳转，所以在这里补充一下。</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token function\">Link</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"View Our Terms of Service\"</span><span class=\"token punctuation\">,</span> destination<span class=\"token punctuation\">:</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://www.example.com/TOS.html\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>获取数据</h2>\n<h3>网络请求</h3>\n<p>小组件中可以使用 <code class=\"language-text\">URLSession</code>，所以网络请求和 App 中基本一致，在此就不赘述了。</p>\n<p>需要注意的点：</p>\n<ol>\n<li>使用第三方框架需要引入小组件所在的 Target。</li>\n<li>在刷新 Timeline 时调用网络请求。</li>\n<li>如果需要和 App 共享信息，则需要通过 App Group 的方式存取。</li>\n</ol>\n<h3>图片的加载缓存</h3>\n<p>图片缓存则和 App 中不同。目前在 SwiftUI 中的 <code class=\"language-text\">Image</code> 视图不支持传入 URL 加载网络图片。也不能使用异步获取网络图片的 <code class=\"language-text\">Data</code>的方式完成网络图片的加载。\n只能通过刷新 Timeline ，调用网络请求完成后，再去获取 Timeline 上所有的网络图片的 <code class=\"language-text\">data</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">    <span class=\"token keyword\">func</span> <span class=\"token function\">getTimeline</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span> configuration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Intent</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> context<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Context</span><span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">Timeline</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Entry</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 发起网络请求</span>\n        widgetManager<span class=\"token punctuation\">.</span><span class=\"token function\">requestAPI</span><span class=\"token punctuation\">(</span>family <span class=\"token punctuation\">:</span> context<span class=\"token punctuation\">.</span>family<span class=\"token punctuation\">,</span> configuration<span class=\"token punctuation\">:</span> configuration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> widgetResponse<span class=\"token punctuation\">,</span> date <span class=\"token keyword\">in</span>\n            <span class=\"token comment\">// 在接口回调中生成 Timeline entry</span>\n            <span class=\"token keyword\">let</span> entry <span class=\"token operator\">=</span> <span class=\"token function\">WidgetEntry</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">:</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> configuration<span class=\"token punctuation\">:</span> configuration<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">:</span> widgetResponse<span class=\"token punctuation\">,</span> family <span class=\"token punctuation\">:</span> context<span class=\"token punctuation\">.</span>family<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// 解析出 Timeline entry 所需要的网络图片</span>\n            <span class=\"token keyword\">let</span> urls <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">urlsNeedDownload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// 查询本地缓存以及下载网络图片</span>\n            <span class=\"token function\">WidgetImageManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getImages</span><span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">:</span> urls<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">let</span> entries <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>entry<span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">let</span> timeline <span class=\"token operator\">=</span> <span class=\"token function\">Timeline</span><span class=\"token punctuation\">(</span>entries<span class=\"token punctuation\">:</span> entries<span class=\"token punctuation\">,</span> policy<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">after</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>timeline<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">getImages</code> 方法中，我们需要维护一个队列去依次查询本地缓存以及在缓存未命中时下载网络图片。</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> <span class=\"token function\">getImages</span><span class=\"token punctuation\">(</span>urls <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> complition <span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        \n        <span class=\"token comment\">// 创建目录</span>\n        <span class=\"token builtin\">WidgetImageManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">createImageSaveDirIfNeeded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\">// 去重</span>\n        <span class=\"token keyword\">let</span> urlSet <span class=\"token operator\">=</span> <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">let</span> urlArr <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>urlSet<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>complition <span class=\"token operator\">=</span> complition\n        \n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>queue <span class=\"token operator\">=</span> <span class=\"token builtin\">OperationQueue</span><span class=\"token punctuation\">.</span>main\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>queue<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>maxConcurrentOperationCount <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\n        <span class=\"token keyword\">let</span> finishBlock <span class=\"token operator\">=</span> <span class=\"token builtin\">BlockOperation</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>complition<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">for</span> url <span class=\"token keyword\">in</span> urlArr <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> op <span class=\"token operator\">=</span> <span class=\"token builtin\">SwiftOperation</span> <span class=\"token punctuation\">{</span> finish <span class=\"token keyword\">in</span>\n                <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">getImage</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">finish</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            \n            finishBlock<span class=\"token punctuation\">.</span><span class=\"token function\">addDependency</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>queue<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">addOperation</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>queue<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">addOperation</span><span class=\"token punctuation\">(</span>finishBlock<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> <span class=\"token function\">getImage</span><span class=\"token punctuation\">(</span>url <span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">,</span> complition <span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> path <span class=\"token operator\">=</span> <span class=\"token builtin\">WidgetImageManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">pathFromUrl</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> url<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">FileManager</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">.</span><span class=\"token function\">fileExists</span><span class=\"token punctuation\">(</span>atPath<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">complition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">let</span> safeUrl <span class=\"token operator\">=</span> <span class=\"token builtin\">WidgetImageManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">filterUrl</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> url<span class=\"token punctuation\">)</span>\n        <span class=\"token builtin\">WidgetHttpClient</span><span class=\"token punctuation\">.</span>shareInstance<span class=\"token punctuation\">.</span><span class=\"token function\">download</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> safeUrl<span class=\"token punctuation\">,</span> dstPath<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n            <span class=\"token function\">complition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>预览状态的数据获取</h3>\n<p>在用户添加小组件时，会在预览界面看到小组件的视图。此时，系统会触发小组件的 <code class=\"language-text\">placeholder</code> 方法，我们需要在这个方法中返回一个 Timeline，用以渲染出预览视图。</p>\n<p>为了保证用户的体验，需要为接口调用准备一份本地的兜底数据，确保用户可以在预览界面看到真实的视图，尽量不要展示无数据的骨架屏。</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4405113912/316c/1718/ece0/5dc812bffc1a8939bcb28c5c0010bb5b.png\" alt=\"PreviewStatus\"></p>\n<h2>TimeLine</h2>\n<p>小组件的内容变化都依赖于 Timeline 。小组件本质上是 Timeline 驱动的一连串静态视图。</p>\n<h3>理解 TimeLine</h3>\n<p>在前面提到过，Timeline 是一个以 <code class=\"language-text\">TimelineEntry</code> 为元素的数组。 <code class=\"language-text\">TimelineEntry</code> 包含一个 <code class=\"language-text\">date</code> 的时间对象，用以告知系统在何时使用此对象来创建小组件的快照。也可以继承 <code class=\"language-text\">TimelineEntry</code> ，加入业务所需要的数据模型或其他信息。</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4403832891/fa8e/c615/2e72/af29c1d5fbdb466382dfb3a4bd16c594.jpg\" alt=\"TimeLine\"></p>\n<p>在生成新的 Timeline 之前，系统会一直使用上一次生成的 Timeline 来展示数据。</p>\n<p>如果 Timeline 数组里面只有一个 entry ，那么视图就是一成不变的。假如需要小组件随着时间产生变化，可以在 Timeline 中生成多个 entry 并赋予他们合适的时间，系统就会在指定的时间使用 entry 来驱动视图。</p>\n<h3>Reload</h3>\n<p>所谓的小组件刷新，其实是刷新了 Timeline ，导致由 Timeline 数据驱动的小组件视图发生了改变。</p>\n<p>刷新方法分为两种：</p>\n<ol>\n<li>System reloads</li>\n<li>App-driven reloads</li>\n</ol>\n<h4>System reloads</h4>\n<p>由系统发起的 Timeline 刷新。系统决定每个不同的 Timeline 的 System Reloads 的频次。超过频次的刷新请求将不会生效。高频使用的小组件可以获得更多的刷新频次。</p>\n<p><strong>ReloadPolicy:</strong>\n在生成 Timeline 时，我们可以定义一个 ReloadPolicy ，告诉系统更新 Timeline 的时机。ReloadPolicy 有三种形式：</p>\n<ul>\n<li>\n<p>atEnd</p>\n<ul>\n<li>在 Timeline 提供的所有 entry 显示完毕后刷新，也就是说只要还有没有显示的 entry 在就不会刷新当前时间线</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4403852714/c1b1/6ab5/9dfc/85029495ab46402d099cd2540e828839.jpg\" alt=\"ReloadPolicyAtEnd\"></p>\n<ul>\n<li>\n<p>after(date)</p>\n<ul>\n<li>date 是指定的下次刷新的时间，系统会在这个时间对 Timeline 进行刷新。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4403865293/7d84/d51b/d49e/d0896f84748a44f4500b4f025040d532.jpg\" alt=\"ReloadPolicyAfter\"></p>\n<ul>\n<li>\n<p>never</p>\n<ul>\n<li>ReloadPolicy 永远不会刷新 Timeline，最后一个 entry 也展示完毕之后 小组件就会一直保持那个 entry 的显示内容</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4403873272/b826/1293/b5a8/b79d6b2c3962b6b7c2220993c6c90e1a.jpg\" alt=\"ReloadPolicyNever\"></p>\n<blockquote>\n<p> Timeline Reload 的时机是由系统统一控制的，而为了保证性能，系统会根据各个 Reload 请求的重要等级来决定在某一时刻是否按照 APP 要求的刷新时机来刷新 Timeline。因此如果过于频繁的请求刷新 Timeline，很有可能会被系统限制从而不能达到理想的刷新效果。换句话说，上面所说的 atEnd, after(date) 中定义的刷新 Timeline 的时机可以看作刷新 Timeline 的最早时间，而根据系统的安排，这些时机可能会被延后。</p>\n</blockquote>\n<h4>App-driven reloads</h4>\n<p>由 App 触发小组件 Timeline 的刷新。当 App 在后台时，后台推送可以触发 reload；当 App 在前台时，通过 WidgetCenter 可以主动触发 reload 。</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4403892720/c23f/b711/0b93/65eff1bfcb14b4991a1da9921823cdcc.jpg\" alt=\"App-driven Reloads\"></p>\n<p>调用 WidgetCenter 可以根据 <code class=\"language-text\">kind</code> 标识符刷新部分小组件，也可以刷新全部小组件。</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">/// Reloads the timelines for all widgets of a particular kind.</span>\n<span class=\"token comment\">/// - Parameter kind: A string that identifies the widget and matches the</span>\n<span class=\"token comment\">///   value you used when you created the widget's configuration.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> <span class=\"token function\">reloadTimelines</span><span class=\"token punctuation\">(</span>ofKind kind<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/// Reloads the timelines for all configured widgets belonging to the</span>\n<span class=\"token comment\">/// containing app.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">func</span> <span class=\"token function\">reloadAllTimelines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>点击落地</h2>\n<p>用户点击了小组件上的内容或功能入口时，需要在打开 App 后正确响应用户的需求，呈现给用户相应的内容或功能。\n这需要分两部分来做，首先在小组件中对不同的点击区域定义不同的参数，之后在 App 的 <code class=\"language-text\">openURL:</code> 中根据不同的参数呈现不同的界面。</p>\n<h3>区分不同的点击区域</h3>\n<p>想要对于不同的区域定义不同的参数，需要把 widgetURL 和 Link 结合使用。</p>\n<h4>widgetURL</h4>\n<p>widgetURL 作用范围是整个小组件，且一个小组件上只能有一个 widgetURL 。多添加的 widgetURL 参数是不会生效的。</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4403915829/4606/3413/e7c6/3482bd5f93f2280ce8d901d0792ce440.png\" alt=\"widgetURL\"></p>\n<p>代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">WidgetLargeView</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> some <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">GeometryReader</span><span class=\"token punctuation\">{</span> geo <span class=\"token keyword\">in</span>\n            <span class=\"token function\">WidgetLargeTopView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">widgetURL</span><span class=\"token punctuation\">(</span><span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token string\">\"jump://Large\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Link</h4>\n<p>Link 作用范围是 Link 组件的实际大小。可以添加多个 Link ，在数量上是没有限制的。需要注意的是小组件的 systemSmall 类型下，不能使用 Link API。</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4403925174/2a48/aa88/0f45/5fba3083e07aa27ccf7d142945f25e40.jpg\" alt=\"Link\"></p>\n<p>代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">WidgetLargeView</span> <span class=\"token punctuation\">:</span> <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> some <span class=\"token builtin\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">GeometryReader</span><span class=\"token punctuation\">{</span> geo <span class=\"token keyword\">in</span>\n            <span class=\"token function\">WidgetLargeTopView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">Link</span><span class=\"token punctuation\">(</span>destination<span class=\"token punctuation\">:</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token string\">\"自定义的Scheme://Unit\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">WidgetLargeUnitView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">widgetURL</span><span class=\"token punctuation\">(</span><span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token string\">\"自定义的Scheme://Large\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>URL Schemes</h3>\n<p>URL Schemes 是小组件跳转到 App 的桥梁，也是 App 之间相互跳转的通道。一般的开发者对其应该并不陌生。</p>\n<p>注册自定义 URL Scheme 非常简单，通过 <code class=\"language-text\">info.plist</code> --> <code class=\"language-text\">URL Types</code> --> <code class=\"language-text\">item0</code> --> <code class=\"language-text\">URL Schemes</code> --> <code class=\"language-text\">自定义的Scheme</code> 来设置。</p>\n<p>之后，在小组件中，即可通过 <code class=\"language-text\">自定义的Scheme://</code> 拼接成的 URL 对象来打开自己的 App ，在 <code class=\"language-text\">://</code> 后面可以增加参数来表明所需要功能或内容。</p>\n<p>需要注意：增加参数时，出现的中文要进行转义。这里可以使用 <code class=\"language-text\">NSURLComponents</code> 和 <code class=\"language-text\">NSURLQueryItem</code> 来拼接跳转 URL 字符串。自带转义效果且操作 URL 更加规范。</p>\n<div class=\"gatsby-highlight\" data-language=\"objc\"><pre class=\"language-objc\"><code class=\"language-objc\">NSURLComponents *components = [NSURLComponents componentsWithString:@&quot;自定义的Scheme://&quot;];\nNSMutableArray&lt;NSURLQueryItem *&gt; *queryItems = @[].mutableCopy;\nNSURLQueryItem *aItem = [NSURLQueryItem queryItemWithName:@&quot;a&quot; value:@&quot;参数a&quot;];\n[queryItems addObject:aItem];\nNSURLQueryItem *bItem = [NSURLQueryItem queryItemWithName:@&quot;b&quot; value:@&quot;参数b&quot;];\n[queryItems addObject:bItem];\ncomponents.queryItems = queryItems;\n\nNSURL *url = components.URL;</code></pre></div>\n<h3>落地 App 后的处理</h3>\n<p>点击小组件跳转 App 后会触发 AppDelegate 的 openURL 方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"objc\"><pre class=\"language-objc\"><code class=\"language-objc\">- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary&lt;UIApplicationOpenURLOptionsKey,id&gt; *)options</code></pre></div>\n<p>在 openURL 方法中，通过解析 url 参数，明确用户需要的功能跳转或内容的展示，随后进行对应的实现。这对项目的路由能力提出了一定的要求，因和小组件开发联系不大，不做详述。</p>\n<h2>动态配置小组件</h2>\n<p>小组件支持用户在不打开应用的情况下配置自定义数据，使用 <code class=\"language-text\">Intents</code> 框架，可以定义用户在编辑小组件时看到的配置页面。\n这里用的词的定义而不是绘制，是因为只能通过 <code class=\"language-text\">Intents</code> 来生成配置数据，系统会根据生成的数据来构建配置页面。</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4510550828/3988/d43f/48b2/363fd0997da54079cda928815dd215db.png\" alt=\"ConfigurationWidget\"></p>\n<h3>构建一个简单的自定义功能</h3>\n<p>构建一个简单的自定义功能需要两步：</p>\n<ol>\n<li>创建和配置 IntentDefinition 文件</li>\n<li>修改 Widget 的相关参数支持 ConfigurationIntent 。</li>\n</ol>\n<h4>1. 创建和配置 IntentDefinition 文件</h4>\n<p>如果你在创建小组件 Target 时勾选了 <code class=\"language-text\">Include Configuration Intent</code> ，Xcode 会自动生成 <code class=\"language-text\">IntentDefinition</code> 文件。</p>\n<p>假如没有勾选 <code class=\"language-text\">Include Configuration Intent</code> 选项，那么你需要手动添加 <code class=\"language-text\">IntentDefinition</code> 文件。</p>\n<p>菜单 <code class=\"language-text\">File</code> -> <code class=\"language-text\">New</code> -> <code class=\"language-text\">File</code> 然后找到 <code class=\"language-text\">Siri Intent Definition File</code> 之后添加到小组件 Target 中。</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4404040363/cbe2/e3d1/4fe7/8ad0858109670115d2a8f7a1ac9f9509.jpg\" alt=\"IntentDefinition1\"></p>\n<p>创建文件后，打开 <code class=\"language-text\">.intentdefinition</code> 文件进行配置。</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4404047921/73cb/b73d/cb1f/93b6769928e0968911288ebd4987ac42.jpg\" alt=\"IntentDefinition2\"></p>\n<p>首先需要记住左侧的 Custom Class 中的类名，Xcode 会根据这个名称，在编译后自动生成一个 ConfigurationIntent 类，这个类储存了用户配置信息。当然这里也可以填写一个你指定的类名，需要注意项目编译过后才会生成这个类。</p>\n<p>然后我们需要创建自定义参数模板，点击<code class=\"language-text\">Parameter</code> 下方的 <code class=\"language-text\">+</code> 号即可创建一个参数。\n之后可以定义创建出的 Parameter 的 Type ，除了相对直观的系统类型以外，还有两个比较难以理解的 Enums 和 Types 分栏。</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4404058539/e8bb/edc6/57ac/4966033d1ab92bc2a4db126b687816f4.jpg\" alt=\"IntentDefinition3\"></p>\n<p><strong>系统类型</strong></p>\n<p>特定的类型有近一步的自定义选项来定制输入 UI。例如，Decimal 类型可以选择采用输入框（Number Field）输入或者是滑块（Slider）输入，同时可以定制输入的上下限；Duration 类型可以定制输入值的单位为秒、分或者时；Date Components 可以指定输入日期还是时间，指定日期的格式等等。</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4404078962/3c1f/94a2/55b2/0e969fa9b5ed1c7cfa704ba17415321d.jpg\" alt=\"IntentDefinitionSystemType\"></p>\n<p><strong>Enum</strong>\n简单的理解就是 Enums 是写死在 <code class=\"language-text\">.intentdefinition</code> 文件中的静态配置，只有发版才可以更新。</p>\n<p><strong>Type</strong>\nTypes 就灵活多了，可以在运行时动态的生成，一般而言我们使用 Types 来做自定义选项。</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4404091464/214c/6e17/96d0/03a322fd79eae5c4c84673a6a99a0dcc.jpg\" alt=\"IntentDefinitionType\"></p>\n<p><strong>支持输入多个值</strong></p>\n<p>大部分类型的参数支持输入多个值，即输入一个数组。同时，支持根据不同的 Widget 大小，限制数组的固定长度。</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4404106402/b8b8/4b17/6500/1ed08e69dda3d30d1042efd84a7f2958.jpg\" alt=\"IntentDefinitionFixedSize\"></p>\n<p><strong>控制配置项的显示条件</strong></p>\n<p>可以控制某一个配置项，只在另一个配置项含有任何/特定值时展示。如下图，日历 App 的 Up Next Widget，仅在 Mirror Calendar App 选项没有被选中时，才会显示 Calendars 配置项。</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4404144573/e6f8/91f1/62c9/6b16d86dc353ae01eb3927251fb79bc4.jpg\" alt=\"IntentDefinitionParametersControl1\"></p>\n<p>在 Intent 定义文件中，将某一个参数 A，设置为另一个参数 B 的 <code class=\"language-text\">Parent Parameter</code> ，这样，参数 B 的显示与否就取决于参数 A 的值。</p>\n<p>例如，在下图中，<code class=\"language-text\">calendar</code> 参数仅在 <code class=\"language-text\">mirrorCalendarApp</code> 参数的值为 <code class=\"language-text\">false</code> 时展示：</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4404162564/edc0/c91c/faa1/ed993d4e3395c94e97f567646a5175d5.jpg\" alt=\"IntentDefinitionParametersControl2\"></p>\n<h4>2. 修改 Widget 的相关参数支持 ConfigurationIntent</h4>\n<p><strong>替换 Widget 类中的 <code class=\"language-text\">StaticConfiguration</code> 为 <code class=\"language-text\">IntentConfiguration</code></strong></p>\n<p>旧：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">@main\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">MyWidget</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Widget</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> kind<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"MyWidget\"</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> some <span class=\"token builtin\">WidgetConfiguration</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">StaticConfiguration</span><span class=\"token punctuation\">(</span>kind<span class=\"token punctuation\">:</span> kind<span class=\"token punctuation\">,</span> provider<span class=\"token punctuation\">:</span> <span class=\"token function\">Provider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> entry <span class=\"token keyword\">in</span>\n            <span class=\"token function\">MyWidgetEntryView</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">:</span> entry<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>新：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">@main\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">MyWidget</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Widget</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> kind<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"MyWidget\"</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> some <span class=\"token builtin\">WidgetConfiguration</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">IntentConfiguration</span><span class=\"token punctuation\">(</span>kind<span class=\"token punctuation\">:</span> kind<span class=\"token punctuation\">,</span> intent<span class=\"token punctuation\">:</span> <span class=\"token builtin\">WidgetConfiguratIntent</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> provider<span class=\"token punctuation\">:</span> <span class=\"token function\">Provider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> entry <span class=\"token keyword\">in</span>\n            <span class=\"token function\">MyWidgetEntryView</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">:</span> entry<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>在 Timeline Entry 类中增加 ConfigurationIntent 参数</strong></p>\n<p>代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">SimpleEntry</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">TimelineEntry</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> date<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Date</span>\n    <span class=\"token keyword\">let</span> configuration<span class=\"token punctuation\">:</span> <span class=\"token builtin\">WidgetConfiguratIntent</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>修改 IntentTimelineProvider 的继承</strong></p>\n<p><code class=\"language-text\">Provider</code> 的继承改成 <code class=\"language-text\">IntentTimelineProvider</code>，并且增加 <code class=\"language-text\">Intent</code> 的类型别名。</p>\n<p>旧：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">Provider</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">TimelineProvider</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>新：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">Provider</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">IntentTimelineProvider</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">typealias</span> <span class=\"token builtin\">Intent</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">WidgetConfiguratIntent</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>依次修改 getSnapshot / getTimeline 的入参以增加对自定义的支持。并在创建 Timeline Entry 时，传入 configuration 。</p>\n<h3>使用接口数据构建自定义入口</h3>\n<p>在 <code class=\"language-text\">Intent</code> Target 中，找到 <code class=\"language-text\">IntentHandler</code> 文件，遵守 ConfigurationIntent 生成类中 <code class=\"language-text\">ConfiguratIntentHandling</code> 协议。</p>\n<p>实现协议要求的 <code class=\"language-text\">provideModeArrOptionsCollectionForConfiguration:withCompletion:</code> 方法。</p>\n<p>在这个方法中，我们可以调用接口获取自定义数据，生成 <code class=\"language-text\">completion</code> block 所需要的数据源入参。 </p>\n<div class=\"gatsby-highlight\" data-language=\"objc\"><pre class=\"language-objc\"><code class=\"language-objc\">- (void)provideModeArrOptionsCollectionForConfiguration:(WidgetConfiguratIntent *)intent withCompletion:(void (^)(INObjectCollection&lt;NMWidgetModel *&gt; * _Nullable modeArrOptionsCollection, NSError * _Nullable error))completion {\n    \n    [self apiRequest:(NSDictionary *result){\n        // 处理获取到的数据\n        ....\n        NSMutableArray *allModelArr = ....;\n        // 生成配置所需要的数据\n        INObjectCollection *collection = [[INObjectCollection alloc] initWithItems:allModeArr];\n        completion(collection,nil);\n    }];\n}</code></pre></div>\n<h3>小组件获取自定义参数</h3>\n<p>在小组件根据 Timeline Entry 生成视图时，读取 Entry 的 configuration 属性即可获取用户是否自定义属性，以及自定义属性的详细值。</p>\n<h2>总结</h2>\n<h3>优势和缺点并存</h3>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/4404181952/c3e3/f914/33c3/d67943114f86a95cd06c387c97f360af.jpg\" alt=\"WidgetKitWorks\"></p>\n<p>小组件是一个优缺点都非常明显的事物，在桌面即点即用确实方便，但是交互方式的匮乏以及不能实时更新数据又是非常大的缺陷。正如苹果所说：\"Widgets are not mini-apps\"，不要用开发 App 的思维来做小组件，小组件只是由一连串数据驱动的静态视图。</p>\n<h4>优势：</h4>\n<ol>\n<li>常驻桌面，大大增加了对产品的曝光。</li>\n<li>利用网络接口和数据共享，可以展示与用户相关的个性化内容。</li>\n<li>缩短了功能的访问路径。一次点击即可让用户触达所需功能。</li>\n<li>可以多次重复添加，搭配自定义和推荐算法，添加多个小组件样式和数据都可以不同。</li>\n<li>自定义配置简单。</li>\n<li>多种尺寸，大尺寸可以承载复杂度高的内容展示。</li>\n</ol>\n<h4>缺点：</h4>\n<ol>\n<li>不能实时更新数据。</li>\n<li>只能点击交互。</li>\n<li>小组件的背景不能设置透明效果。</li>\n<li>不能展示动态图像（视频/动图）。</li>\n</ol>\n<h3>尾巴</h3>\n<p>小组件的开发实践到此告一段落，可以看到组件虽小，需要的知识还是挺多的。包括 Timeline 、Intents 、SwiftUI 等平时开发很难接触到的框架和概念需要了解学习。</p>\n<p>小组件孱弱的交互能力和数据刷新机制是它的硬伤。苹果对于小组件的能力是非常克制的。在开发中，很多构思和需求都受限于框架能力无法实现，希望苹果在后续迭代中可以开放出新的能力。比如支持部分不需要启动 App 的交互形式存在。</p>\n<p>但瑕不掩瑜，向用户展示喜欢的内容或提供用户想要的功能入口，放大小组件的优势，才是当前小组件的正确开发方式。</p>\n<h2>参考资料</h2>\n<ul>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2020/10028/\">认识小组件</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2020/10034\">Widgets 边看边写-1</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2020/10035\">Widgets 边看边写-2</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2020/10036\">Widgets 边看边写-3</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2020/10194/\">使你的 Widget 支持个性化配置 &#x26; 智能化展现</a></li>\n<li><a href=\"https://sspai.com/post/61371\">从开发者的角度看 iOS 14 小组件</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1Ht4y1y7CE\">【十五分钟搞懂SwiftUI】布局篇</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1o54y1i7xJ\">【十五分钟搞懂SwiftUI】样式篇</a></li>\n</ul>\n<blockquote>\n<p>本文发布自 <a href=\"https://github.com/x-orpheus\">网易云音乐大前端团队</a>，文章未经授权禁止任何形式的转载。我们常年招收前端、iOS、Android，如果你准备换工作，又恰好喜欢云音乐，那就加入我们 grp.music-fe(at)corp.netease.com！</p>\n</blockquote>","frontmatter":{"title":"网易云音乐 iOS 14 小组件实战手册","date":"2020-10-26","description":"苹果在今年的 WWDC20 上发布了小组件（WidgetKit），支持在 iOS、iPadOS 主屏幕展示动态信息和个性化内容。作者刚刚完成云音乐小组件的初版开发工作，本文从实际开发的角度谈谈小组件开发的方方面面，希望能给大家带来帮助。"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/widgetkit/","previous":{"fields":{"slug":"/qiankun-cms/"},"frontmatter":{"title":"基于 qiankun 的 CMS 应用微前端实践"}},"next":{"fields":{"slug":"/web-track/"},"frontmatter":{"title":"前端组件化埋点的实践"}}}}}