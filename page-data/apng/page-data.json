{"componentChunkName":"component---src-templates-blog-post-js","path":"/apng/","webpackCompilationHash":"1e825c60dab279e74de2","result":{"data":{"site":{"siteMetadata":{"title":"云音乐大前端专栏","author":"云音乐大前端团队","siteUrl":"https://musicfe.dev"}},"markdownRemark":{"id":"f1254404-bb83-5a61-afb2-d93947b60ea4","excerpt":"题图来源：https://commons.wikimedia.org 本文作者：杨彩芳 写在前面 在云音乐的直播开发中会常遇到动画播放的需求，每个需求的应用场景不同，体积较小的动画大都采用 APNG 格式。 如果动画仅单独展示可以使用  直接展示 APNG 动画，但是会存在兼容性 Bug…","html":"<p><img src=\"https://p1.music.126.net/QVxQdr9RnqkHU2S87_IcSg==/109951165102779950.jpg\"></p>\n<blockquote>\n<p>题图来源：<a href=\"https://commons.wikimedia.org\">https://commons.wikimedia.org</a></p>\n</blockquote>\n<blockquote>\n<p>本文作者：杨彩芳</p>\n</blockquote>\n<h2>写在前面</h2>\n<p>在云音乐的直播开发中会常遇到动画播放的需求，每个需求的应用场景不同，体积较小的动画大都采用 APNG 格式。</p>\n<p>如果动画仅单独展示可以使用 <code class=\"language-text\">&lt;img&gt;</code> 直接展示 APNG 动画，但是会存在兼容性 Bug，例如：部分浏览器不支持 APNG 播放，Android 部分机型重复播放失效。</p>\n<p>如果需要将 APNG 动画 和 其他 DOM 元素 结合 CSS3 Animation 展示动画，APNG 就需要预加载和受控，预加载能够防止 APNG 解析花费时间，从而出现二者不同步的问题，受控能够有利于用户在 APNG 解析成功或播放结束等时间节点进行一些操作。</p>\n<p>这些问题 <a href=\"https://github.com/davidmz/apng-canvas\">apng-canvas</a> 都可以帮我们解决。apng-canvas 采用 canvas 绘制 APNG 动画，可以兼容更多的浏览器，抹平不同浏览器的差异，且便于控制 APNG 播放。下面将具体介绍 APNG 、apng-canvas 库实现原理以及在 apng-canvas 基础上增加的 WebGL 渲染实现方式。</p>\n<h2>APNG 简介</h2>\n<p>APNG（Animated Portable Network Graphics，Animated PNG）是基于 PNG 格式扩展的一种位图动画格式，增加了对动画图像的支持，同时加入了 24 位真彩色图像和 8 位 Alpha 透明度的支持，动画拥有更好的质量。APNG 对传统 PNG 保留向下兼容，当解码器不支持 APNG 播放时会展示默认图像。</p>\n<p>除 APNG 外，常见的动画格式还有 GIF 和 WebP。从浏览器兼容性、尺寸大小和图片质量三方面比较，结果如下所示（其中尺寸大小以一张图为例，其他纯色或多彩图片尺寸大小比较可查看 <a href=\"http://littlesvr.ca/apng/gif_apng_webp3.html\">GIF vs APNG vs WebP</a> ，大部分情况下 APNG 体积更小）。综合比较 APNG 更优，这也是我们选用 APNG 的原因。</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/3515572012/bc69/f332/118e/d174b90ccb3b2598e83c3a71dcc39a09.png\"></p>\n<h2>APNG 结构</h2>\n<p>APNG 是基于 PNG 格式扩展的，我们首先了解下 PNG 的组成结构。</p>\n<h3>PNG 结构组成</h3>\n<p>PNG 主要包括 <code class=\"language-text\">PNG Signature</code>、<code class=\"language-text\">IHDR</code>、<code class=\"language-text\">IDAT</code>、<code class=\"language-text\">IEND</code> 和 一些辅助块。其中，<code class=\"language-text\">PNG Signature</code> 是文件标示，用于校验文件格式是否为 PNG ；<code class=\"language-text\">IHDR</code> 是文件头数据块，包含图像基本信息，例如图像的宽高等信息；<code class=\"language-text\">IDAT</code> 是图像数据块，存储具体的图像数据，一个 PNG 文件可能有一个或多个 <code class=\"language-text\">IDAT</code> 块；<code class=\"language-text\">IEND</code> 是结束数据块，标示图像结束；辅助块位于 <code class=\"language-text\">IHDR</code> 之后 <code class=\"language-text\">IEND</code> 之前，PNG 规范未对其施加排序限制。</p>\n<p><code class=\"language-text\">PNG Signature</code> 块的大小为 8 字节，内容如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token number\">0x89</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x4e</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x47</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0d</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0a</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1a</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0a</span></code></pre></div>\n<p>其他每个块的组成结构基本如下所示：</p>\n<p><img src=\"https://p1.music.126.net/NYS69k_xp0xllza7w0Wneg==/109951165101574867.png\"></p>\n<p>4 个字节标识数据的长度，4 个字节标识块类型，length 个字节为数据（如果数据的长度 length 为 0，则无该部分），最后4个字节是CRC校验。</p>\n<h3>APNG 结构组成</h3>\n<p>APNG 在 PNG 的基础上增加了 <code class=\"language-text\">acTL</code>、<code class=\"language-text\">fcTL</code> 和 <code class=\"language-text\">fdAT</code> 3 种块，其组成结构如下图所示：</p>\n<p><img src=\"https://p1.music.126.net/zlEQJpbNxdyFe8uYkUJ1pA==/109951164795989374.png\"></p>\n<ul>\n<li><code class=\"language-text\">acTL</code>：动画控制块，包含了图片的帧数和循环次数（ 0 表示无限循环）</li>\n<li><code class=\"language-text\">fcTL</code>：帧控制块，属于 PNG 规范中的辅助块，包含了当前帧的序列号、图像的宽高及水平垂直偏移量，帧播放时长和绘制方式（dispose<em>op 和 blend</em>op）等，每一帧只有一个 <code class=\"language-text\">fcTL</code> 块</li>\n<li><code class=\"language-text\">fdAT</code>：帧数据块，包含了帧的序列号和图像数据，仅比 <code class=\"language-text\">IDAT</code> 多了帧的序列号，每一帧可以有一个或多个 <code class=\"language-text\">fcTL</code> 块。<code class=\"language-text\">fdAT</code> 的序列号与 <code class=\"language-text\">fcTL</code> 共享，用于检测 APNG 的序列错误，可选择性的纠正</li>\n</ul>\n<p><code class=\"language-text\">IDAT</code> 块是 APNG 向下兼容展示时的默认图片。如果 <code class=\"language-text\">IDAT</code> 之前有 <code class=\"language-text\">fcTL</code>， 那么 <code class=\"language-text\">IDAT</code> 的数据则当做第一帧图片（如上图结构），如果 <code class=\"language-text\">IDAT</code> 之前没有 <code class=\"language-text\">fcTL</code>，则第一帧图片是第一个 <code class=\"language-text\">fdAT</code>，如下图所示：</p>\n<p><img src=\"https://p1.music.126.net/aairiTjOEkEJydwoqYMFhQ==/109951165101226499.png\"></p>\n<p>APNG 动画播放主要是通过 <code class=\"language-text\">fcTL</code> 来控制渲染每一帧的图像，即通过 dispose<em>op 和 blend</em>op 控制绘制方式。</p>\n<ul>\n<li>\n<p>dispose_op 指定了下一帧绘制之前对缓冲区的操作</p>\n<ul>\n<li>0：不清空画布，直接把新的图像数据渲染到画布指定的区域</li>\n<li>1：在渲染下一帧前将当前帧的区域内的画布清空为默认背景色</li>\n<li>2：在渲染下一帧前将画布的当前帧区域内恢复为上一帧绘制后的结果</li>\n</ul>\n</li>\n<li>\n<p>blend_op 指定了绘制当前帧之前对缓冲区的操作</p>\n<ul>\n<li>0：表示清除当前区域再绘制</li>\n<li>1：表示不清除直接绘制当前区域，图像叠加</li>\n</ul>\n</li>\n</ul>\n<h2>apng-canvas 实现原理</h2>\n<p>了解 APNG 的组成结构之后，我们就可以分析 apng-canvas 的实现原理啦，主要分为两部分：解码和绘制。</p>\n<h3>APNG 解码</h3>\n<p>APNG 解码的流程如下图所示：</p>\n<p><img src=\"https://p1.music.126.net/dksxB13ab1PERudhu0_xYA==/109951165102246118.png\"></p>\n<p>首先将 APNG 以<code class=\"language-text\">arraybuffer</code> 的格式下载资源，通过<code class=\"language-text\">视图</code>操作二进制数据；然后依次校验文件格式是否为 PNG 及 APNG；接着依次拆分 APNG 每一块处理并存储；最后将拆分获得的 PNG 标示块、头块、其他辅助块、一帧的帧图像数据块和结束块重新组成 PNG 图片并通过加载图像资源。在这个过程中需要浏览器支持 <code class=\"language-text\">Typed Arrays</code> 和 <code class=\"language-text\">Blob URLs</code>。</p>\n<p>APNG 的文件资源是通过 <code class=\"language-text\">XMLHttpRequest</code> 下载，实现简单，这里不做赘述。</p>\n<h4>校验 PNG 格式</h4>\n<p>校验 PNG 格式就是校验 <code class=\"language-text\">PNG Signature</code> 块，将文件资源从第 1 个字节开始依次比对前 8 个字节的内容，关键实现如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> bufferBytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// buffer为下载的arraybuffer资源</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PNG_SIGNATURE_BYTES</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0x89</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x4e</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x47</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0d</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0a</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1a</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0a</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">PNG_SIGNATURE_BYTES</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">PNG_SIGNATURE_BYTES</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> bufferBytes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Not a PNG file (invalid file signature)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>校验 APNG 格式</h4>\n<p>校验 APNG 格式就是判断文件是否存在类型为 <code class=\"language-text\">acTL</code> 的块。因此需要依序读取文件中的每一块，获取块类型等数据。块的读取是根据上文所述的 PNG 块的基本组成结构进行处理，流程实现如下图所示：</p>\n<p><img src=\"https://p1.music.126.net/V9lnwZF8MPCdww4UftXkOA==/109951165102246117.png\"></p>\n<p>off 初始值为 8，即 <code class=\"language-text\">PNG Signature</code> 的字节大小，然后依序读取每一块。首先读取 4 个字节获取数据块长度 length，继续读取 4 个字节获取数据块类型，然后执行回调函数处理本块的数据，根据回调函数返回值 res、块类型和 off 值判断是否需要继续读取下一块（res 值表示是否要继续读取下一块数据，默认为 <code class=\"language-text\">undefined</code> 继续读取）。如果继续则 off 值累加 <code class=\"language-text\">4 + 4 + length + 4</code>，偏移到下一块的开始循环执行，否则直接结束。关键代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">parseChunks</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">bytes<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> off <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> res<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n        length <span class=\"token operator\">=</span> <span class=\"token function\">readDWord</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> off<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        type <span class=\"token operator\">=</span> <span class=\"token function\">readString</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> off <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        res <span class=\"token operator\">=</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">,</span> off<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        off <span class=\"token operator\">+=</span> <span class=\"token number\">12</span> <span class=\"token operator\">+</span> length<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">!==</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> type <span class=\"token operator\">!==</span> <span class=\"token string\">'IEND'</span> <span class=\"token operator\">&amp;&amp;</span> off <span class=\"token operator\">&lt;</span> bytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>调用 <code class=\"language-text\">parseChunks</code> 从头开始查找，一旦存在 <code class=\"language-text\">type === &#39;acTL&#39;</code> 的块就返回 <code class=\"language-text\">false</code> 停止读取，关键实现如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> isAnimated <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">parseChunks</span><span class=\"token punctuation\">(</span>bufferBytes<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">type</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'acTL'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        isAnimated <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isAnimated<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Not an animated PNG'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>按照类型处理每一块</h4>\n<p>APNG 结构中的核心类型块的详细结构如下图所示：</p>\n<p><img src=\"https://p1.music.126.net/Gml04RvhWYa1vKQLblDDNQ==/109951165102689072.png\"></p>\n<p><img src=\"https://p1.music.126.net/nwYdVKUzFLNeIgGYshUDPQ==/109951165102688144.png\"></p>\n<p>调用 <code class=\"language-text\">parseChunks</code> 依次读取每一块，根据每种类型块中包含的数据及其对应的偏移和字节大小分别进行处理存储。其中在处理 <code class=\"language-text\">fcTL</code> 和 <code class=\"language-text\">fdAT</code> 块时跳过了帧序列号 (sequence_number)的读取，似乎没有考虑序列号出错的问题。关键实现如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> preDataParts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 存储 其他辅助块</span>\n    postDataParts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 存储 IEND块</span>\n    headerDataBytes <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存储 IHDR块</span>\n\n<span class=\"token keyword\">const</span> anim <span class=\"token operator\">=</span> anim <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> frame <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存储 每一帧</span>\n\n<span class=\"token function\">parseChunks</span><span class=\"token punctuation\">(</span>bufferBytes<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">,</span> off<span class=\"token punctuation\">,</span> length</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> delayN<span class=\"token punctuation\">,</span>\n        delayD<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'IHDR'</span><span class=\"token punctuation\">:</span>\n            headerDataBytes <span class=\"token operator\">=</span> bytes<span class=\"token punctuation\">.</span><span class=\"token function\">subarray</span><span class=\"token punctuation\">(</span>off <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> off <span class=\"token operator\">+</span> <span class=\"token number\">8</span> <span class=\"token operator\">+</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            anim<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token function\">readDWord</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> off <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            anim<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token function\">readDWord</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> off <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'acTL'</span><span class=\"token punctuation\">:</span>\n            anim<span class=\"token punctuation\">.</span>numPlays <span class=\"token operator\">=</span> <span class=\"token function\">readDWord</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> off <span class=\"token operator\">+</span> <span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 循环次数</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'fcTL'</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">)</span> anim<span class=\"token punctuation\">.</span>frames<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 上一帧数据</span>\n            frame <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 新的一帧</span>\n            frame<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token function\">readDWord</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> off <span class=\"token operator\">+</span> <span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            frame<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token function\">readDWord</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> off <span class=\"token operator\">+</span> <span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            frame<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">readDWord</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> off <span class=\"token operator\">+</span> <span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            frame<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> <span class=\"token function\">readDWord</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> off <span class=\"token operator\">+</span> <span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            delayN <span class=\"token operator\">=</span> <span class=\"token function\">readWord</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> off <span class=\"token operator\">+</span> <span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            delayD <span class=\"token operator\">=</span> <span class=\"token function\">readWord</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> off <span class=\"token operator\">+</span> <span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>delayD <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> delayD <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n            frame<span class=\"token punctuation\">.</span>delay <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> delayN <span class=\"token operator\">/</span> delayD<span class=\"token punctuation\">;</span>\n            anim<span class=\"token punctuation\">.</span>playTime <span class=\"token operator\">+=</span> frame<span class=\"token punctuation\">.</span>delay<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 累加播放总时长</span>\n            frame<span class=\"token punctuation\">.</span>disposeOp <span class=\"token operator\">=</span> <span class=\"token function\">readByte</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> off <span class=\"token operator\">+</span> <span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            frame<span class=\"token punctuation\">.</span>blendOp <span class=\"token operator\">=</span> <span class=\"token function\">readByte</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> off <span class=\"token operator\">+</span> <span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            frame<span class=\"token punctuation\">.</span>dataParts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'fdAT'</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">)</span> frame<span class=\"token punctuation\">.</span>dataParts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">.</span><span class=\"token function\">subarray</span><span class=\"token punctuation\">(</span>off <span class=\"token operator\">+</span> <span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> off <span class=\"token operator\">+</span> <span class=\"token number\">8</span> <span class=\"token operator\">+</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'IDAT'</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">)</span> frame<span class=\"token punctuation\">.</span>dataParts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">.</span><span class=\"token function\">subarray</span><span class=\"token punctuation\">(</span>off <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> off <span class=\"token operator\">+</span> <span class=\"token number\">8</span> <span class=\"token operator\">+</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'IEND'</span><span class=\"token punctuation\">:</span>\n            postDataParts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">subBuffer</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> off<span class=\"token punctuation\">,</span> <span class=\"token number\">12</span> <span class=\"token operator\">+</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n            preDataParts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">subBuffer</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> off<span class=\"token punctuation\">,</span> <span class=\"token number\">12</span> <span class=\"token operator\">+</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">)</span> anim<span class=\"token punctuation\">.</span>frames<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 依次存储每一帧帧数据</span></code></pre></div>\n<h4>组装 PNG</h4>\n<p>拆分完数据块之后就可以组装 PNG 了，遍历 <code class=\"language-text\">anim.frames</code> 将 PNG 的通用数据块 PNG<em>SIGNATURE</em>BYTES、 headerDataBytes、preDataParts、一帧的帧数据 dataParts 和postDataParts 按序组成一份 PNG 图像资源（bb），通过 <code class=\"language-text\">createObjectURL</code> 创建图片的 URL 存储到frame中，用于后续绘制。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span>bb<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'image/png'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nframe<span class=\"token punctuation\">.</span>img <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nframe<span class=\"token punctuation\">.</span>img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> url<span class=\"token punctuation\">;</span>\nframe<span class=\"token punctuation\">.</span>img<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">revokeObjectURL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    createdImages<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>createdImages <span class=\"token operator\">===</span> anim<span class=\"token punctuation\">.</span>frames<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//全部解码完成</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>anim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>到这里我们已经完成了解码工作，调用 <code class=\"language-text\">APNG.parseUrl</code> 就可以实现动画资源预加载功能：页面初始化之后首次调用加载资源，渲染时再次调用直接返回解析结果进行绘制操作。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> url2promise <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">APNG</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">parseURL</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>url <span class=\"token keyword\">in</span> url2promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        url2promise<span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">loadUrl</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>parseBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> url2promise<span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>APNG 绘制</h3>\n<p>APNG 解码完成后就可以根据动画控制块和帧控制块绘制播放啦。具体是使用 requestAnimationFrame在 canvas 画布上依次绘制每一帧图片实现播放。apng-canvas 采用 Canvas 2D 渲染。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">tick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">now</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>played <span class=\"token operator\">&amp;&amp;</span> nextRenderTime <span class=\"token operator\">&lt;=</span> now<span class=\"token punctuation\">)</span> <span class=\"token function\">renderFrame</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>played<span class=\"token punctuation\">)</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>tick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Canvas 2D 绘制主要是使用 Canvas 2D 的 API <code class=\"language-text\">drawImage</code>、<code class=\"language-text\">clearRect</code>、<code class=\"language-text\">getImageData</code>、<code class=\"language-text\">putImageData</code> 实现。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">renderFrame</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">now</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// fNum 记录循环播放时的总帧数</span>\n    <span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> fNum<span class=\"token operator\">++</span> <span class=\"token operator\">%</span> ani<span class=\"token punctuation\">.</span>frames<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> frame <span class=\"token operator\">=</span> ani<span class=\"token punctuation\">.</span>frames<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 动画播放结束</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>ani<span class=\"token punctuation\">.</span>numPlays <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> fNum <span class=\"token operator\">/</span> ani<span class=\"token punctuation\">.</span>frames<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> ani<span class=\"token punctuation\">.</span>numPlays<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        played <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        finished <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ani<span class=\"token punctuation\">.</span>onFinish<span class=\"token punctuation\">)</span> ani<span class=\"token punctuation\">.</span><span class=\"token function\">onFinish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这行是作者加的便于在动画播放结束后执行一些操作</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 绘制第一帧前将动画整体区域画布清空</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">clearRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ani<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> ani<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        prevF <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 上一帧</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">.</span>disposeOp <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> frame<span class=\"token punctuation\">.</span>disposeOp <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevF <span class=\"token operator\">&amp;&amp;</span> prevF<span class=\"token punctuation\">.</span>disposeOp <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 清空上一帧区域的底图</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">clearRect</span><span class=\"token punctuation\">(</span>prevF<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> prevF<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">,</span> prevF<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> prevF<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevF <span class=\"token operator\">&amp;&amp;</span> prevF<span class=\"token punctuation\">.</span>disposeOp <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 恢复为上一帧绘制之前的底图</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">putImageData</span><span class=\"token punctuation\">(</span>prevF<span class=\"token punctuation\">.</span>iData<span class=\"token punctuation\">,</span> prevF<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> prevF<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 0 则直接绘制</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n        left<span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span>\n        img<span class=\"token punctuation\">,</span> disposeOp<span class=\"token punctuation\">,</span> blendOp\n    <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">;</span>\n    prevF <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">;</span>\n    prevF<span class=\"token punctuation\">.</span>iData <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>disposeOp <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 存储当前的绘制底图，用于下一帧绘制前恢复该数据</span>\n        prevF<span class=\"token punctuation\">.</span>iData <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getImageData</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>blendOp <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 清空当前帧区域的底图</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">clearRect</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 绘制当前帧图片</span>\n\n    <span class=\"token comment\">// 下一帧的绘制时间</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextRenderTime <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> nextRenderTime <span class=\"token operator\">=</span> now<span class=\"token punctuation\">;</span>\n    nextRenderTime <span class=\"token operator\">+=</span> frame<span class=\"token punctuation\">.</span>delay<span class=\"token punctuation\">;</span> <span class=\"token comment\">// delay为帧间隔时间</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>WebGL 绘制</h2>\n<p>渲染方式除 Canvas 2D 外还可以使用 WebGL。WebGL 渲染性能优于 Canvas 2D，但是 WebGL 没有可以直接绘制图像的 API，绘制实现代码较为复杂，本文就不展示绘制图像的具体代码，类似 <code class=\"language-text\">drawImage</code> API 的 WebGL 实现可参考 <a href=\"https://WebGLfundamentals.org/WebGL/lessons/zh_cn/WebGL-2d-drawimage.html\">WebGL-drawimage</a>，<a href=\"https://webglfundamentals.org/webgl/lessons/zh_cn/webgl-2d-matrices.html\">二维矩阵</a>等。下面将介绍作者选用的绘制实现方案的关键点。</p>\n<p>由于 WebGL 没有 <code class=\"language-text\">getImageData</code>、<code class=\"language-text\">putImageData</code> 等 API 可以获取或复制当前画布的图像数据，所以在 WebGL 初始化时就初始化多个纹理，使用变量 glRenderInfo 记录历史渲染的纹理数据。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 纹理数量</span>\n<span class=\"token keyword\">const</span> textureLens <span class=\"token operator\">=</span> ani<span class=\"token punctuation\">.</span>frames<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>disposeOp <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 历史渲染的纹理数据</span>\n<span class=\"token keyword\">const</span> glRenderInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    index<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    frames<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>渲染每一帧时根据 <code class=\"language-text\">glRenderInfo.frames</code> 使用多个纹理依次渲染，同时更新 <code class=\"language-text\">glRenderInfo</code> 数据。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">renderFrame</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">now</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">let</span> prevClearInfo<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        glRenderInfo<span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        glRenderInfo<span class=\"token punctuation\">.</span>frames <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        prevF <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        prevClearInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">.</span>disposeOp <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> frame<span class=\"token punctuation\">.</span>disposeOp <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevF <span class=\"token operator\">&amp;&amp;</span> prevF<span class=\"token punctuation\">.</span>disposeOp <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//  需要清空上一帧区域底图</span>\n        <span class=\"token keyword\">const</span> prevPrevClear <span class=\"token operator\">=</span> glRenderInfo<span class=\"token punctuation\">.</span>infos<span class=\"token punctuation\">[</span>glRenderInfo<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>prevF<span class=\"token punctuation\">;</span>\n        prevClearInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>prevPrevClear <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            prevF<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevF <span class=\"token operator\">&amp;&amp;</span> prevF<span class=\"token punctuation\">.</span>disposeOp <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 递增纹理下标序号，否则直接替换上一帧图片</span>\n        glRenderInfo<span class=\"token punctuation\">.</span>index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// disposeOp === 2 直接替换上一帧图片</span>\n    glRenderInfo<span class=\"token punctuation\">.</span>frames<span class=\"token punctuation\">[</span>glRenderInfo<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 更新glRenderInfo</span>\n        frame<span class=\"token punctuation\">,</span>\n        prevF<span class=\"token punctuation\">:</span> prevClearInfo<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 用于清除上一帧区域底图</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    prevF <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">;</span>\n    prevClearInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 绘制图片，底图清除在 glDrawImage 接口内部实现</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>glRenderInfo<span class=\"token punctuation\">.</span>frames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">glDrawImage</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">.</span>prevF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>小结</h2>\n<p>本文介绍了 APNG 的结构组成、图片解码、使用 Canvas 2D / WebGL 渲染实现。希望阅读本文后，能够对您有所帮助，欢迎探讨。</p>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Mozilla/Tech/APNG\">Animated PNG graphics</a></li>\n<li><a href=\"https://github.com/davidmz/apng-canvas\">apng-canvas</a> </li>\n<li><a href=\"https://aotu.io/notes/2016/11/07/apng/index.html\">APNG 那些事</a></li>\n<li><a href=\"https://javascript.ruanyifeng.com/stdlib/arraybuffer.html\">二进制数组</a></li>\n</ul>\n<blockquote>\n<p>本文发布自 <a href=\"https://github.com/x-orpheus\">网易云音乐大前端团队</a>，文章未经授权禁止任何形式的转载。我们常年招收前端、iOS、Android，如果你准备换工作，又恰好喜欢云音乐，那就加入我们 grp.music-fe(at)corp.netease.com！</p>\n</blockquote>","frontmatter":{"title":"Web 端 APNG 播放实现原理","date":"2020-08-06","description":"在云音乐的直播开发中会常遇到动画播放的需求，每个需求的应用场景不同，体积较小的动画大都采用 APNG 格式。"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/apng/","previous":{"fields":{"slug":"/react-native-refresh/"},"frontmatter":{"title":"React Native 实现自定义下拉刷新组件"}},"next":{"fields":{"slug":"/react-fiber/"},"frontmatter":{"title":"React Fiber 源码解析"}}}}}