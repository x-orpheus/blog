{"componentChunkName":"component---src-templates-blog-post-js","path":"/svrx/","webpackCompilationHash":"6d9b22b749990bbe4509","result":{"data":{"site":{"siteMetadata":{"title":"云音乐大前端专栏","author":"云音乐大前端团队","siteUrl":"https://musicfe.dev"}},"markdownRemark":{"id":"851a823e-3772-528d-b044-98c86153f6dd","excerpt":"…","html":"<p><a href=\"https://svrx.io/\"><img src=\"https://svrx.io/assets/images/banner.png\"></a></p>\n<blockquote>\n<p>本文将介绍一款全新的前端开发工具，希望它能给你的前端开发带来看起来和现在一样但其实又不那么一样的体验。</p>\n</blockquote>\n<p>你可能会说，大家都是 <del>秃头的</del> 成熟的前端程序员了，每一台电脑上都有几套自己辛辛苦苦装好的全家桶，为什么还要新换一个开发工具？</p>\n<p>对，盲生，你可能发现了华点。</p>\n<p>数一数你电脑上目前为前端本地开发安装了多少小工具、小插件？\n这其中仅仅是为代码开发阶段，就可能有本地服务器、远程调试工具、代理工具、浏览器插件等等。\n它们也许是你一个个尝试无数同款后最终确定安装的，\n也可能是被各类『震惊！超好用前端开发工具大全』安利的，\n并且其中不乏全局安装、全局配置的「重器」。</p>\n<p><img src=\"https://p1.music.126.net/aBz8E_J0WPTo-FSmtm_hlA==/109951164418246375.png\" alt=\"震惊！超好用前端开发工具大全\"></p>\n<p>试想现在你要换一台新电脑或者重装新系统了，你还得一个个把它们重新安装回来。\n况且大部分这样的工具是无法根据工程进行独立配置的，\n也就是说你在不同项目之间切换时还需要手动修改你的开发工具配置。\n这些都是一些强迫症患者如作者本人无法忍受的。</p>\n<p>总结一下平时搞开发的时候一些习以为常但仔细一想又挺麻烦的场景：</p>\n<ul>\n<li>你必须手动安装各类工具软件以丰富你的本地开发环境</li>\n<li>这样的本地开发环境无法拷贝或者很难拷贝，无法分享</li>\n<li>每种工具都要单独配置，且配置基本不是按照项目隔离的，切换项目时经常需要修改配置</li>\n<li>有时候你的需求并没有合适的工具来满足，自己写一个又太麻烦</li>\n<li>写一个项目要同时打开 N 种 工具：本地服务器、mock 服务器等</li>\n<li>经常还需要不断重启这些工具以刷新配置</li>\n<li>……</li>\n</ul>\n<p>基于以上以及一些其它痛点，便有了下文将介绍的 server-x。</p>\n<h2>什么是 server-x</h2>\n<p>如同它名字的前半部分，<code class=\"language-text\">server</code>，你可以简单地说，server-x（缩写为 svrx）就是一个本地服务器，\n并且它还是一个功能丰富、使用便捷的轻量级服务器。</p>\n<p>先来看下最简单的使用场景：</p>\n<p>首先你需要安装 svrx 的 CLI 工具，</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g @svrx/cli</code></pre></div>\n<p>然后新建一个简单的页面，在项目根目录启动 svrx，</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> example <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> example\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'&lt;html>&lt;body>Hello svrx!&lt;/body>&lt;/html>'</span> <span class=\"token operator\">></span> index.html\nsvrx</code></pre></div>\n<p>访问 <a href=\"http://localhost:8000\">http://localhost:8000</a> 即可看到你的前端页面。</p>\n<p><img src=\"https://p1.music.126.net/Pq_Ck_EyFtW8lXfgTN09Mg==/109951164417568606.png\" alt=\"启动demo\"></p>\n<p>安装便捷，启动迅速，独立使用，除了 node ，<strong>不依赖任何别的环境</strong>。\n当然，这是任何一个独立的、基础的 dev server 都能做到的最必不可少的功能。</p>\n<p>除此之外还有什么？svrx 还自带了诸如自动打开浏览器、监听代码变动自动刷新（livereload）、proxy 等实用性非常强的功能。\n是的，你也可以说，部分 dev server 也是能做到的。</p>\n<p>svrx 和其它本地服务器最大的区别，其实是它名字 <code class=\"language-text\">server-x</code> 的后半部分：<code class=\"language-text\">x</code>。\n我们都知道，<code class=\"language-text\">x</code> 可以代表「未知和无限」，即 svrx 是一个有着无限可能的服务器。\n为什么说它有无限的可能？因为 svrx 最大的特点：它是一个插件平台。</p>\n<p>通过插件，理论上你的 svrx 确实可以拥有任意的功能。\n每一个小功能在这里就是一个独立的插件，你只需要声明就能使用它，就像这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">svrx --webpack --qrcode --markdown</code></pre></div>\n<p>很清晰直观，没有冗余的配置，在你声明插件以后，svrx 会自动帮你下载安装插件，然后直接启动。</p>\n<p>所以你可以说，svrx 是一个聚合了众多功能插件的平台，它本身就是一个全家桶。\n不过不同的是，你丝毫<strong>不需要关心插件的安装过程</strong>。除了 svrx 的 CLI，你<strong>无需安装其它任何工具</strong>。</p>\n<p>另外，所有插件都不是全局安装，而是直接安装到你工程的<code class=\"language-text\">node_modules</code>目录中。\n所以<strong>工程开发是真正独立隔离的</strong>，\n你可以自由给每一个项目定制一套开发环境，不用考虑安装卸载，完全不担心环境污染问题，同时系统也可以保持干净清爽。</p>\n<p>事实上，业内目前可用的本地 dev server 有很多，\n但像 svrx 这样，轻量易用的、具有完备插件机制的、完全不依赖工程环境的，几乎是没有的。\n接下来，我们通过创建一个简单的前端工程，继续探索一下使用 svrx 进行开发的全新体验，\n带你深入了解一些进阶用法和黑科技，这些才是 svrx 真正有趣的地方。</p>\n<h2>创建工程及启动</h2>\n<p>方便起见，我们选用前端常用的 <a href=\"https://github.com/facebook/create-react-app\">Create React App</a> 进行示例工程创建\n（前面提到，svrx 不依赖任何工程环境，选取 CRA 仅仅为了示例方便）。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> init react-app svrx-example\n<span class=\"token builtin class-name\">cd</span> svrx-example</code></pre></div>\n<p>由于新工程默认使用 <code class=\"language-text\">webpack</code> 打包，想要启动这样的工程，\n我们需要使用插件 <a href=\"https://github.com/svrxjs/svrx-plugin-webpack\">svrx-plugin-webpack</a>。\n这个插件的作用就是读取项目配置，\n调用 <a href=\"https://github.com/webpack/webpack-dev-middleware\">webpack-dev-middleware</a>，\n使你的 <code class=\"language-text\">webpack</code> 项目可以无缝接入到 svrx 服务中。</p>\n<p>不过由于新工程并没有暴露出 <code class=\"language-text\">webpack</code> 配置项，所以我们需要先在根目录创建一个 <code class=\"language-text\">webpack.config.js</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-scripts/config/webpack.config'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'development'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>然后我们就可以顺利启动项目了：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">svrx --webpack</code></pre></div>\n<p>浏览器会自动弹出 <a href=\"http://localhost:8000/\">http://localhost:8000/</a> 页面：</p>\n<p><img src=\"https://p1.music.126.net/ObArEQVEbjajRBkeOaJldQ==/109951164429015297.png\" alt=\"start svrx\"></p>\n<p>这时可以尝试编辑下 <code class=\"language-text\">src/App.css</code>，看看页面是不是实时变化了？</p>\n<p><img src=\"https://p1.music.126.net/yIQ1lg2pOhA1ETmGKvQvIQ==/109951164430535611.gif\" alt=\"livereload\"></p>\n<h2>进阶 1：添加配置项</h2>\n<p>默认地，svrx 会在启动时自动开启一些内置的基础插件，\n如静态伺服（serve）、转发服务（proxy）、页面自动刷新（livereload）等。\n它们都有一些默认行为以保证用户可以快速启动 svrx，\n当然，如果你需要对这些内置配置项做一些自定义修改，svrx 也提供了两种方式。</p>\n<p>你可以在命令行启动 svrx 时传入参数进行配置：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">svrx --port <span class=\"token number\">3000</span> --https --no-livereload</code></pre></div>\n<p>也可以在你的工程目录下建立<code class=\"language-text\">.svrxrc.js</code>或<code class=\"language-text\">svrx.config.js</code>文件，将上面的命令行参数持久化下来：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// .svrxrc.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  port<span class=\"token punctuation\">:</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span>\n  https<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  livereload<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>svrx 的全部配置项及描述可以在<a href=\"https://docs.svrx.io/zh/guide/option.html\">官方文档-内置项</a>中查看。</p>\n<h2>进阶 2：开始尝试使用其它插件</h2>\n<p>除了内置插件以外，svrx 还有很多独立插件，比如前面提到的 <code class=\"language-text\">svrx-plugin-webpack</code>。\n在你需要别的开发功能（如远程调试、mock 等）时，只需要简单地在 svrx 配置中声明这些独立功能插件的名字即可正常使用。\n正是这些独立插件，为 svrx 项目提供了丰富多彩的功能体验。下面先介绍几个好用的好玩的插件：</p>\n<h3><a href=\"https://github.com/svrxjs/svrx-plugin-localtunnel\">localtunnel</a> - 把本地服务暴露出去</h3>\n<p>试想你正紧张有序地在进行页面开发，这个时候你领导的消息弹了出来： </p>\n<blockquote>\n<p>让我看看你的页面写得怎么样了</p>\n</blockquote>\n<p>这个时候你怎么办？你是不是得先检查进度，把能用的代码先提交，然后你灵机一动，部署了一个本地服务，准备甩给你领导一串本机 IP。\n但是你突然想起来，领导不是在出差吗？（太敬业了，还在时刻检查你的开发进度）领导访问不了内网啊。\n这时你只能慌忙找服务器再部署一个测试环境给领导，部署得还贼慢，领导飞机都要起飞了！</p>\n<p>这个时候，你就需要 svrx 的 <a href=\"https://github.com/localtunnel/localtunnel\">localtunnel</a> 插件了！\n它可以将你的本地服务暴露到<code class=\"language-text\">localtunnel.me</code>，从而方便地进行本地代码的测试和分享。\n你再也无需为了测试你的一点代码变动就专门部署一次测试服务了。</p>\n<p>启动 <code class=\"language-text\">localtunnel</code> 只需在之前的启动命令后添加声明即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">svrx --webpack --localtunnel</code></pre></div>\n<p>上面的命令将会自动安装 localtunnel 插件并启动 svrx，\n其他人（是的，你们甚至不需要在同一个内网）此时访问终端打印的 <a href=\"https://*.localtunnel.me\">https://*.localtunnel.me</a> 也将看到你的本地服务：</p>\n<p><img src=\"https://p1.music.126.net/0tnJ_DkmfTEl_jFdRGepbQ==/109951164429088111.png\" alt=\"localtunnel\"></p>\n<p>并且，你的每次本地页面变动都可以被别人实时看到，再也不用担心领导突然检查作业了！</p>\n<p><img src=\"https://p1.music.126.net/Wc2rVrS4qNiUWSl1avHc9Q==/109951164430527349.gif\" alt=\"localtunnel-livereload\"></p>\n<h3><a href=\"https://github.com/svrxjs/svrx-plugin-weinre\">weinre</a> - 远程调试移动端代码</h3>\n<p>现在一般都是如何进行移动端代码调试的？你可能会说，“这题我会！”很简单，先在手机上打开设置里的<code class=\"language-text\">开发者模式</code>（可能要找一下），允许<code class=\"language-text\">USB 连接</code>，再找一根 USB 连接线，把手机和电脑连接起来，然后你打开你电脑上的浏览器开发者工具，开启一些东西，找到远程设备，然后<code class=\"language-text\">Inspect</code>……</p>\n<p>万一有更简便的方法呢？你可以试试 svrx 的 <a href=\"http://people.apache.org/~pmuellr/weinre/docs/latest/Home.html\">weinre</a> 插件，它用于方便地远程调试移动端的页面，而且是“无线”的。</p>\n<p>我们再次回到刚才的 example 工程，这次我们在启动命令后面添加两个新的插件：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">svrx --open<span class=\"token operator\">=</span>external --webpack --weinre --qrcode </code></pre></div>\n<p>首先通过上面的命令快速安装 weinre 和二维码插件并启动 svrx，\n此时试着拿手机访问启动好的项目页面，这里推荐配合 <code class=\"language-text\">qrcode</code> 二维码插件让手机轻松扫码访问页面地址:</p>\n<p><img src=\"https://p1.music.126.net/xIVX3rkv1dsvrUOlFRXldQ==/109951164430529750.gif\" alt=\"qrcode\"></p>\n<p>紧接着电脑打开 weinre 的调试器页面 <a href=\"http://$%7Byour_ip%7D:8001%EF%BC%88%E9%BB%98%E8%AE%A4%EF%BC%89%EF%BC%8C\">http://${your_ip}:8001（默认），</a>\n找到手机的访问记录，就可以在调试器上对手机页面进行远程调试了。</p>\n<p><img src=\"https://p1.music.126.net/KaBNi-_EDelz8kE75i5gSg==/109951164429434114.png\" alt=\"weinre 调试器截图\"></p>\n<h3>定制你的插件</h3>\n<p>除了上述的，svrx 还有很多有趣好用的插件，你可以在<a href=\"https://svrx.io/plugin?query=svrx-plugin-\">svrx 的官网</a> 查询目前所有的插件，并从中挑选使用。\n通过不同插件的组合，你就可以自由定制你的开发环境啦！</p>\n<p><img src=\"https://p1.music.126.net/IZDarDVC9sHj69lxWuhljg==/109951164417587560.png\" alt=\"部分插件列表\"></p>\n<p>当然，如果没找到你想要的功能插件，你还可以尝试自己写一个。</p>\n<p>你可以用插件实现哪些功能呢？\n拿前面的 <code class=\"language-text\">qrcode</code> 二维码插件来说，为了把二维码显示到页面上，你可以往前端页面注入一些 js 脚本，css 样式；\n也可以像 <code class=\"language-text\">webpack</code> 插件那样，往后端逻辑中注入一些 koa 风格的中间件，拦截请求做数据处理，比如这里的 <code class=\"language-text\">webpack-dev-middleware</code>。</p>\n<p>有了强大的前后端注入能力，几乎所有的本地开发需求，都可以通过创建一个 svrx 插件来解决。\n而且<strong>插件的开发异常简单</strong>！刚刚介绍的一些插件的核心代码几乎都只有 50 行左右！\n此外，svrx 还提供了快速创建插件的脚手架工具，可以去<a href=\"https://docs.svrx.io/zh/plugin/contribution.html\">官方文档-如何写一个插件</a>查看更多插件开发的细节，在这里就不赘述了。</p>\n<h2>进阶 3：可以热更新的快捷路由</h2>\n<p>在前后端分离的开发场景中，前端经常会碰到需要进行数据 mock 的情况。于是你可能会经历：</p>\n<ul>\n<li>修改 mock 数据，重启 mock 服务器</li>\n<li>打开、关闭接口转发，重启</li>\n<li>修改工程代码，重启</li>\n<li>……</li>\n</ul>\n<p>就算你说现在的 mock 服务都很智能，不需要重启了，但是你还是需要在本地服务外手动再开启一个 mock 服务，要么就是狠一点，把 mock 数据写到工程代码里。太不优雅了！</p>\n<p>于是 svrx 的动态路由就派上用场了。是的，除了丰富的插件体系，svrx 其实还有一个功能强大、使用便捷的动态路由功能。\n还是回到我们的 example 工程，你可以通过以下命令开启快速尝试：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> route.js <span class=\"token comment\"># create empty routing file</span>\nsvrx --webpack --route route.js</code></pre></div>\n<p>在<code class=\"language-text\">route.js</code>中：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/blog'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">:</span> <span class=\"token string\">'svrx'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>此时打开<code class=\"language-text\">/blog</code>，你将看到<code class=\"language-text\">{ title: &#39;svrx&#39; }</code>的 json 输出。</p>\n<p>有了这个路由功能，你将可以在不侵入项目代码的前提下<strong>快速直观地创建你的 mock 数据</strong>。\n并且它是支持 <strong>hot reload</strong> 的，即每次编辑 <code class=\"language-text\">route.js</code> 后，无需重启 svrx 服务，路由数据会自动更新。</p>\n<p><img src=\"https://p1.music.126.net/SJNCky1nh6RF_RIi2_kkLw==/109951164418247220.gif\" alt=\"动态路由示例\"></p>\n<p>当然，除了用于本地开发数据 mock 外，svrx 路由还可以做很多。下面是一些路由示例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">sendFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/blog'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/old/rewrite:path(.*)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">rewrite</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/svrx/{path}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api(.*)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">proxy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://mock.server.com/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/blog'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">'X-Engine'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'svrx'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> code<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如你所见，svrx 的路由语法非常简单，你可以清晰直观地阅读出每一条规则，比如发送文件、重定向、路由重写、proxy 等等。并且除了官方提供的一些路由操作外，你也可以通过插件来对路由操作进行扩展。关于 svrx 路由的语法规则、扩展等详情可以参阅<a href=\"https://docs.svrx.io/zh/guide/route.html\">官方文档-路由的使用</a>。</p>\n<h2>写在最后</h2>\n<blockquote>\n<p>一个渐进且易于使用的、插件化的前端开发平台。</p>\n</blockquote>\n<p>这是 svrx 的 slogan，同时也非常准确地描述了 svrx 的定位：</p>\n<ul>\n<li>svrx 是面向前端开发者的一个强大的本地 dev server，它由本地服务、proxy、livereload 等功能插件组成</li>\n<li>svrx 有着丰富强大的插件系统，你可以自由使用或者定制想要的功能</li>\n</ul>\n<p>在致力于为前端开发者提供更为优雅便捷的本地开发体验的同时，svrx 也为大家提供了一个可以快速进行自定义功能开发的平台。\n作为用户，你可以挑选合适的插件组合来满足你的本地服务需求，一键启动，省时省力，易拔插的功能设计，也不用担心环境污染。\n如果没有找到合适的插件，你可以变身开发者，自给自足，快速实现想要的功能。作为开发者，你还可以大开脑洞，通过你写的插件提升更多人的本地开发体验。</p>\n<p>之后，svrx 也将继续推出更多优质功能或插件，持续为前端开发服务。</p>\n<h2>Links</h2>\n<ul>\n<li><a href=\"https://svrx.io/\">svrx 官网</a> 官方使用文档、API、插件查询</li>\n<li><a href=\"https://github.com/svrxjs/svrx\">Github - svrx</a> 核心源码、讨论交流、bug report</li>\n</ul>\n<blockquote>\n<p>本文发布自 <a href=\"https://github.com/x-orpheus\">网易云音乐前端团队</a>，文章未经授权禁止任何形式的转载。我们一直在招人，如果你恰好准备换工作，又恰好喜欢云音乐，那就 <a href=\"mailto:grp.music-fe@corp.netease.com\">加入我们</a>！</p>\n</blockquote>","frontmatter":{"title":"Server-X：一款可能提升你十倍工作效率的工具","date":"2019-10-21","description":"本文将介绍一款全新的前端开发工具，希望它能给你的前端开发带来看起来和现在一样但其实又不那么一样的体验。"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/svrx/","previous":{"fields":{"slug":"/web-audio-visualization/"},"frontmatter":{"title":"Web Audio在音频可视化中的应用"}},"next":{"fields":{"slug":"/json-parser/"},"frontmatter":{"title":"从零实现自定义 JSON Parser"}}}}}