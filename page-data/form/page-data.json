{"componentChunkName":"component---src-templates-blog-post-js","path":"/form/","webpackCompilationHash":"c671f8468f2ff1de187e","result":{"data":{"site":{"siteMetadata":{"title":"云音乐大前端专栏","author":"云音乐大前端团队","siteUrl":"https://musicfe.dev"}},"markdownRemark":{"id":"2077987f-36b7-5b42-b0f9-1d16c479c9c0","excerpt":"图片来源：https://unsplash.com/ 本文作者：董健华 1. 背景 云音乐 B 端业务场景非常多，B 端业务相对于 C 端业务产品生命周期更长而且更注重场景的的梳理。很多时候开发 B…","html":"<p><img src=\"https://p1.music.126.net/SU4ohKoFNTnO9UhUiZkFmg==/109951165097827439.jpg\"></p>\n<blockquote>\n<p>图片来源：<a href=\"https://unsplash.com/\">https://unsplash.com/</a></p>\n</blockquote>\n<blockquote>\n<p>本文作者：董健华</p>\n</blockquote>\n<h2>1. 背景</h2>\n<p>云音乐 B 端业务场景非常多，B 端业务相对于 C 端业务产品生命周期更长而且更注重场景的的梳理。很多时候开发 B 端业务都是拷贝之前的代码，这样增加了很多重复而且枯燥的工作量。</p>\n<p>中后台系统其实可以拆分成几个比较通用的场景：表单、表格、图表，其中表单涉及到联动、校验、布局等复杂场景，经常是开发者的需要耗费精力去解决的点。</p>\n<p>对比传统的 <a href=\"https://ant.design/\">Ant Design</a> 表单开发开发方式，我们认为有以下问题：</p>\n<ol>\n<li>首先代码无法被序列化，而且对于一些非前端的开发者更习惯用 <code class=\"language-text\">JSON</code> 方式描述表单，因为足够简单</li>\n<li>表单的校验并没有和校验状态做结合</li>\n<li><code class=\"language-text\">onChange</code> 实现的联动方式在复杂的联动情况下代码会变得难以维护，容易产生很多链表式的逻辑</li>\n<li>表单有许多互斥的状态可以整理，而且我们也希望用户可以很轻易的在这些状态间进行切换</li>\n<li>对于一些比较常用而且通用的场景，例如：表单列表，也可以抽离出一套可行的方案</li>\n</ol>\n<p>所以虽然传统的表单开发方式已经足够的灵活，但是我也依然认为表单还有优化的空间，在灵活与效率上做了些权衡。</p>\n<p>外界也有比较成熟的表单解决方案，例如： <a href=\"https://formilyjs.org/\">Formliy</a> 、 <a href=\"https://alibaba.github.io/form-render\">FormRender</a> 。虽然解决了上面某几个点的问题，但是依然不够全面，我们需要有自己 <code class=\"language-text\">style</code> 的方案。</p>\n<p>所以为了提高中后台开发效率，让前端能够把时间投入到更有意义的事情里，我们总结了一套面向复杂场景的表单解决方案。</p>\n<h2>2. 技术方案</h2>\n<p>在技术方案上至关重要的一环就是Schema设计，框架架构等工作都是围绕这一环去实现的，所以我会沿袭这个思路给大家做介绍。</p>\n<h3>2.1 Schema设计</h3>\n<p>表单方案基于 <code class=\"language-text\">Ant Design</code> 开发，通过 <code class=\"language-text\">JSON</code> 方式配置 Schema，但是并非是 <code class=\"language-text\">JSON Schema</code>，外界很多基于 <code class=\"language-text\">JSON Schema</code> 的配置方案，其实也有考虑过，不过 <code class=\"language-text\">JSON Schema</code> 写起来有点麻烦，所以对 <code class=\"language-text\">JSON Schema</code> 的转换只作为一项附加的能力。</p>\n<p>案例如下面代码所示，最简单的表单字段只要配置 <code class=\"language-text\">key</code>、<code class=\"language-text\">type</code> 和 <code class=\"language-text\">ui.label</code> 就可以了：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Input\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"ui\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"label\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"姓名\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"InputNumber\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"ui\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"label\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"年龄\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"props\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"placeholder\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"请输入年龄\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"gender\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Radio\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"male\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"ui\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"label\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"性别\"</span>    \n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"options\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"男\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"male\"</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"female\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> formRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onSubmit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        formRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onReset</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        formRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>XForm\n                ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>formRef<span class=\"token punctuation\">}</span>\n                schema<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>schema<span class=\"token punctuation\">}</span>\n                labelCol<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> span<span class=\"token punctuation\">:</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n                wrapperCol<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> span<span class=\"token punctuation\">:</span> <span class=\"token number\">12</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>Button type<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onSubmit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>提交<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>Button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onReset<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>重置<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>因为方案是基于 <code class=\"language-text\">Ant Design</code> 的 <code class=\"language-text\">Form</code> 组件设计的，所以为了保留 <code class=\"language-text\">Ant Design</code> 的一些特性，设计了 <code class=\"language-text\">ui</code> 和 <code class=\"language-text\">props</code> 两个字段分别对应 <code class=\"language-text\">Form.Item</code> 的 <code class=\"language-text\">props</code> 和组件的 <code class=\"language-text\">props</code>。即使后续 <code class=\"language-text\">Ant Design</code> 表单增加了某些功能或者特性，这套表单方案也能做到无缝支持。</p>\n<h4>2.1.1 校验方式</h4>\n<p>既然表单是基于 <code class=\"language-text\">Ant Design</code> 实现的，那么校验也沿用了它的校验类库 <a href=\"https://github.com/yiminghe/async-validator\">async-validator</a>，这个类库已经比较成熟而且强大，能够校验 <code class=\"language-text\">Array</code> 和 <code class=\"language-text\">Object</code> 等深层级的数据类型，满足复杂校验的需求，所以我们直接在这个库的基础上做调整。</p>\n<p>通过 <code class=\"language-text\">rules</code> 字段进行配置，除了 <code class=\"language-text\">async-validator</code> 本来就就有的特性外，还额外增加了 <code class=\"language-text\">status</code>（校验状态）和 <code class=\"language-text\">trigger</code>（触发条件）枚举如下：</p>\n<ul>\n<li>\n<p>status：校验状态</p>\n<ul>\n<li>error（默认）：错误</li>\n<li>warning：警告</li>\n</ul>\n</li>\n<li>\n<p>trigger：触发条件</p>\n<ul>\n<li>submit（默认）：提交时候触发</li>\n<li>change：值变化时候触发判断</li>\n<li>blur：失去焦点时候触发判断</li>\n</ul>\n</li>\n</ul>\n<p>基本使用方式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Input\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"ui\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"姓名\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"required\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"姓名必填\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"trigger\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"blur\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>2.1.2 联动方式</h4>\n<p>除了校验，联动也是比较常用的功能，传统的联动通过组件 <code class=\"language-text\">onChange</code> 方式实现，当联动逻辑比较复杂的时候，看代码就像搜索链表一样麻烦，所以这块设计了一种 <code class=\"language-text\">反向监听</code> 的方式，字段的所有变化都维护在字段配置本身，降低后期维护成本。</p>\n<p>通过 <code class=\"language-text\">listeners</code> 字段进行配置，设计了 <code class=\"language-text\">watch</code>（监听）、 <code class=\"language-text\">condition</code>（条件）、<code class=\"language-text\">set</code>（设置）三个字段组合实现联动功能。</p>\n<p><code class=\"language-text\">watch</code> 记录需要监听的字段，当监听字段有任何变化的时候，会触发 <code class=\"language-text\">condition</code> 条件的判断，只有条件判断通过才会接着触发 <code class=\"language-text\">set</code> 设置。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Input\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gender\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Radio\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"male\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"options\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"男\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"male\"</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"female\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"listeners\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token property\">\"watch\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"name\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"condition\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"name.value === 'Marry'\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"set\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"female\"</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>上述例子当名字为 Marry 的时候，性别默认调整成女。</p>\n<h4>2.1.3 表单状态</h4>\n<p>我们发现有些联动场景是为了对字段做隐藏和显示的操作，为了方便用户切换状态，将4种互斥表单状态整理成一个 <code class=\"language-text\">status</code> 字段：</p>\n<ul>\n<li>\n<p>status：状态</p>\n<ul>\n<li>edit（默认）：编辑</li>\n<li>disabled：禁用</li>\n<li>preview：预览</li>\n<li>hidden：隐藏</li>\n</ul>\n</li>\n</ul>\n<p><code class=\"language-text\">preview</code> 状态并不是组件本身具有的，但是预览的需求蛮多的，于是我们做了拓展，为所有基本的表单组件预置了预览的状态。即使自定义组件也会默认展示字段值，如果需要自行处理的话也提供了方案。</p>\n<p>使用方式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"edit\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Input\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"edit\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"编辑\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"ui\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"编辑\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"disabled\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Input\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"disabled\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"禁用\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"ui\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"禁用\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"preview\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Input\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"preview\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"预览\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"ui\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"预览\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hidden\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Input\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hidden\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"隐藏\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"ui\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"隐藏\"</span>\n        <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>效果图如下：</p>\n<p><img src=\"https://p1.music.126.net/T4vLxwj0af-Z8Bq-MSg0kg==/109951164808489561.png\"></p>\n<h4>2.1.4 Options设置</h4>\n<p>许多选择组件使用 <code class=\"language-text\">options</code> 字段设置选项，选项有时候通过异步接口获取。考虑到异步接口的情况，设计了 4 套方案 ：</p>\n<ol>\n<li><code class=\"language-text\">options</code> 为 <code class=\"language-text\">Array</code> 的情况</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"type\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Select\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"options\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"蔬菜\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vegetables\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"水果\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fruit\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li><code class=\"language-text\">options</code> 为 <code class=\"language-text\">string</code> 的情况，即接口链接</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"type\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Select\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"options\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"//api.test.com/getList\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"3\">\n<li><code class=\"language-text\">options</code> 为 <code class=\"language-text\">object</code> 的情况，<code class=\"language-text\">action</code> 为接口链接，<code class=\"language-text\">nameProperty</code> 配置 <code class=\"language-text\">name</code> 字段，<code class=\"language-text\">valueProperty</code> 配置 <code class=\"language-text\">value</code> 字段，<code class=\"language-text\">path</code> 为获取选项路径，<code class=\"language-text\">watch</code> 配置监听字段</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"type\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Select\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"options\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"action\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"//api.test.com/getList?name=${name.value}\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"nameProperty\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"label\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"valueProperty\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"data.list\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"watch\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"name\"</span> <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"4\">\n<li><code class=\"language-text\">action</code> 为 <code class=\"language-text\">function</code> 的情况</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"type\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Select\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"options\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"action\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">field<span class=\"token punctuation\">,</span> form</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'//api.test.com/getList'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"watch\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"name\"</span> <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>2.1.5 表单列表</h4>\n<p>表单列表是一种组合类型的表单，通常有 <code class=\"language-text\">Table</code> 和 <code class=\"language-text\">Card</code> 两种场景，具有增加和删除功能。</p>\n<p>这种类型的表单值是以 <code class=\"language-text\">Array</code> 的形式返回的，所以设计了 <code class=\"language-text\">Array</code> 组件，根据 <code class=\"language-text\">props.type</code> 对 <code class=\"language-text\">Table</code> 和 <code class=\"language-text\">Card</code> 形态进行切换（貌似这种情况不多），<code class=\"language-text\">children</code> 配置子表单，使用方式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"array\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Array\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"ui\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"表单列表\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"props\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Card\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"children\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Input\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"ui\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"姓名\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"InputNumber\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"ui\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"年龄\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gender\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Radio\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"ui\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"性别\"</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"options\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"男\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"male\"</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"female\"</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>效果图如下：</p>\n<p><img src=\"https://p1.music.126.net/TT4XdOVuq4-3oM0zNTChjQ==/109951164808500925.gif\"></p>\n<p><img src=\"https://p1.music.126.net/124vG69upyx-HF72vWDwKA==/109951164808501026.gif\"></p>\n<h3>2.2 框架架构</h3>\n<p><img src=\"https://p1.music.126.net/kEPUU17UhVf-APwuo7JzZA==/109951165097997594.png\"></p>\n<p>围绕Schema设计思路，我们采用了基于分布式管理方案，将核心层和渲染层分离，字段信息维护在核心层，渲染层只负责渲染的工作，做到数据和界面代码的分离结构。</p>\n<p>核心层与渲染层之间通过 <code class=\"language-text\">Sub/Pub</code> 方式进行通讯，渲染层通过监听核心层定义的一系列 <code class=\"language-text\">Event</code> 事件对界面作出调整。</p>\n<p>这种数据状态的改变驱动界面的变化已经不是什么新鲜事了，在大多数框架中被广泛使用，其中优势有：</p>\n<ol>\n<li>方面各个字段之间数据与状态共享</li>\n<li>通过对事件的控制，能够合理的优化渲染次数，提高性能</li>\n<li>能够适配多框架的情况，只需复用一套核心层代码</li>\n</ol>\n<p>核心层主要由 <code class=\"language-text\">Form</code>、<code class=\"language-text\">Field</code>、<code class=\"language-text\">ListenerManager</code>、<code class=\"language-text\">Validator</code>、<code class=\"language-text\">optionManager</code> 几部分组成如下图所示：</p>\n<p><img src=\"https://p1.music.126.net/3kqMDLuP3wMTtbQqZrfQ_Q==/109951165098735980.png\"></p>\n<p>其中 <code class=\"language-text\">Form</code> 是表单原型，下面承载了很多 <code class=\"language-text\">Field</code> 字段原型，由 <code class=\"language-text\">ListenerManager</code> 统一管理联动方面的功能，<code class=\"language-text\">Field</code> 下具有 <code class=\"language-text\">Validator</code> 和 <code class=\"language-text\">OptionManager</code> 分别管理校验和 <code class=\"language-text\">options</code> 选项功能</p>\n<h3>2.2.1 校验实现</h3>\n<p>主要还是通过 <code class=\"language-text\">async-validator</code> 类库实现，但是依然无法满足多校验状态和多触发条件的情况，所以在这个基础上做了些拓展，封装成一个 <code class=\"language-text\">Validator</code> 类。</p>\n<p><code class=\"language-text\">Validator</code> 只有一个 <code class=\"language-text\">Validator.validate</code> 方法，传递一个 <code class=\"language-text\">trigger</code> 参数，实例化 <code class=\"language-text\">Validator</code> 时候会去解析 <code class=\"language-text\">rules</code> 字段，根据 <code class=\"language-text\">trigger</code> 进行分类并创建对应的 <code class=\"language-text\">async-validator</code> 实例。</p>\n<h3>2.2.2 联动实现</h3>\n<p><code class=\"language-text\">ListenerManager</code> 具有 <code class=\"language-text\">ListenerManager.add</code> 方法和 <code class=\"language-text\">ListenerManager.trigger</code> 方法，分别用于解析并添加 <code class=\"language-text\">listeners</code> 字段以及 <code class=\"language-text\">Field</code> 字段发生变化时触发联动效果。</p>\n<p>具体流程是在初始化 <code class=\"language-text\">Field</code> 时，会将 <code class=\"language-text\">listeners</code> 字段通过 <code class=\"language-text\">listenerManager.add</code> 方法解析信息，根据 <code class=\"language-text\">watch</code> 中的 <code class=\"language-text\">key</code> 值进行分类并保存在其中，当 <code class=\"language-text\">Field</code> 信息发生变化的时候会通过 <code class=\"language-text\">ListenerManager.trigger</code> 触发联动，判断 <code class=\"language-text\">condition</code> 条件是否满足，如果满足即触发 <code class=\"language-text\">set</code> 内容。</p>\n<h3>2.2.3 表单列表实现</h3>\n<p>表单列表其实是由多个 <code class=\"language-text\">XForm</code> 实例构成，每一个自增项都是一个 <code class=\"language-text\">XForm</code> 实例，所以联动只能在同一行上进行，不能跨行联动。</p>\n<p>当点击添加按钮的时候，会根据 <code class=\"language-text\">children</code> 提供的 <code class=\"language-text\">Schema</code> 模板创建一个 <code class=\"language-text\">XForm</code> 实例：</p>\n<p><img src=\"https://p1.music.126.net/rHBL8e3QqlBSYXHZkwiEPg==/109951165098838719.png\"></p>\n<h3>2.2.4 布局实现</h3>\n<p>除了 <code class=\"language-text\">Ant Design</code> 的 Form 提供的三种布局方式（horizontal、vertical、inline），还需要提供一种更灵活的布局方式来满足更加复杂的情况。</p>\n<p>布局真是一个很头疼的问题，特别是 <code class=\"language-text\">Schema</code> 在类似 <code class=\"language-text\">JSON</code> 的结构下实现复杂的布局很容易导致 <code class=\"language-text\">Schema</code> 嵌套层级深，这种是我们不愿意看到的。</p>\n<p>最初方案是通过网格布局实现，通过设置 <code class=\"language-text\">Form</code> 的 <code class=\"language-text\">row.count</code> 或者 <code class=\"language-text\">col.count</code> 参数计算出网格的行数和列数再对字段进行分布，这种方式只适用于每行列数都一致的情况，但是这种方式难以满足每行列数不一致的情况：</p>\n<p><img src=\"https://p1.music.126.net/yiMCXwlaYectE7D1b31m4Q==/109951165095690437.png\"></p>\n<p>所以重新设计了一个 <code class=\"language-text\">ui.groupname</code> 的字段，同一个 <code class=\"language-text\">groupname</code> 的字段都会被一个 <code class=\"language-text\">div</code> 包裹住，并且 <code class=\"language-text\">div</code> 的 <code class=\"language-text\">className</code> 即 <code class=\"language-text\">groupname</code> ，用户要实现复杂的布局可以自己写样式去实现，这样的方案虽然简陋，但是实用。</p>\n<h2>3. 细节设计</h2>\n<h3>3.1 忽略特定字段值</h3>\n<p>有些场景需要忽略 <code class=\"language-text\">status</code> 为 <code class=\"language-text\">hidden</code> 的字段的值，所以设计了一个 <code class=\"language-text\">ignoreValues</code> 字段，字段配置有下面几种情况：</p>\n<ul>\n<li>hidden：忽略状态为 hidden 的情况</li>\n<li>preview：忽略状态为 preview 的情况</li>\n<li>disabled：忽略状态为 disabled 的情况</li>\n<li>null：忽略值为 null 的情况</li>\n<li>undefined：忽略值为 undefined 的情况</li>\n<li>falseLike：忽略值 == false 的情况</li>\n</ul>\n<p>通过配置 <code class=\"language-text\">ignoreValues</code> 字段，提交后返回的 <code class=\"language-text\">values</code> 就会忽略相应的字段：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">&lt;XForm schema={schema} ignoreValues={['hidden', 'null']}/></code></pre></div>\n<h3>3.2 字段解构与重组</h3>\n<p>字段解构是指把一个字段的值拆成多个字段，字段重组是指把多个字段组合成一个字段，这块的具体功能还未实现，但是已经有了初步的想法。</p>\n<p>字段解构例子如下，主要是通过 <code class=\"language-text\">key</code> 对字段进行拆分，最终返回 <code class=\"language-text\">values</code> 包含 <code class=\"language-text\">startTime</code> 和 <code class=\"language-text\">endTime</code> 两个字段：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"[startTime, endTime]\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"RangePicker\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"ui\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"时间选择\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>发现许多场景需要由多个字段组合成一个字段，这种情况大多需要写自定义组件不然就是后期需要对数据进行处理，为了简化这一过程所以设计了字段重组的功能。通过 <code class=\"language-text\">Combine</code> 组件将多个字段重组成一个字段：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"time\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Combine\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"ui\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"时间选择\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"props\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"shape\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"{startTime, endTime, type}\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"children\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"startTime\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"DatePicker\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"endTime\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"DatePicker\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"key\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"type\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Select\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"options\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"发行时间\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"publishTime\"</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"上线时间\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"onlineTime\"</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>4. 结尾</h2>\n<p>完善表单这款产品的过程也是一个博采众长的过程，我们调研了业界竞品结合自身业务需求，开发出了这款产品。上面介绍了表单方案的思路和实现方式供大家参考，非常遗憾的是我们产品还未开源，相信会在合适的时候跟大家见面。</p>\n<h2>5. 相关资料</h2>\n<ul>\n<li><a href=\"http://formilyjs.org/\">Formily</a></li>\n<li><a href=\"https://alibaba.github.io/form-render/\">FormRender</a></li>\n</ul>\n<blockquote>\n<p>本文发布自 <a href=\"https://github.com/x-orpheus\">网易云音乐大前端团队</a>，文章未经授权禁止任何形式的转载。我们常年招收前端、iOS、Android，如果你准备换工作，又恰好喜欢云音乐，那就加入我们 grp.music-fe(at)corp.netease.com！</p>\n</blockquote>","frontmatter":{"title":"面向复杂场景的表单解决方案","date":"2020-08-20","description":"表单涉及到联动、校验、布局等复杂场景，经常是开发者的需要耗费精力去解决的点，虽然传统的开发表单的方式已经足够的灵活但是依然有提效的空间，所以针对复杂的表单开发场景我们总结了一套表单开发方案"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/form/","previous":{"fields":{"slug":"/react-fiber/"},"frontmatter":{"title":"React Fiber 源码解析"}},"next":{"fields":{"slug":"/delta-mind/"},"frontmatter":{"title":"用「增量」思想提升代码检查和打包构建的效率"}}}}}