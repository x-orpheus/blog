{"componentChunkName":"component---src-templates-blog-post-js","path":"/lottie-web/","webpackCompilationHash":"6d9b22b749990bbe4509","result":{"data":{"site":{"siteMetadata":{"title":"云音乐大前端专栏","author":"云音乐大前端团队","siteUrl":"https://musicfe.dev"}},"markdownRemark":{"id":"ed395636-d3d8-5e5a-900b-814b9215f935","excerpt":"BodyMovin 图片来源：https://aescripts.com/bodymovin/ 本文作者：青舟 前言 Lottie 是一个复杂帧动画的解决方案，它提供了一套从设计师使用 AE（Adobe After Effects）到各端开发者实现动画的工具流。在设计师通过 AE 完成动画后，可以使用 AE…","html":"<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/5427398960/6ea4/342f/5239/3494fa4d71eca344f28e4354798f99ab.png\" alt=\"BodyMovin\"></p>\n<blockquote>\n<p>图片来源：<a href=\"https://aescripts.com/bodymovin/\">https://aescripts.com/bodymovin/</a></p>\n</blockquote>\n<blockquote>\n<p>本文作者：<a href=\"https://juejin.cn/user/2770425031698359\">青舟</a></p>\n</blockquote>\n<h2>前言</h2>\n<p><a href=\"http://airbnb.io/lottie/#/\">Lottie</a> 是一个复杂帧动画的解决方案，它提供了一套从设计师使用 AE（Adobe After Effects）到各端开发者实现动画的工具流。在设计师通过 AE 完成动画后，可以使用 AE 的扩展程序 <a href=\"https://exchange.adobe.com/creativecloud.details.12557.bodymovin.html\">Bodymovin</a> 导出一份 JSON 格式的动画数据，然后开发同学可以通过 Lottie 将生成的 JSON 数据渲染成动画。</p>\n<h2>1、如何实现一个 Lottie 动画</h2>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/5487209356/ac5a/a22e/198c/e1bce057b196de671fcf6c3f0d3849de.png\" alt=\"实现一个 Lottie 动画流程\"></p>\n<ol>\n<li>设计师使用 AE 制作动画。</li>\n<li>通过 Lottie 提供的 AE 插件 Bodymovin 把动画导出 JSON 数据文件。</li>\n<li>加载 Lottie 库结合 JSON 文件和下面几行代码就可以实现一个 Lottie 动画。</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> lottie <span class=\"token keyword\">from</span> <span class=\"token string\">'lottie-web'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> animationJsonData <span class=\"token keyword\">from</span> <span class=\"token string\">'xxx-demo.json'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// json 文件</span>\n\n<span class=\"token keyword\">const</span> lot <span class=\"token operator\">=</span> lottie<span class=\"token punctuation\">.</span><span class=\"token function\">loadAnimation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n   container<span class=\"token punctuation\">:</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lottie'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n   renderer<span class=\"token punctuation\">:</span> <span class=\"token string\">'svg'</span><span class=\"token punctuation\">,</span>\n   loop<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n   autoplay<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n   animationData<span class=\"token punctuation\">:</span> animationJsonData<span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 开始播放动画</span>\nlot<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>更多动画 JSON 模板可以查看 <a href=\"https://lottiefiles.com/\">https://lottiefiles.com/</a></p>\n<h2>2、解读 JSON 文件数据格式</h2>\n<p>笔者自己制作了 Lottie Demo -> <a href=\"https://codepen.io/qingzhou_coder/pen/ZEpXXgw\">点我预览</a></p>\n<ul>\n<li>0s 至 3s，<code class=\"language-text\">scale</code> 属性值从 100%  变到 50%。</li>\n<li>3s 至 6s，<code class=\"language-text\">scale</code> 属性值从 50%  变到 100%，完成动画。</li>\n</ul>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/5487234864/14f7/8c13/ef9f/5c28183ef9c6ea73ae82323390a4a2c5.png\" alt=\"动画变化路径\"></p>\n<p>通过 Bodymovin 插件导出 JSON 数据结构如下图所示：</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/5487257033/fa32/35ce/799e/49e25544a6c228e823de7f8ad160b7d6.png\" alt=\"JSON 数据结构\"></p>\n<p>详细 JSON 信息可以通过 Demo 查看，JSON 信息命名比较简洁，第一次看可能难以理解。接下来结合笔者自己制作的 Demo 进行解读。</p>\n<h3>2.1 全局信息</h3>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/5487275005/307f/cdc2/e484/bf712c90a876fcfe2aac7d685a64d205.png\" alt=\"全局信息\"></p>\n<p>左侧为使用 AE 新建动画合成需要填入的信息，和右面第一层 JSON 信息对应如下：</p>\n<ul>\n<li><code class=\"language-text\">w</code> 和 <code class=\"language-text\">h</code>： 宽 200、高 200</li>\n<li><code class=\"language-text\">v</code>：Bodymovin 插件版本号 4.5.4</li>\n<li><code class=\"language-text\">fr</code>：<a href=\"https://baike.baidu.com/item/%E5%B8%A7%E7%8E%87\">帧率</a> 30fps</li>\n<li><code class=\"language-text\">ip</code> 和 <code class=\"language-text\">op</code>：开始帧 0、结束帧 180</li>\n<li><code class=\"language-text\">assets</code>：静态资源信息（如图片）</li>\n<li><code class=\"language-text\">layers</code>：图层信息（动画中的每一个图层以及动作信息）</li>\n<li><code class=\"language-text\">ddd</code>：是否为 3d</li>\n<li><code class=\"language-text\">comps</code>：合成图层</li>\n</ul>\n<p>其中 <code class=\"language-text\">fr</code>、<code class=\"language-text\">ip</code>、<code class=\"language-text\">op</code> 在 Lottie 动画过程中尤为重要，前面提到我们的动画 Demo 是 0 - 6s，但是 Lottie 是以帧率计算动画时间的。Demo 中设置的帧率为 30fps，那么 0 - 6s 也就等同于 0 - 180 帧。</p>\n<h3>2.2 图层相关信息</h3>\n<p>理解 JSON 外层信息后，再来展开看下 JSON 中 <code class=\"language-text\">layers</code> 的具体信息，首先  <a href=\"%20https://codepen.io/qingzhou_coder/pen/ZEpXXgw\">demo</a>  制作动画细节如下：</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/5487291207/664d/9b6c/af13/d0b5205361c0e63cc625a9405ca17758.png\" alt=\"动画细节\"></p>\n<p>主要是 3 个区域：</p>\n<ul>\n<li>内容区域，包含形状图层的大小、位置、圆度等信息。</li>\n<li>变化区域，包含 5 个变化属性（锚点、位置、缩放、旋转、不透明度）。</li>\n<li>缩放 3 帧（图中绿色区域），在 0 帧、90 帧、180 帧对缩放属性进行了修改，其中图中所示为第 90 帧，图层缩放至 50%。</li>\n</ul>\n<p>对应上图动画制作信息，便可以对应到 JSON 中的 <code class=\"language-text\">layers</code> 了。如下图所示：</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/5594419045/72c9/4f63/13d4/9120e14b3cf841ec353c7392f140bfc6.png\" alt=\"layers\"></p>\n<h3>2.3 属性变化信息</h3>\n<p>接下来再看 <code class=\"language-text\">ks</code>（变化属性） 中的 <code class=\"language-text\">s</code> 展开，也就是缩放信息。</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/5487329397/1651/cd00/b838/6250d247acb79d664171a68cb6c9a4d0.png\" alt=\"ks信息\"></p>\n<p>其中:</p>\n<ul>\n<li><code class=\"language-text\">t</code> 代表关键帧数</li>\n<li><code class=\"language-text\">s</code> 代表变化前（图层为二维，所以第 3 个值 固定为 100）。</li>\n<li><code class=\"language-text\">e</code> 代表变化后（图层为二维，所以第 3 个值 固定为 100）。</li>\n</ul>\n<h2>3、Lottie 如何把 JSON 数据动起来</h2>\n<p>前面简单理解了 JSON 的数据意义，那么 Lottie 是如何把 JSON 数据动起来的呢？接下来结合 Demo 的 Lottie 源码阅读，只会展示部分源码，重点是理清思路即可，不要执着源代码。</p>\n<p>以下源码介绍主要分为 2 大部分：</p>\n<ul>\n<li>动画初始化（3.1小节 - 3.3小节）</li>\n<li>动画播放（3.4 小节）</li>\n</ul>\n<h3>3.1 初始化渲染器</h3>\n<p>如 <a href=\"https://codepen.io/qingzhou_coder/pen/ZEpXXgw\">Demo</a> 所示，Lottie 通过 <code class=\"language-text\">loadAnimation</code> 方法来初始化动画。渲染器初始化流程如下：</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/5594679187/b364/f1e9/c512/fca13d8718d2aacdddf33a7aea57349b.png\" alt=\"loadAnimation\"></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">loadAnimation</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">params</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 生成当前动画实例</span>\n    <span class=\"token keyword\">var</span> animItem <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnimationItem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 注册动画</span>\n    <span class=\"token function\">setupAnimation</span><span class=\"token punctuation\">(</span>animItem<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 初始化动画实例参数</span>\n    animItem<span class=\"token punctuation\">.</span><span class=\"token function\">setParams</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> animItem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">setupAnimation</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">animItem<span class=\"token punctuation\">,</span> element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 监听事件</span>\n    animItem<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'destroy'</span><span class=\"token punctuation\">,</span> removeElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    animItem<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_active'</span><span class=\"token punctuation\">,</span> addPlayingCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    animItem<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_idle'</span><span class=\"token punctuation\">,</span> subtractPlayingCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 注册动画</span>\n    registeredAnimations<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>elem<span class=\"token punctuation\">:</span> element<span class=\"token punctuation\">,</span> animation<span class=\"token punctuation\">:</span>animItem<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    len <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">AnimationItem</code> 这个类是 Lottie 动画的基类，<code class=\"language-text\">loadAnimation</code> 方法会先生成一个 <code class=\"language-text\">AnimationItem</code> 实例并返回，开发者使用的 <a href=\"http://airbnb.io/lottie/#/web?id=usage-1\">配置参数和方法</a> 都是来自于这个类。</li>\n<li>生成 <code class=\"language-text\">animItem</code> 实例后，调用 <code class=\"language-text\">setupAnimation</code> 方法。这个方法首先监听了 <code class=\"language-text\">destroy</code>、<code class=\"language-text\">_active</code>、<code class=\"language-text\">_idle</code> 三个事件等待被触发。由于可以多个动画并行，因此定义了全局的变量 <code class=\"language-text\">len</code>、<code class=\"language-text\">registeredAnimations</code> 等，用于判断和缓存已注册的动画实例。</li>\n<li>接下来调用 <code class=\"language-text\">animItem</code> 实例的 <code class=\"language-text\">setParams</code> 方法初始化动画参数，除了初始化 <code class=\"language-text\">loop</code> 、 <code class=\"language-text\">autoplay</code> 等参数外，最重要的是选择渲染器。如下：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">AnimationItem</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setParams</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 根据开发者配置选择渲染器</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>animType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'canvas'</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CanvasRenderer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">.</span>rendererSettings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'svg'</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SVGRenderer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">.</span>rendererSettings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\">// html 类型</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HybridRenderer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">.</span>rendererSettings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 渲染器初始化参数</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span>animationData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">configAnimation</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span>animationData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Lottie 提供了 SVG、Canvas 和 HTML 三种渲染模式，一般使用第一种或第二种。</p>\n<ul>\n<li>SVG 渲染器支持的特性最多，也是使用最多的渲染方式。并且 SVG 是可伸缩的，任何分辨率下不会失真。</li>\n<li>Canvas 渲染器就是根据动画的数据将每一帧的对象不断重绘出来。</li>\n<li>HTML 渲染器受限于其功能，支持的特性最少，只能做一些很简单的图形或者文字，也不支持滤镜效果。</li>\n</ul>\n<p>每个渲染器均有各自的实现，复杂度也各有不同，但是动画越复杂，其对性能的消耗也就越高，这些要看实际的状况再去判断。渲染器源码在 <a href=\"https://github.com/airbnb/lottie-web/tree/master/player/js/renderers\">player/js/renderers/</a> 文件夹下，本文 Demo 只分析 SVG 渲染动画的实现。由于 3 种 Renderer 都是基于 <code class=\"language-text\">BaseRenderer</code> 类，所以下文中除了 <code class=\"language-text\">SVGRenderer</code> 也会出现  <code class=\"language-text\">BaseRenderer</code>  类的方法。</p>\n<h3>3.2 初始化动画属性，加载静态资源</h3>\n<p>确认使用 SVG 渲染器后，调用 <code class=\"language-text\">configAnimation</code> 方法初始化渲染器。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">AnimationItem</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">configAnimation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">animData</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 总帧数</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>totalFrames <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>animationData<span class=\"token punctuation\">.</span>op <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>animationData<span class=\"token punctuation\">.</span>ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstFrame <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>animationData<span class=\"token punctuation\">.</span>ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 渲染器初始化参数</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderer<span class=\"token punctuation\">.</span><span class=\"token function\">configAnimation</span><span class=\"token punctuation\">(</span>animData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 帧率</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>frameRate <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>animationData<span class=\"token punctuation\">.</span>fr<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>frameMult <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>animationData<span class=\"token punctuation\">.</span>fr <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'config_ready'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 加载静态资源</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">preloadImages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadSegments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updaFrameModifier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 等待静态资源加载完毕</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">waitForFontsLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在这个方法中将会初始化更多动画对象的属性，比如总帧数 <code class=\"language-text\">totalFrames</code> 、帧率 <code class=\"language-text\">frameMult</code> 等。然后加载一些其他资源，比如图像、字体等。如下图所示：</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/5594828268/de28/0bda/e308/d7a92868659ce71b19c73a5ddf63786a.png\" alt=\"渲染流程\"></p>\n<p>同时在 <code class=\"language-text\">waitForFontsLoaded</code> 方法中等待静态资源加载完毕，加载完毕后便会调用 SVG 渲染器的 <code class=\"language-text\">initItems</code> 方法绘制动画图层，也就是将动画绘制出来。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">AnimationItem</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">waitForFontsLoaded</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 检查加载完毕</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">AnimationItem</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">checkLoaded</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isLoaded <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 初始化所有元素</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>renderer<span class=\"token punctuation\">.</span><span class=\"token function\">initItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DOMLoaded'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 渲染第一帧</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">gotoFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 自动播放</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>autoplay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在 <code class=\"language-text\">checkLoaded</code> 方法中可以看到，通过 <code class=\"language-text\">initItems</code> 初始化所有元素后，便通过 <code class=\"language-text\">gotoFrame</code> 渲染第一帧，如果开发者配置了 <code class=\"language-text\">autoplay</code> 为 <code class=\"language-text\">true</code>，则会直接调用 <code class=\"language-text\">play</code> 方法播放。这里有个印象就好，会在后面详细讲。接下来还是先看 <code class=\"language-text\">initItems</code> 实现细节。</p>\n<h3>3.3 绘制动画初始图层</h3>\n<p><code class=\"language-text\">initItems</code> 方法主要是调用 <code class=\"language-text\">buildAllItems</code> 创建所有图层。<code class=\"language-text\">buildItem</code> 方法又会调用 <code class=\"language-text\">createItem</code> 确定具体图层类型，这里的方法源码中拆分较细，本文只保留了 <code class=\"language-text\">createItem</code> 方法，其他感兴趣可以查看源码细节。</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/5594976128/4092/2ba8/1e0f/5109a9fc1dd0d10eca711b31ef2086f4.png\" alt=\"initItems\"></p>\n<p>在制作动画时，设计师操作的图层元素有很多种，比如图片、形状、文字等等。所以 <code class=\"language-text\">layers</code> 中每个图层会有一个字段  <code class=\"language-text\">ty</code> 来区分。结合 <code class=\"language-text\">createItem</code> 方法来看，一共有以下 8 中类型。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">BaseRenderer</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createItem</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">layer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 根据图层类型，创建相应的 svg 元素类的实例</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">.</span>ty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\">// 合成</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createComp</span><span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\">// 固态</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createSolid</span><span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\">// 图片</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createImage</span><span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\">// 兜底空元素</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createNull</span><span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\">// 形状</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createShape</span><span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\">// 文字</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createText</span><span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\">// 音频</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createAudio</span><span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token number\">13</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\">// 摄像机</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createCamera</span><span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createNull</span><span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>由于笔者以及大多数开发者，都不是专业的 AE 玩家，因此不必不过纠结每种类型是什么，理清主要思路即可。结合笔者的 Demo ，只有一个图层，并且图层的 <code class=\"language-text\">ty</code> 为 4 。是一个 <code class=\"language-text\">Shape</code> 形状图层，因此在初始化图层过程中只会执行 <code class=\"language-text\">createShape</code> 方法。</p>\n<p>其他图层类型的渲染逻辑，如 <code class=\"language-text\">Image</code>、<code class=\"language-text\">Text</code>、<code class=\"language-text\">Audio</code> 等等，每一种元素的渲染逻辑都实现在源码  <a href=\"https://github.com/airbnb/lottie-web/tree/master/player/js/elements\">player/js/elements/</a> 文件夹下，具体实现逻辑这里就不进行展开了，感兴趣的同学自行查看。</p>\n<p>接下来便是执行 <code class=\"language-text\">createShape</code> 方法，初始化元素相关属性。</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/5595433052/6ed6/7699/b087/ddafbd02fe0b7bdacd5e84116723881d.png\" alt=\"绘制Shape图层\"></p>\n<p>除了一些细节的初始化方法，其中值得注意的是 <code class=\"language-text\">initTransform</code> 方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">initTransform</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>finalTransform <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        mProp<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>ks\n            <span class=\"token operator\">?</span> TransformPropertyFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getTransformProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>ks<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>o<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        _matMdf<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        _opMdf<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        mat<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Matrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>利用 <code class=\"language-text\">TransformPropertyFactory</code> 对 <code class=\"language-text\">transform</code> 初始化，结合 Demo 第 0 帧，对应如下：</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/5487234864/14f7/8c13/ef9f/5c28183ef9c6ea73ae82323390a4a2c5.png\" alt=\"动画变化路径\"></p>\n<ul>\n<li>不透明度 100%</li>\n<li>缩放 100%</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span></code></pre></div>\n<p>那么为什么在初始化渲染图层时，需要初始化 <code class=\"language-text\">transform</code> 和 <code class=\"language-text\">opacity</code> 呢？这个问题会在 3.4 小节中进行回答。</p>\n<h3>3.4 Lottie 动画播放</h3>\n<p>在分析  Lottie 源码动画播放前，先来回忆下。笔者 Demo 的动画设置：</p>\n<ul>\n<li>0s 至 3s，<code class=\"language-text\">scale</code> 属性值从 100%  变到 50%。</li>\n<li>3s 至 6s，<code class=\"language-text\">scale</code> 属性值从 50%  变到 100%。</li>\n</ul>\n<p>如果按照这个设置，3s 进行一次改变的话，那动画就过于生硬了。因此设计师设置了帧率为 30fps ，意味着每隔 33.3ms 进行一次<strong>变化</strong>，使得动画不会过于僵硬。那么如何实现这个<strong>变化</strong>，便是 3.3 小节提到的  <code class=\"language-text\">transform</code> 和 <code class=\"language-text\">opacity</code> 。</p>\n<p>在 2.2 小节中提到的 5 个变化属性（锚点、位置、缩放、旋转、不透明度）。其中不透明度通过 CSS 的 <code class=\"language-text\">opacity</code> 来控制，其他 4 个（锚点、位置、缩放、旋转）则通过 <code class=\"language-text\">transform</code> 的 <code class=\"language-text\">matrix</code> 来控制。笔者的 Demo 中实际上初始值如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">matrix</span><span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 1<span class=\"token punctuation\">,</span> 100<span class=\"token punctuation\">,</span> 100<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* 上文的 transform: scale(1); 只是为了方便理解*/</span>\n<span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span></code></pre></div>\n<p>这是因为无论是旋转还是缩放等属性，本质上都是应用 <code class=\"language-text\">transform</code> 的 <code class=\"language-text\">matrix()</code> 方法实现的，因此 Lottie 统一使用 <code class=\"language-text\">matrix</code> 处理。平时开发者使用的类似于 <code class=\"language-text\">transform: scale</code> 这种表现形式，只是因为更容易理解，记忆与上手。 <code class=\"language-text\">matrix</code> 相关知识点可以学习张鑫旭老师的 <a href=\"https://www.zhangxinxu.com/wordpress/2012/06/css3-transform-matrix-%E7%9F%A9%E9%98%B5/\">理解CSS3 transform中的Matrix</a>。</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/5487401057/57e3/2fb6/4eb5/2b9b0cec7584d14613e2742e3ac45ed8.png\" alt=\"矩阵\"></p>\n<p>所以 Lottie 动画播放流程可<strong>暂时</strong>小结为：</p>\n<ol>\n<li>渲染图层，初始化所有图层的  <code class=\"language-text\">transform</code> 和 <code class=\"language-text\">opacity</code> </li>\n<li>根据帧率 30fps，计算每一帧（每隔 33.3ms ）对应的  <code class=\"language-text\">transform</code> 和 <code class=\"language-text\">opacity</code> 并修改 DOM</li>\n</ol>\n<p>然而 Lottie 如何控制 30fps 的时间间隔呢？如果设计师设置 20fps or 40fps 怎么处理？可以通过 <code class=\"language-text\">setTimeout</code>、<code class=\"language-text\">setInterval</code> 实现吗？带着这个问题看看源码是如何处理的，如何实现一个通用的解决方案。</p>\n<p>Lottie 动画播放主要是使用 <code class=\"language-text\">AnimationItem</code> 实例的 <code class=\"language-text\">play</code> 方法。如果开发者配置了 <code class=\"language-text\">autoplay</code> 为 <code class=\"language-text\">true</code>，则会在所有初始化工作准备完毕后（3.2 小节有提及），直接调用 <code class=\"language-text\">play</code> 方法播放。否则由开发者主动调用 <code class=\"language-text\">play</code> 方法播放。</p>\n<p>接下来从 <code class=\"language-text\">play</code> 方法了解一下整个播放流程的细节：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">AnimationItem</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">play</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_active'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>去掉多余代码， <code class=\"language-text\">play</code> 方法主要是触发了 <code class=\"language-text\">_active</code>  事件，这个 <code class=\"language-text\">_active</code> 事件便是在 3.1 小节初始化时注册的。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">animItem<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_active'</span><span class=\"token punctuation\">,</span> addPlayingCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">addPlayingCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">activate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">activate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 触发第一帧渲染</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>触发后通过调用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame\">requestAnimationFrame</a> 方法，不断的调用 <code class=\"language-text\">resume</code> 方法来控制动画。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nowTime</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    initTime <span class=\"token operator\">=</span> nowTime<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// requestAnimationFrame 每次都进行计算修改 DOM</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>resume<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>前文提到的动画参数：</p>\n<ul>\n<li>开始帧为 0</li>\n<li>结束帧为 180</li>\n<li>帧率为 30 fps</li>\n</ul>\n<p><code class=\"language-text\">requestAnimationFrame</code> 在正常情况下能达到 60 fps（每隔 16.7ms 左右）。那么 Lottie 如何保证动画按照 30 fps （每隔 33.3ms）流畅运行呢。这个时候我们要转化下思维，设计师希望按照每隔 33.3ms 去计算变化，那也可以通过 <code class=\"language-text\">requestAnimationFrame</code> 方法，每隔 16.7ms 去计算，也可以计算动画的变化。只不过计算的更细致而已，而且还会使得动画更流畅，这样无论是 20fps or 40fps  都可以处理了，来看下源码是如何处理的。</p>\n<p>在不断调用的 <code class=\"language-text\">resume</code> 方法中，主要逻辑如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">resume</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nowTime</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 两次 requestAnimationFrame 间隔时间</span>\n    <span class=\"token keyword\">var</span> elapsedTime <span class=\"token operator\">=</span> nowTime <span class=\"token operator\">-</span> initTime<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 下一次计算帧数 = 上一次执行的帧数 + 本次间隔的帧数</span>\n    <span class=\"token comment\">// frameModifier 为帧率( fr / 1000 = 0.03)</span>\n    <span class=\"token keyword\">var</span> nextValue <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentRawFrame <span class=\"token operator\">+</span> value <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>frameModifier<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setCurrentRawFrameValue</span><span class=\"token punctuation\">(</span>nextValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    initTime <span class=\"token operator\">=</span> nowTime<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>playingAnimationsNum <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>_isFrozen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        window<span class=\"token punctuation\">.</span><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>resume<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        _stopped <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">AnimationItem</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setCurrentRawFrameValue</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentRawFrame <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 渲染当前帧</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">renderFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p> <code class=\"language-text\">resume</code> 方法：</p>\n<ul>\n<li>首先会计算当前时间和上次时间的 <code class=\"language-text\">diff</code> 时间。</li>\n<li>之后计算动画开始到现在的时间的当前帧数。注意这里的<strong>帧数</strong>只是相对 AE 设置的一个计算单位，可以有小数。</li>\n<li>最后通过 <code class=\"language-text\">renderFrame()</code> 方法更新当前帧对应的 DOM 变化。</li>\n</ul>\n<p>举例说明：</p>\n<p>假设上一帧为 70.25 帧，本次 <code class=\"language-text\">requestAnimationFrame</code> 间隔时间为 16.78 ms，那么：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">当前帧数：70.25 +  16.78 * 0.03 =  70.7534帧</code></pre></div>\n<p>由于 70.7534 帧在 Demo 中的 0 - 90 帧动画范围内，因此帧比例（代表动画运行时间百分比）的计算如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">帧比例：70.7534 / 90 = 0.786148889</code></pre></div>\n<p>0 - 90 帧的动画为图层从 100% 缩放至 50% ，因为仅计算 50% 的变化，所以缩放到如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">缩放比例： 100 - （50 * 0.781666）= 60.69255555%</code></pre></div>\n<p>对应计算代码在 <code class=\"language-text\">TransformPropertyFactory</code> 类中：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 计算百分比</span>\nperc <span class=\"token operator\">=</span> <span class=\"token function\">fnc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>frameNum <span class=\"token operator\">-</span> keyTime<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>nextKeyTime <span class=\"token operator\">-</span> keyTime <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nendValue <span class=\"token operator\">=</span> nextKeyData<span class=\"token punctuation\">.</span>s <span class=\"token operator\">||</span> keyData<span class=\"token punctuation\">.</span>e<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 计算值</span>\nkeyValue <span class=\"token operator\">=</span> keyData<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>endValue<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> keyData<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> perc<span class=\"token punctuation\">;</span></code></pre></div>\n<p>其中 <code class=\"language-text\">fnc</code> 为计算函数，如果设置了贝塞尔运动曲线函数，那么 <code class=\"language-text\">fnc</code> 也会相应修改计算规则。当前 Demo 为了方便理解，采用的是线性变化。具体源码感兴趣的同学可以自行查看。</p>\n<p>计算好当前 <code class=\"language-text\">scale</code> 的值后，再利用 <code class=\"language-text\">TransformPropertyFactory</code> 计算好当前对应的 <code class=\"language-text\">transform</code> 的 <code class=\"language-text\">matrix</code> 值，然后修改对应 DOM 元素上的 CSS 属性。这样通过 <code class=\"language-text\">requestAnimationFrame</code> 不停的计算帧数，再计算对应的 CSS 变化，在一定的时间内，便实现了动画。播放流程如下：</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/5610178301/8d17/a32d/0cc6/56d419a6f928d413be2bc1ed6d10eb20.png\" alt=\"播放流程\"></p>\n<p>帧数计算这里需要时刻记住，<strong>在 Lottie 中，把 AE 设置的帧数作为一个计算单位</strong>，Lottie 并不是根据设计师设置的 30fps（每隔 33.3ms） 进行每一次变化，而是根据  <code class=\"language-text\">requestAnimationFrame</code> 的间隔（每隔 16.7ms 左右）计算了更细致的变化，保证动画的流畅运行。</p>\n<p>没有通过 <code class=\"language-text\">setTimeout</code>、<code class=\"language-text\">setInterval</code> 实现，是因为它们都有各自的缺点，这里就不展开了，大家自行查阅资料。<code class=\"language-text\">requestAnimationFrame</code> 采用系统时间间隔，保持最佳绘制效率，让动画能够有一个统一的刷新机制，从而节省系统资源，提高系统性能，改善视觉效果。</p>\n<h2>4、总结</h2>\n<p>虽然我们了解了 Lottie 的实现原理，但是在实际应用中也有一些优势和不足，要按照实际情况进行取舍。</p>\n<h3>4.1 Lottie 的优势</h3>\n<ol>\n<li>设计师通过 AE 制作动画，前端可以直接还原，不会出现买家秀卖家秀的情况。</li>\n<li>SVG 是可伸缩的，任何分辨率下不会失真。</li>\n<li>JSON 文件，可以多端复用（Web、Android、iOS、React Native）。</li>\n<li>JSON 文件大小会比 GIF 以及 APNG 等文件小很多，性能也会更好。</li>\n</ol>\n<h3>4.2 Lottie 的不足</h3>\n<ol>\n<li>Lottie-web 文件本身仍然比较大，未压缩大小为 513k，轻量版压缩后也有 144k，经过 Gzip 后，大小为39k。所以，需要注意 Lottie-web 的加载。</li>\n<li>不必要的序列帧。Lottie 的主要动画思想是绘制某一个图层不断的改变 CSS 属性，如果设计师偷懒用了一些插件实现的动画效果，可能会造成每一帧都是一张图，如下图所示，那就会造成这个 JSON 文件非常大，注意和设计师提前进行沟通。</li>\n</ol>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/5487460182/1c5f/6d6f/302a/c0f43f391de4a6f55bdd4036246075af.png\" alt=\"不必要的序列帧\"></p>\n<ol start=\"3\">\n<li>部分AE特效不支持。有少量的 AE 动画效果，Lottie 无法实现，有些是因为性能问题，有些是没有做，注意和设计师提前沟通，<a href=\"http://airbnb.io/lottie/#/supported-features\">点我查看</a>。</li>\n</ol>\n<h2>5、参考资料</h2>\n<ul>\n<li><a href=\"https://github.com/airbnb/lottie-web/\">https://github.com/airbnb/lottie-web/</a></li>\n<li><a href=\"http://airbnb.io/lottie/#/\">http://airbnb.io/lottie/#/</a></li>\n<li><a href=\"https://www.zhangxinxu.com/wordpress/2012/06/css3-transform-matrix-%E7%9F%A9%E9%98%B5/\">理解CSS3 transform中的Matrix</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame\">window.requestAnimationFrame</a></li>\n</ul>\n<blockquote>\n<p>本文发布自 <a href=\"https://github.com/x-orpheus\">网易云音乐大前端团队</a>，文章未经授权禁止任何形式的转载。我们常年招收前端、iOS、Android，如果你准备换工作，又恰好喜欢云音乐，那就加入我们 grp.music-fe(at)corp.netease.com！ </p>\n</blockquote>","frontmatter":{"title":"剖析 lottie-web 动画实现原理","date":"2021-01-07","description":"lottie-web 可以帮我们实现非常炫酷的动画效果，那么它是如何实现的呢？笔者对动画实现和原理做了一次梳理，整理了下面的文档供大家参考。"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/lottie-web/","previous":{"fields":{"slug":"/poplayer/"},"frontmatter":{"title":"Poplayer 云音乐优化实践"}},"next":{"fields":{"slug":"/flutter/"},"frontmatter":{"title":"Flutter 图片控件适配之路"}}}}}