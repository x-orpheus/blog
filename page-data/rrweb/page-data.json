{"componentChunkName":"component---src-templates-blog-post-js","path":"/rrweb/","webpackCompilationHash":"6094ab385e61cbba192a","result":{"data":{"site":{"siteMetadata":{"title":"云音乐大前端专栏","author":"云音乐大前端团队","siteUrl":"https://musicfe.dev"}},"markdownRemark":{"id":"a5546ca1-a024-5d86-aa64-3463b4b08907","excerpt":"Baker_Street 本文作者：吴硕硕 背景 云音乐内部有许多内容管理系统 (Content Management System，CMS…","html":"<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/12204956629/603d/3a1b/3855/f840616524854851802a795016600354.jpg\" alt=\"Baker_Street\"></p>\n<blockquote>\n<p>本文作者：<a href=\"https://juejin.cn/user/3861140566978014\">吴硕硕</a></p>\n</blockquote>\n<h1>背景</h1>\n<p>云音乐内部有许多内容管理系统 (Content Management System，CMS)，用来支撑业务的运营配置等工作，运营同学在使用过程中遇到问题时，期望开发人员可以及时给予反馈并解决问题；痛点是开发人员没有问题现场，很难去快速定位到问题，通常的场景是：</p>\n<ul>\n<li>运营同学 Watson：「Sherlock，我在配置 mlog 标签的时候提示该标签不存在，快帮我看下，急。」</li>\n<li>开发同学 Sherlock：「不慌，我看看。」<em>（打开测试环境的运营管理后台，一顿操作，一切非常的正常…）</em></li>\n<li>开发同学 Sherlock：「我这儿正常的啊，你的工位在哪，我去你那看看」</li>\n<li>运营同学 Watson：「我在北京…」</li>\n<li>开发同学 Sherlock：「我在杭州…」</li>\n</ul>\n<p>为了对运营同学在使用中遇到的相关问题及时给予反馈，尽快定位并解决 CMS 用户遇到的使用问题，设计实现了问题一键上报插件，用于还原问题现场，主要包括录制和展示两部分：</p>\n<ul>\n<li>ThemisRecord 插件：上报用户基础信息、用户权限、API 请求 &#x26; 结果、错误堆栈、录屏</li>\n<li>倾听平台承接展示：显示录屏回放、用户、请求和错误堆栈信息</li>\n</ul>\n<h1>上报流程</h1>\n<p>问题一键上报插件设计的主要流程如下图所示，在录屏期间，插件需要分别收集用户基础信息、API 请求数据、错误堆栈信息和录屏信息，并将数据上传到 NOS 云端和倾听平台。\n<img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/12204634442/66d0/2f60/b77e/b1ab6c69b7f554f502cbe452c12a3dc0.png\" alt=\"插件设计\">\n在整个上报的流程中，如何实现操作录屏和回放是一个难点，经过调研，发现 <a href=\"https://github.com/rrweb-io/rrweb\">rrweb</a> 开源库可以很好的满足我们的需求。rrweb 库支持的场景有录屏回放、自定义事件、console 录制播放等多种场景，其中录屏回放是最常用的使用场景，具体使用详见<a href=\"https://github.com/rrweb-io/rrweb/blob/master/docs/recipes/index.zh_CN.md\">场景示例</a>。</p>\n<p>本文主要介绍的是 rrweb 库的录屏回放实现原理。</p>\n<h1>rrweb 库</h1>\n<p>rrweb 主要由 <code class=\"language-text\">rrweb</code> 、 <code class=\"language-text\">rrweb-player</code> 和 <code class=\"language-text\">rrweb-snapshot</code> 三个库组成：</p>\n<ul>\n<li>rrweb：提供了 record 和 replay 两个方法；record 方法用来记录页面上 DOM 的变化，replay 方法支持根据时间戳去还原 DOM 的变化。</li>\n<li>rrweb-player：基于 svelte 模板实现，为 rrweb 提供了回放的 GUI 工具，支持暂停、倍速播放、拖拽时间轴等功能。内部调用了 rrweb 的提供的 replay 等方法。</li>\n<li>rrweb-snapshot：包括 snapshot 和 rebuilding 两大特性，snapshot 用来序列化 DOM 为增量快照，rebuilding 负责将增量快照还原为 DOM。</li>\n</ul>\n<p>了解 rrweb 库的原理，可以从下面几个关键问题入手：</p>\n<ul>\n<li>如何实现事件监听</li>\n<li>如何序列化 DOM</li>\n<li>如何实现自定义计时器</li>\n</ul>\n<h2>如何实现事件监听</h2>\n<p>基于 rrweb 去实现录屏，通常会使用下面的方式去记录 event，通过 emit 回调方法可以拿到 DOM 变化对应所有 event。拿到 event 后，可以根据业务需求去做处理，例如我们的一键上报插件会上传到云端，开发者可以在倾听平台拉取云端的数据并回放。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> events <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nrrweb<span class=\"token punctuation\">.</span><span class=\"token function\">record</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// emit option is required</span>\n  <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// push event into the events array</span>\n    events<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">record</code> 方法内部会根据事件类型去初始化事件的监听，例如 DOM 元素变化、鼠标移动、鼠标交互、滚动等都有各自专属的事件监听方法，本文主要关注的是 DOM 元素变化的监听和处理流程。</p>\n<p>要实现对 DOM 元素变化的监听，离不开浏览器提供的 <code class=\"language-text\">MutationObserver</code> API，该 API 会在一系列 DOM 变化后，通过<strong>批量异步</strong>的方式去触发回调，并将 DOM 变化通过 <code class=\"language-text\">MutationRecord</code> 数组传给回调方法。详细的 <code class=\"language-text\">MutationObserver</code> 介绍可以前往 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver\">MDN</a> 查看。</p>\n<p>rrweb 内部也是基于该 API 去实现监听，回调方法为 <code class=\"language-text\">MutationBuffer</code> 类提供的 <code class=\"language-text\">processMutations</code> 方法：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutationObserver</span><span class=\"token punctuation\">(</span>\n    mutationBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">processMutations</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>mutationBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">mutationBuffer.processMutations</code> 方法会根据 <code class=\"language-text\">MutationRecord.type</code> 值做不同的处理：</p>\n<ul>\n<li><code class=\"language-text\">type === &#39;attributes&#39;</code>: 代表 DOM 属性变化，所有属性变化的节点会记录在 <code class=\"language-text\">this.attributes</code> 数组中，结构为 <code class=\"language-text\">{ node: Node, attributes: {} }</code>，attributes 中仅记录本次变化涉及到的属性；</li>\n<li><code class=\"language-text\">type === &#39;characterData&#39;</code>: 代表 characterData 节点变化，会记录在 <code class=\"language-text\">this.texts</code> 数组中，结构为 <code class=\"language-text\">{ node: Node, value: string }</code>，value 为 characterData 节点的最新值；</li>\n<li><code class=\"language-text\">type === &#39;childList&#39;</code>: 代表子节点树 childList 变化，比起前面两种类型，处理会较为复杂。</li>\n</ul>\n<h3>childList 增量快照</h3>\n<p>childList 发生变化时，若每次都完整记录整个 DOM 树，数据会非常庞大，显然不是一个可行的方案，所以，rrweb 采用了增量快照的处理方式。</p>\n<p>有三个关键的 Set：<code class=\"language-text\">addedSet</code>、 <code class=\"language-text\">movedSet</code>、 <code class=\"language-text\">droppedSet</code>，对应三种节点操作：新增、移动、删除，这点和 <code class=\"language-text\">React diff</code> 机制相似。此处使用 Set 结构，实现了对 DOM 节点的去重处理。</p>\n<h3>节点新增</h3>\n<p>遍历 <code class=\"language-text\">MutationRecord.addedNodes</code> 节点，将未被序列化的节点添加到 <code class=\"language-text\">addedSet</code> 中，并且若该节点存在于被删除集合 <code class=\"language-text\">droppedSet</code> 中，则从 <code class=\"language-text\">droppedSet</code> 中移除。</p>\n<p>示例：创建节点 n1、n2，将 n2 append 到 n1 中，再将 n1 append 到 body 中。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">body\n  n1\n    n2</code></pre></div>\n<p>上述节点操作只会生成一条 <code class=\"language-text\">MutationRecord</code> 记录，即增加 n1，「n2 append 到 n1」的过程不会生成<code class=\"language-text\">MutationRecord</code> 记录，所以在遍历 <code class=\"language-text\">MutationRecord.addedNodes</code> 节点，需要去遍历其子节点，不然 n2 节点就会被遗漏。</p>\n<p>遍历完所有 <code class=\"language-text\">MutationRecord</code> 记录数组，会统一对 <code class=\"language-text\">addedSet</code> 中的节点做序列化处理，每个节点序列化处理的结果是：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type addedNodeMutation <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  parentId<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">;</span>\n  nextId<span class=\"token punctuation\">:</span> number <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  node<span class=\"token punctuation\">:</span> serializedNodeWithId<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>DOM 的关联关系是通过 <code class=\"language-text\">parentId</code> 和 <code class=\"language-text\">nextId</code> 建立起来的，若该 DOM 节点的父节点、或下一个兄弟节点尚未被序列化，则该节点无法被准确定位，所以需要先将其存储下来，最后处理。\n<img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/12204726077/a5b3/d9db/a0b3/e15da6d76c10db3e0fedf304af4a2e54.png\" alt=\"双向链表\"></p>\n<p>rrweb 使用了一个双向链表 <code class=\"language-text\">addList</code> 用来存储父节点尚未被添加的节点，向 <code class=\"language-text\">addList</code> 中插入节点时：</p>\n<ol>\n<li>若 DOM 节点的 previousSibling 已存在于链表中，则插入在 <code class=\"language-text\">node.previousSibling</code> 节点后</li>\n<li>若 DOM 节点的 nextSibling 已存在于链表中，则插入在 <code class=\"language-text\">node.nextSibling</code> 节点前</li>\n<li>都不在，则插入链表的头部</li>\n</ol>\n<p>通过这种添加方式，可以保证兄弟节点的顺序，DOM 节点的 <code class=\"language-text\">nextSibling</code> 一定会在该节点的后面，<code class=\"language-text\">previousSibling</code> 一定在该节点的前面；<code class=\"language-text\">addedSet</code> 序列化处理完成后，会对 <code class=\"language-text\">addList</code> 链表进行倒序遍历，这样可以保证 DOM 节点的 <code class=\"language-text\">nextSibling</code> 一定是在 DOM 节点之前被序列化，下次序列化 DOM 节点的时候，就可以拿到 <code class=\"language-text\">nextId</code>。</p>\n<h3>节点移动</h3>\n<p>遍历 <code class=\"language-text\">MutationRecord.addedNodes</code> 节点，若记录的节点有 <code class=\"language-text\">__sn</code> 属性，则添加到 <code class=\"language-text\">movedSet</code> 中。有 <code class=\"language-text\">__sn</code> 属性代表是已经被序列化处理过的 DOM 节点，即意味着是对节点的移动。</p>\n<p>在对 <code class=\"language-text\">movedSet</code> 中的节点序列化处理之前，会判断其父节点是否已被移除：</p>\n<ol>\n<li>父节点被移除，则无需处理，跳过；</li>\n<li>父节点未被移除，对该节点进行序列化。</li>\n</ol>\n<h3>节点删除</h3>\n<p>遍历 <code class=\"language-text\">MutationRecord.removedNodes</code> 节点：</p>\n<ol>\n<li>若该节点是本次新增节点，则忽略该节点，并且从 <code class=\"language-text\">addedSet</code> 中移除该节点，同时记录到 <code class=\"language-text\">droppedSet</code> 中，在处理新增节点的时候需要用到：虽然我们移除了该节点，但其子节点可能还存在于 <code class=\"language-text\">addedSet</code> 中，在处理 <code class=\"language-text\">addedSet</code> 节点时，会判断其祖先节点是否已被移除；</li>\n<li>需要删除的节点记录在 <code class=\"language-text\">this.removes</code> 中，记录了 parentId 和节点 id。</li>\n</ol>\n<h2>如何序列化 DOM</h2>\n<p><code class=\"language-text\">MutationBuffer</code> 实例会调用 <code class=\"language-text\">snapshot</code> 的 <code class=\"language-text\">serializeNodeWithId</code> 方法对 DOM 节点进行序列化处理。\n<code class=\"language-text\">serializeNodeWithId</code> 内部调用 <code class=\"language-text\">serializeNode</code> 方法，根据 <code class=\"language-text\">nodeType</code> 对 Document、Doctype、Element、Text、CDATASection、Comment 等不同类型的 node 进行序列化处理，其中的关键是对 Element 的序列化处理:</p>\n<ul>\n<li>遍历元素的 <code class=\"language-text\">attributes</code> 属性，并且调用 <code class=\"language-text\">transformAttribute</code> 方法将资源路径处理为绝对路径；</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span> <span class=\"token keyword\">of</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n <span class=\"token keyword\">as</span> HTMLElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        attributes<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">transformAttribute</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">,</span> tagName<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>通过检查元素是否包含 <code class=\"language-text\">blockClass</code> 类名，或是否匹配 <code class=\"language-text\">blockSelector</code> 选择器，去判断元素是否需要被隐藏；为了保证元素隐藏不会影响页面布局，会给返回一个同等宽高的空元素；</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">const</span> needBlock <span class=\"token operator\">=</span> <span class=\"token function\">_isBlockedElement</span><span class=\"token punctuation\">(</span>\n        n <span class=\"token keyword\">as</span> HTMLElement<span class=\"token punctuation\">,</span>\n        blockClass<span class=\"token punctuation\">,</span>\n        blockSelector<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>区分外链 style 文件和内联 style，对 CSS 样式序列化，并对 css 样式中引用资源的相对路径转换为绝对路径；对于外链文件，通过 CSSStyleSheet 实例的 cssRules 读取所有的样式，拼接成一个字符串，放到 <code class=\"language-text\">_cssText</code> 属性中；</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tagName <span class=\"token operator\">===</span> <span class=\"token string\">'link'</span> <span class=\"token operator\">&amp;&amp;</span> inlineStylesheet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// document.styleSheets 获取所有的外链style</span>\n        <span class=\"token keyword\">const</span> stylesheet <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span>styleSheets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>href <span class=\"token operator\">===</span> <span class=\"token punctuation\">(</span>n <span class=\"token keyword\">as</span> HTMLLinkElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取该条css文件对应的所有rule的字符串</span>\n        <span class=\"token keyword\">const</span> cssText <span class=\"token operator\">=</span> <span class=\"token function\">getCssRulesString</span><span class=\"token punctuation\">(</span>stylesheet <span class=\"token keyword\">as</span> CSSStyleSheet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cssText<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">delete</span> attributes<span class=\"token punctuation\">.</span>rel<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">delete</span> attributes<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 将css文件中资源路径转换为绝对路径</span>\n            attributes<span class=\"token punctuation\">.</span>_cssText <span class=\"token operator\">=</span> <span class=\"token function\">absoluteToStylesheet</span><span class=\"token punctuation\">(</span> \n                cssText<span class=\"token punctuation\">,</span>\n                stylesheet<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>href<span class=\"token operator\">!</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>对用户输入数据调用 <code class=\"language-text\">maskInputValue</code> 方法进行加密处理；</li>\n<li>将 canvas 转换为 base64 图片保存，记录 media 当前播放的时间、元素的滚动位置等；</li>\n<li>返回一个序列化后的对象 <code class=\"language-text\">serializedNode</code>，其中包含前面处理过的 attributes 属性，序列化的关键是每个节点都会有唯一的 id，其中 <code class=\"language-text\">rootId</code> 代表所属 document 的 id，帮助我们在回放的时候识别根节点。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> NodeType<span class=\"token punctuation\">.</span>Element<span class=\"token punctuation\">,</span>\n        tagName<span class=\"token punctuation\">,</span>\n        attributes<span class=\"token punctuation\">,</span>\n        childNodes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        isSVG<span class=\"token punctuation\">,</span>\n        needBlock<span class=\"token punctuation\">,</span>\n        rootId<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Event 时间戳</h3>\n<p>拿到序列化后的 DOM 节点，会统一调用<code class=\"language-text\">wrapEvent</code>方法给事件添加上时间戳，在回放的时候需要用到。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">wrapEvent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">:</span> event</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> eventWithTime <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>e<span class=\"token punctuation\">,</span>\n    timestamp<span class=\"token punctuation\">:</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>序列化 id</h3>\n<p><code class=\"language-text\">serializeNodeWithId</code> 方法在序列化的时候会从 DOM 节点的 <code class=\"language-text\">__sn.id</code> 属性中读取 id，若不存在，就调用 genId 生成新的 id，并赋值给 <code class=\"language-text\">__sn.id</code> 属性，该 id 是用来唯一标识 DOM 节点，通过 id 建立起 <code class=\"language-text\">id -&gt; DOM</code> 的映射关系，帮助我们在回放的时候找到对应的 DOM 节点。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">genId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> number <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> _id<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> serializedNode <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>_serializedNode<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>若 DOM 节点存在子节点，则会递归调用 <code class=\"language-text\">serializeNodeWithId</code> 方法，最后会返回一个下面这样的 tree 数据结构：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> NodeType<span class=\"token punctuation\">.</span>Document<span class=\"token punctuation\">,</span>\n    childNodes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">{</span>\n            type<span class=\"token punctuation\">:</span> NodeType<span class=\"token punctuation\">.</span>Element<span class=\"token punctuation\">,</span>\n            tagName<span class=\"token punctuation\">,</span>\n            attributes<span class=\"token punctuation\">,</span>\n            childNodes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">//...</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            isSVG<span class=\"token punctuation\">,</span>\n            needBlock<span class=\"token punctuation\">,</span>\n            rootId<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    rootId<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>如何实现自定义计时器</h2>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/12269671785/a676/40d2/f7ed/6d8280be8fea2510b196d649bf24457c.png\" alt=\"replay\">\n回放的过程中为了支持进度条的随意拖拽，以及回放速度的设置（如上图所示），自定义实现了高精度计时器 Timer ，关键属性和方法为：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> declare <span class=\"token keyword\">class</span> <span class=\"token class-name\">Timer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 回放初始位置，对应进度条拖拽到的任意时间点</span>\n    timeOffset<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 回放的速度</span>\n    speed<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 回放Action队列</span>\n    <span class=\"token keyword\">private</span> actions<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 添加回放Action队列</span>\n    <span class=\"token function\">addActions</span><span class=\"token punctuation\">(</span>actions<span class=\"token punctuation\">:</span> actionWithDelay<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 开始回放</span>\n    <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 设置回放速度</span>\n    <span class=\"token function\">setSpeed</span><span class=\"token punctuation\">(</span>speed<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>回放入口</h3>\n<p>通过 Replayer 提供的 <code class=\"language-text\">play</code> 方法可以将上文记录的事件在 iframe 中进行回放。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> replayer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">rrweb<span class=\"token punctuation\">.</span>Replayer</span><span class=\"token punctuation\">(</span>events<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreplayer<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>第一步，初始化 <code class=\"language-text\">rrweb.Replayer</code> 实例时，会创建一个 iframe 作为承载事件回放的容器，再分别调用创建两个 service： <code class=\"language-text\">createPlayerService</code> 用于处理事件回放的逻辑，<code class=\"language-text\">createSpeedService</code> 用于控制回放的速度。</p>\n<p>第二步，会调用 <code class=\"language-text\">replayer.play()</code> 方法，去触发 <code class=\"language-text\">PLAY</code> 事件类型，开始事件回放的处理流程。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// this.service 为 createPlayerService 创建的回放控制service实例</span>\n<span class=\"token comment\">// timeOffset 值为鼠标拖拽后的时间偏移量</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'PLAY'</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> timeOffset <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>基线时间戳生成</h3>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/12204711165/3e3f/fd0a/61d4/96c6b64a1357f664ef04497b4dd30ba7.png\" alt=\"时间轴\"></p>\n<p>回放支持随意拖拽的关键在于传入时间偏移量 <code class=\"language-text\">timeOffset</code> 参数：</p>\n<ul>\n<li>回放的总时长 = events[n].timestamp - events[0].timestamp，<code class=\"language-text\">n</code> 为事件队列总长度减一；</li>\n<li>时间轴的总时长为回放的总时长，鼠标拖拽的起始位置对应时间轴上的坐标为<code class=\"language-text\">timeOffset</code>；</li>\n<li>根据初始事件的 <code class=\"language-text\">timestamp</code> 和 <code class=\"language-text\">timeOffset</code> 计算出拖拽后的 <code class=\"language-text\">基线时间戳(baselineTime)</code>；</li>\n<li>再从所有的事件队列中根据事件的 <code class=\"language-text\">timestamp</code> 截取 <code class=\"language-text\">基线时间戳(baselineTime)</code> 后的事件队列，即需要回放的事件队列。</li>\n</ul>\n<h3>回放 Action 队列转换</h3>\n<p>拿到事件队列后，需要遍历事件队列，根据事件类型转换为对应的回放 Action，并且添加到自定义计时器 Timer 的 Action 队列中。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">actions<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">doAction</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">castFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    delay<span class=\"token punctuation\">:</span> event<span class=\"token punctuation\">.</span>delay<span class=\"token operator\">!</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">doAction</code> 为回放的时候要调用的方法，会根据不同的 <code class=\"language-text\">EventType</code> 去做回放处理，例如 DOM 元素的变化对应增量事件 <code class=\"language-text\">EventType.IncrementalSnapshot</code>。若是增量事件类型，回放 Action 会调用 <code class=\"language-text\">applyIncremental</code> 方法去应用增量快照，根据序列化后的节点数据构建出实际的 DOM 节点，为前面序列化 DOM 的反过程，并且添加到iframe容器中。</li>\n<li><code class=\"language-text\">delay</code> = event.timestamp - baselineTime，为当前事件的时间戳相对于<code class=\"language-text\">基线时间戳</code>的差值</li>\n</ul>\n<h3>requestAnimationFrame 定时回放</h3>\n<p>Timer 自定义计时器是一个<strong>高精度</strong>计时器，主要是因为 <code class=\"language-text\">start</code> 方法内部使用了 <code class=\"language-text\">requestAnimationFrame</code> 去异步处理队列的定时回放；与浏览器原生的 <code class=\"language-text\">setTimeout</code> 和 <code class=\"language-text\">setInterval</code> 相比，<code class=\"language-text\">requestAnimationFrame</code> 不会被主线程任务阻塞，而执行 <code class=\"language-text\">setTimeout</code> 、 <code class=\"language-text\">setInterval</code> 都有可能会有被阻塞。</p>\n<p>其次，使用了 <code class=\"language-text\">performance.now()</code> 时间函数去计算当前已播放时长；<code class=\"language-text\">performance.now()</code>会返回一个用浮点数表示的、精度高达微秒级的时间戳，精度高于其他可用的时间类函数，例如 <code class=\"language-text\">Date.now()</code>只能返回毫秒级别。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token keyword\">public</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timeOffset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// performance.timing.navigationStart + performance.now() 约等于 Date.now()</span>\n    <span class=\"token keyword\">let</span> lastTimestamp <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Action 队列</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> actions <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> time <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// self.timeOffset为当前播放时长：已播放时长 * 播放速度(speed) 累加而来</span>\n      <span class=\"token comment\">// 之所以是累加，因为在播放的过程中，速度可能会更改多次</span>\n      self<span class=\"token punctuation\">.</span>timeOffset <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>time <span class=\"token operator\">-</span> lastTimestamp<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>speed<span class=\"token punctuation\">;</span>\n      lastTimestamp <span class=\"token operator\">=</span> time<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 遍历 Action 队列</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>actions<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> action <span class=\"token operator\">=</span> actions<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 差值是相对于`基线时间戳`的，当前已播放 {timeOffset}ms</span>\n        <span class=\"token comment\">// 所以需要播放所有「差值 &lt;= 当前播放时长」的 action</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>timeOffset <span class=\"token operator\">>=</span> action<span class=\"token punctuation\">.</span>delay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          actions<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          action<span class=\"token punctuation\">.</span><span class=\"token function\">doAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>actions<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> self<span class=\"token punctuation\">.</span>liveMode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        self<span class=\"token punctuation\">.</span>raf <span class=\"token operator\">=</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>check<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>raf <span class=\"token operator\">=</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>check<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>完成回放 Action 队列转换后，会调用 <code class=\"language-text\">timer.start()</code> 方法去按照正确的时间间隔依次执行回放。在每次 <code class=\"language-text\">requestAnimationFrame</code> 回调中，会正序遍历 Action 队列，若当前 Action 相对于<code class=\"language-text\">基线时间戳</code>的差值小于当前的播放时长，则说明该 Action 在本次异步回调中需要被触发，会调用 <code class=\"language-text\">action.doAction</code> 方法去实现本次增量快照的回放。回放过的 Action 会从队列中删除，保证下次 <code class=\"language-text\">requestAnimationFrame</code> 回调不会重新执行。</p>\n<h1>总结</h1>\n<p>在了解了「如何实现事件监听」、「如何序列化 DOM」、「如何实现自定义计时器」这几个关键问题后，我们基本掌握了 rrweb 的工作流程，除此之外，rrweb 在回放的时候还使用的 iframe 的沙盒模式，去实现对一些 JS 行为的限制，感兴趣的同学可以进一步去了解。</p>\n<p>总之，基于 rrweb 可以方便地帮助我们实现录屏回放功能，例如现在在 CMS 业务中落地使用的一键上报功能，通过结合 API 请求、错误堆栈信息和录屏回放功能，可以帮助开发对问题进行定位并解决，让你也成为一个 Sherlock。</p>\n<blockquote>\n<p>本文发布自 <a href=\"https://github.com/x-orpheus\">网易云音乐大前端团队</a>，文章未经授权禁止任何形式的转载。我们常年招收前端、iOS、Android，如果你准备换工作，又恰好喜欢云音乐，那就加入我们 grp.music-fe (at) corp.netease.com！</p>\n</blockquote>","frontmatter":{"title":"rrweb 带你还原问题现场","date":"2022-01-06","description":"为了快速定位并解决CMS使用过程中遇到的问题，开发了问题一键上报插件，用于还原问题现场。本文会简要阐述问题上报插件的设计，以问题上报插件作为一个入口去探索rrweb库的实现原理，主要会从事件监听、DOM 序列化、自定义计时器三方面去着重阐述。"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/rrweb/","previous":{"fields":{"slug":"/android-privacy-2/"},"frontmatter":{"title":"Android隐私合规静态检查（二）"}},"next":{"fields":{"slug":"/animation-perf/"},"frontmatter":{"title":"从浏览器渲染原理谈动画性能优化"}}}}}