{"componentChunkName":"component---src-templates-blog-post-js","path":"/treemap/","webpackCompilationHash":"92e8281876fc545fe724","result":{"data":{"site":{"siteMetadata":{"title":"云音乐大前端专栏","author":"云音乐大前端团队","siteUrl":"https://musicfe.dev"}},"markdownRemark":{"id":"de38c0a3-ae2b-5f95-b10c-b38e2ecfddfb","excerpt":"friendface4.gif 本文作者：好奇 前言 前段时间，网易云音乐上线了一个基于熟人社交投票玩法的 h5 活动，该活动依据投票数权重值来划分格子块，并通过格子块之间无缝挤压动效极大地增加了趣味性。本文将着重介绍如何基于 treemap…","html":"<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/10409306266/a700/11d3/b0ac/6fbb15d1b415c58a721b3e35224d5d9b.jpeg?imageView=1&#x26;type=webp&#x26;thumbnail=600x600\" alt=\"friendface4.gif\"></p>\n<blockquote>\n<p>本文作者：好奇</p>\n</blockquote>\n<h2>前言</h2>\n<p>前段时间，网易云音乐上线了一个基于熟人社交投票玩法的 h5 活动，该活动依据投票数权重值来划分格子块，并通过格子块之间无缝挤压动效极大地增加了趣味性。本文将着重介绍如何基于 treemap（矩形树图）来实现一个稳定的动态格子块挤压效果以及在这其中遇到的一些问题。</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/10381480244/ae6a/4f6c/cb49/b1bcf6f6fa50c174d2d65af0993d6e15.gif\" alt=\"friendface4.gif\"></p>\n<h2>矩形树图探索</h2>\n<p>输入一组 18 个随机大小数值，如何在一张固定大小 canvas 画布上，让这组数据权重值映射在二维平面上并渲染出 18 个不同大小的格子？在视觉上能够产生明显可区分的边界，让人一眼就能读出，哪几个格子的组成是最大的，哪几个格子组成似乎是微不足道的？在前端工程化实践中，联想到 webpack 打包编译的场景，使用 webpack-bundle-analyzer 插件将生成一个包含所有打包文件的可视化矩形树图。尝试使用矩形树图也许是一个思路，如下图所示：\n​</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/10381536824/c66b/c913/0633/294bbb01cbb636adabd25b7c3c2a6e0a.png?imageView=1&#x26;type=webp&#x26;thumbnail=600x600\" alt=\"webpack-analyzer\">\n​</p>\n<h2>算法的稳定性</h2>\n<p>treemap（矩形树图）最早由美国计算机科学家 <a href=\"http://www.cs.umd.edu/hcil/treemap-history/\">Ben Shneiderman</a> 在 1992 年提出。为了应对常见的硬盘已满问题，Ben Shneiderman 创新性地提出生成目录树结构可视化的想法。这种展现形式甚至在后来的矩形艺术领域也有了一席之地。\n​</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/10381762593/70e8/254e/84e0/9132405fe9699ef8a120f0021f057b1d.gif?imageView=1&#x26;type=webp&#x26;thumbnail=600x600\" alt=\"treeviz.gif\"></p>\n<h3>常见的矩形树图</h3>\n<p>许多数据集本质上是分层的，一个好的层次可视化有利于快速地多尺度区分：对单个元素的微观层面观察和对整体数据集的宏观层面观察。矩形树图适用于展示具有层级关系的数据，能够直观地体现同级之间的比较。</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/10623379585/6c27/326f/fc70/7f40949c340d8ed7ff2e98cc4183789c.jpg?imageView=1&#x26;type=webp&#x26;thumbnail=800x800\" alt=\"treemap-category\"></p>\n<p>以 d3-hierarchy 实现为例：</p>\n<h4>treemapBinary</h4>\n<p>其思想是递归地将指定节点划分为近似平衡的二叉树，为宽矩形选择水平分区，为高矩形选择垂直分区的布局方式。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> y0<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> y1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">&lt;</span> hi<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> mid <span class=\"token operator\">=</span> k <span class=\"token operator\">+</span> hi <span class=\"token operator\">>>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> valueTarget<span class=\"token punctuation\">)</span> k <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">else</span> hi <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>valueTarget <span class=\"token operator\">-</span> sums<span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>sums<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> valueTarget<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">)</span> <span class=\"token operator\">--</span>k<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> valueLeft <span class=\"token operator\">=</span> sums<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> valueOffset<span class=\"token punctuation\">,</span>\n        valueRight <span class=\"token operator\">=</span> value <span class=\"token operator\">-</span> valueLeft<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 宽矩形</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x1 <span class=\"token operator\">-</span> x0<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">-</span> y0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> xk <span class=\"token operator\">=</span> value <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>x0 <span class=\"token operator\">*</span> valueRight <span class=\"token operator\">+</span> x1 <span class=\"token operator\">*</span> valueLeft<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> value <span class=\"token punctuation\">:</span> x1<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> valueLeft<span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> y0<span class=\"token punctuation\">,</span> xk<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> valueRight<span class=\"token punctuation\">,</span> xk<span class=\"token punctuation\">,</span> y0<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 高矩形</span>\n      <span class=\"token keyword\">var</span> yk <span class=\"token operator\">=</span> value <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>y0 <span class=\"token operator\">*</span> valueRight <span class=\"token operator\">+</span> y1 <span class=\"token operator\">*</span> valueLeft<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> value <span class=\"token punctuation\">:</span> y1<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> valueLeft<span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> y0<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> yk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> valueRight<span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> yk<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>示例图：<br>\n<img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/10403110344/08a0/eab0/5614/44507db2179f275888eb7bd612c9ecfa.png?imageView=1&#x26;type=webp&#x26;thumbnail=500x500\" alt=\"binary.png\"></p>\n<h4>treemapDice</h4>\n<p>根据每个指定节点的子节点 value 值，对输入 x0, y0, x1, y1 坐标计算出的矩形区域，按照水平方向进行分割。从给定矩形的左边缘(x0)坐标开始，分割的子元素按顺序排列。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> y0<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> y1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> nodes <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span>\n        node<span class=\"token punctuation\">,</span>\n        i <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        n <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n        k <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>x1 <span class=\"token operator\">-</span> x0<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> parent<span class=\"token punctuation\">.</span>value\n\n    <span class=\"token comment\">// 按顺序水平分割排列</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>y0 <span class=\"token operator\">=</span> y0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>y1 <span class=\"token operator\">=</span> y1<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>x0 <span class=\"token operator\">=</span> x0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>x1 <span class=\"token operator\">=</span> x0 <span class=\"token operator\">+=</span> node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">*</span> k<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>示例图：</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/10403112189/8a80/0a96/d713/b39dd5ac7cbf8e10c22381b24ef69b87.png?imageView=1&#x26;type=webp&#x26;thumbnail=500x500\" alt=\"dice.png\">\n​</p>\n<h4>treemapSlice</h4>\n<p>根据每个指定节点的子节点 value 值，对输入 x0, y0, x1, y1 坐标计算出的矩形区域，按照垂直方向进行分割。从给定矩形的上边缘(y0)坐标开始，分割的子元素按顺序排列。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> y0<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> y1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> nodes <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span>\n        node<span class=\"token punctuation\">,</span>\n        i <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        n <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n        k <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>x1 <span class=\"token operator\">-</span> x0<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> parent<span class=\"token punctuation\">.</span>value\n\n    <span class=\"token comment\">// 按顺序垂直分割排列</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>y0 <span class=\"token operator\">=</span> y0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>y1 <span class=\"token operator\">=</span> y1<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>x0 <span class=\"token operator\">=</span> x0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>x1 <span class=\"token operator\">=</span> x0 <span class=\"token operator\">+=</span> node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">*</span> k<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>示例图：</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/10403110686/9145/b759/6658/4c6ad5d0544f3cf83841473dca84e31f.png?imageView=1&#x26;type=webp&#x26;thumbnail=500x500\" alt=\"slice.png\"></p>\n<h4>treemapSliceDice</h4>\n<p>如果指定节点的深度值为奇数，则执行 treemapSlice 否则执行 treemapDice。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> y0<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> y1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 节点深度判定</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>depth <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> slice <span class=\"token punctuation\">:</span> dice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> y0<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>示例图：</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/10403111406/d042/43cc/6ff8/5f4e08f3d59e954c9c79b2ea88267398.png?imageView=1&#x26;type=webp&#x26;thumbnail=500x500\" alt=\"slicedice.png\"></p>\n<h4>treemapSquarify</h4>\n<p>这种正方化（squarified）树图布局会尽可能的使用指定的纵横比（ratio）来切分矩形，使生成的矩形尽量接近正方形，拥有更佳的平均长宽比。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">squarifyRatio</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ratio<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> y0<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> y1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i0 <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Find the next non-empty node.</span>\n        <span class=\"token keyword\">do</span> sumValue <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">[</span>i1<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value\n        minValue <span class=\"token operator\">=</span> maxValue <span class=\"token operator\">=</span> sumValue\n        alpha <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dy <span class=\"token operator\">/</span> dx<span class=\"token punctuation\">,</span> dx <span class=\"token operator\">/</span> dy<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">*</span> ratio<span class=\"token punctuation\">)</span>\n        beta <span class=\"token operator\">=</span> sumValue <span class=\"token operator\">*</span> sumValue <span class=\"token operator\">*</span> alpha\n        minRatio <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxValue <span class=\"token operator\">/</span> beta<span class=\"token punctuation\">,</span> beta <span class=\"token operator\">/</span> minValue<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// Keep adding nodes while the aspect ratio maintains or improves.</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i1 <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sumValue <span class=\"token operator\">+=</span> nodeValue <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">[</span>i1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nodeValue <span class=\"token operator\">&lt;</span> minValue<span class=\"token punctuation\">)</span> minValue <span class=\"token operator\">=</span> nodeValue\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nodeValue <span class=\"token operator\">></span> maxValue<span class=\"token punctuation\">)</span> maxValue <span class=\"token operator\">=</span> nodeValue\n            beta <span class=\"token operator\">=</span> sumValue <span class=\"token operator\">*</span> sumValue <span class=\"token operator\">*</span> alpha\n            newRatio <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxValue <span class=\"token operator\">/</span> beta<span class=\"token punctuation\">,</span> beta <span class=\"token operator\">/</span> minValue<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newRatio <span class=\"token operator\">></span> minRatio<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                sumValue <span class=\"token operator\">-=</span> nodeValue\n                <span class=\"token keyword\">break</span>\n            <span class=\"token punctuation\">}</span>\n            minRatio <span class=\"token operator\">=</span> newRatio\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/10624373153/f017/7317/d0a2/874ffc9cd2c40a850213e846635a0b2d.png?imageView=1&#x26;type=webp&#x26;thumbnail=500x500\" alt=\"squarify.png\"></p>\n<h4>treemapResquarify</h4>\n<p>treemapResquarify 首次布局采用 squarified 树图方式，保证具有较好的平均长宽比。后续即便是数据变化也只改变节点的大小，而不会改变节点的相对位置。这种布局方式在树图的动画表现上效果将会更好，因为避免了节点变动导致布局不稳定性，而这种不稳定可能会分散了人的注意力。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">resquarify</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> y0<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> y1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rows <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span>_squarify<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> rows<span class=\"token punctuation\">.</span>ratio <span class=\"token operator\">===</span> ratio<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> rows<span class=\"token punctuation\">,</span>\n            row<span class=\"token punctuation\">,</span>\n            nodes<span class=\"token punctuation\">,</span>\n            i<span class=\"token punctuation\">,</span>\n            j <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            n<span class=\"token punctuation\">,</span>\n            m <span class=\"token operator\">=</span> rows<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n            value <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span>value\n        <span class=\"token comment\">// 后续布局，只改变节点的大小，而不会改变相对位置</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>j <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span>row <span class=\"token operator\">=</span> rows<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>nodes <span class=\"token operator\">=</span> row<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> row<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> row<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+=</span> nodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">.</span>dice<span class=\"token punctuation\">)</span>\n                <span class=\"token function\">treemapDice</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> y0<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> value <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>y0 <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">-</span> y0<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> row<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> y1<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span> <span class=\"token function\">treemapSlice</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> y0<span class=\"token punctuation\">,</span> value <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>x0 <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x1 <span class=\"token operator\">-</span> x0<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> row<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> x1<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">)</span>\n            value <span class=\"token operator\">-=</span> row<span class=\"token punctuation\">.</span>value\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 首次布局采用 squarify 算法</span>\n        parent<span class=\"token punctuation\">.</span>_squarify <span class=\"token operator\">=</span> rows <span class=\"token operator\">=</span> <span class=\"token function\">squarifyRatio</span><span class=\"token punctuation\">(</span>ratio<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> x0<span class=\"token punctuation\">,</span> y0<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">)</span>\n        rows<span class=\"token punctuation\">.</span>ratio <span class=\"token operator\">=</span> ratio\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>示例图：</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/10403111362/b0e9/cb3d/424f/1bad4a13bd668b81768bba2d29ae1c9e.png?imageView=1&#x26;type=webp&#x26;thumbnail=500x500\" alt=\"resquarify.png\"></p>\n<p>详细矩形树图效果可查看 <a href=\"https://hijiangtao.github.io/d3-treemap-with-react-demo\">demo</a></p>\n<h4>总结</h4>\n<p>平均长宽比是指生成的矩形长宽的比值，越佳的平均长宽比，矩形越接近正方形，用户观感的体验也越好。节点有序性是指输入数据权重值发生变化时，树图节点位置的变化程度。有序的节点，树图的稳定性也更加优秀。</p>\n<table>\n<thead>\n<tr>\n<th><strong>​</strong></th>\n<th><strong>平均长宽比</strong></th>\n<th><strong>节点有序性</strong></th>\n<th><strong>稳定性</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>treemapBinary</td>\n<td>良好</td>\n<td>部分有序</td>\n<td>一般</td>\n</tr>\n<tr>\n<td>treemapSlice</td>\n<td>很差</td>\n<td>有序</td>\n<td>优秀</td>\n</tr>\n<tr>\n<td>treemapDice</td>\n<td>很差</td>\n<td>有序</td>\n<td>优秀</td>\n</tr>\n<tr>\n<td>treemapResquarify</td>\n<td>良好</td>\n<td>有序</td>\n<td>优秀</td>\n</tr>\n<tr>\n<td>treemapSquarify</td>\n<td>优秀</td>\n<td>部分有序</td>\n<td>一般</td>\n</tr>\n</tbody>\n</table>\n<p>可以发现，treemapSquarify 拥有更优秀的平均长宽比。相对的，在首次布局时 treemapResquarify 也同样拥有不错的平均长宽比，在后续数据权重值发生变化时，由于节点的有序特性，treemapResquarify 也将有很好的稳定性。</p>\n<h2>让矩形树图更生动</h2>\n<h4>先来个 demo</h4>\n<p>基于 treemapSquarify 树图思路，开始一组 demo 测试。输入一组随机的带 value 值数据的入参：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> 'red' <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>  color<span class=\"token operator\">:</span> 'black' <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>  color<span class=\"token operator\">:</span> 'blue' <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    ...\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>执行 treemapSquarify 计算，对生成的结果进行转化处理，可得到一组带位置坐标和宽高大小的数据列表，如下所示：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      y<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      width<span class=\"token operator\">:</span> <span class=\"token number\">330.56</span><span class=\"token punctuation\">,</span>\n      height<span class=\"token operator\">:</span> <span class=\"token number\">352.94</span><span class=\"token punctuation\">,</span>\n      data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> 'red' <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      y<span class=\"token operator\">:</span> <span class=\"token number\">352.94</span><span class=\"token punctuation\">,</span>\n      width<span class=\"token operator\">:</span> <span class=\"token number\">330.56</span><span class=\"token punctuation\">,</span>\n      height<span class=\"token operator\">:</span> <span class=\"token number\">247.06</span><span class=\"token punctuation\">,</span>\n      data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> 'black' <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      x<span class=\"token operator\">:</span> <span class=\"token number\">330.56</span><span class=\"token punctuation\">,</span>\n      y<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      width<span class=\"token operator\">:</span> <span class=\"token number\">295.56</span><span class=\"token punctuation\">,</span>\n      height<span class=\"token operator\">:</span> <span class=\"token number\">157.89</span><span class=\"token punctuation\">,</span>\n      data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> 'blue' <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n    ...\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>可以看到，输入的数据是一组随机的数组，经过 treemapSquarify 计算后，得到一组包含 x、y 坐标，width、height 大小的数据。基于这组初始输入数据，我们给数据加一个偏移量。通过加一个时间 time 自增量，利用三角函数特性，把偏移量限定在初始数据的一定范围内，就能得到一组初始数据偏移后的结果数据。通过不断来回改变输入数据的偏移范围，便可以持续地生成多组初始数据偏移后的结果数据。如下所示：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// requestAnimationFrame 循环动画</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">builtGraphCanvas</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 主逻辑</span>\n  <span class=\"token function\">treeMapAniLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>builtGraphCanvas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">builtGraphCanvas</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 主逻辑</span>\n<span class=\"token function\">treeMapAniLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 通过 time 自增，</span>\n  time <span class=\"token operator\">+=</span> <span class=\"token number\">0.02</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> dataInput<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 利用三角函数限制范围，来回改变输入</span>\n    <span class=\"token keyword\">const</span> increment <span class=\"token operator\">=</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>time <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>time <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 赋值偏移量，改变初始数据范围</span>\n    dataInput<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span>\n      vote<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span> <span class=\"token operator\">*</span> vote<span class=\"token punctuation\">[</span>vote<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> increment <span class=\"token operator\">*</span> increment\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// treemapSquarify 算法生成结果</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">getTreemap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n   data<span class=\"token punctuation\">:</span> dataInput<span class=\"token punctuation\">,</span>      <span class=\"token comment\">// 带偏移量的数据输入</span>\n   width<span class=\"token punctuation\">:</span> canvasWidth<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 画布宽</span>\n   height<span class=\"token punctuation\">:</span> canvasHeight<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 画布高</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>根据获得的多组数据偏移返回的结果，在 canvas 画布上把 x、y 坐标和 width、height 大小绘制出来：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">treeMapAniLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 绘制 canvas 矩形</span>\n  <span class=\"token function\">drawStrokeRoundRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cxt<span class=\"token punctuation\">.</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cxt<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cxt<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span>width <span class=\"token operator\">-</span> radius<span class=\"token punctuation\">,</span> height <span class=\"token operator\">-</span> radius<span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cxt<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">...</span>\n    cxt<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cxt<span class=\"token punctuation\">.</span><span class=\"token function\">stroke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在浏览器 requestAnimationFrame 重绘方法中，由于初始输入数据在时间自增下不断改变偏移量，从而不断地生成一系列的结果数据，渲染动画如下：</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/10381894399/e9c4/d90f/1970/4616e9eae3dd2d8b9773c94795d8e5d8.gif\" alt=\"friendface1.gif\"></p>\n<h4>格子重排</h4>\n<p>如上文所述，输入一组数据值，采用 treemapSquarify 计算生成格子坐标和宽高，利用时间自增使动画持续地“挤压”起来，这看起来很完美。试着更换几组不同的输入数据源，验证在各类输入场景下的渲染效果，其中一组如下所示：</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/10381892941/cddf/a53e/1545/d2a67d91cf6a2ba5514e76a64d072ff8.gif\" alt=\"friendface2.gif\"></p>\n<p>请仔细看，格子块在完美地“挤压”了短暂时间后，出现了跳动的现象。在实际的输入数据源测试中，发现格子出现跳动的概率比较高。这实际上是格子块发生了位置重排。如果我们把初始数据生成的格子块在画布按标号 1-18 排序，发现最初在位置 3 的格子块，经过自增偏移变化后，再次计算生成的该格子块位置已经变成了第 5。如果输入数据源差异较大时，这类位置的偏移将会更加严重。所以直接的表象就是，画布上的格子动画在不间断跳动，稳定性非常差，用户的观感体验也会不好。\n​</p>\n<h4>重排的原因</h4>\n<p>如上文所述，treemapSquarify 使得生成的矩形尽量接近正方形，拥有很好的平均长宽比。实际上，它并不会在一开始就同时考虑所有层级该如何划分，这能避免带来很大的计算量。<br>\n其思想主要是：</p>\n<ul>\n<li>将子节点按顺序从大到小进行排列；</li>\n<li>当一个节点开始填充时，存在 2 种选择：直接添加到当前行，或者固定当前行，在剩余的矩形空间中开始一个新行；</li>\n<li>最终选择哪种，取决于哪种选择将带来更佳平均长宽比，长宽比越低，越能改善当前布局</li>\n</ul>\n<p>以数据集 [3，2，6，4，1，2，6] 为例，排序后的序列为 [6, 6, 4, 3, 2, 2, 1] 。<br>\n步骤 ①，格子块长度 4，宽度 1.5，故长宽比 4/1.5 = 2.6..<br>\n步骤 ②，格子块长度 3，宽度 2，故长宽比 3/2 = 1.5<br>\n...以此类推，采用策略是选择平均长宽比值更低的选择</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/10623403881/c10f/1a29/3de7/ba91e0b4d47f128c3f3ab2b36ad017dd.png?imageView=1&#x26;type=webp&#x26;thumbnail=800x800\" alt=\"progress.jpeg\"></p>\n<p>因此，如果对输入数据进行一定的偏移时，treemapSquarify 的计算是贪心的，它只会采用当前最佳的长宽比选择，故当偏移量超过某个边界值时必然会出现输出的格子块位置不一致的情况，从而出现重排的现象。</p>\n<h4>解决重排</h4>\n<p>其实，在上文总结矩形树图时就有提到，treemapResquarify 由于在首次布局时采用的是 treemapSquarify，因此也同样拥有很好平均长宽比。当数据权重值发生变化时，由于 treemapResquarify 独有的节点有序特性，将具备良好的稳定性。因此，我们采用 treemapResquarify 算法来对输入值生成结果，如下所示：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>treeMap <span class=\"token operator\">=</span> d3\n    <span class=\"token punctuation\">.</span><span class=\"token function\">treemap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">.</span>canvasWidth <span class=\"token operator\">-</span> size<span class=\"token punctuation\">.</span>arrowSize <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">.</span>canvasHeight <span class=\"token operator\">-</span> size<span class=\"token punctuation\">.</span>arrowSize <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 期望最佳长宽比 ratio = 1</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">tile</span><span class=\"token punctuation\">(</span>d3<span class=\"token punctuation\">.</span>treemapResquarify<span class=\"token punctuation\">.</span><span class=\"token function\">ratio</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>根据输入值，得到 leavseResult 转换输出结果。此时，即便是对输入值做一定的偏移，输出结果的位置也是稳定的。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 生成 treemap 结果</span>\n<span class=\"token function\">generateTreeMap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">voteTree<span class=\"token punctuation\">:</span> Array<span class=\"token operator\">&lt;</span>number<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'idx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> treeData<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">.</span>idx <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> d<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">treeMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> leavesResult <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">leaves</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 转换输出结构</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result <span class=\"token operator\">=</span> leavesResult<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    x<span class=\"token punctuation\">:</span> i<span class=\"token punctuation\">.</span>x0 <span class=\"token operator\">+</span> arrowSize<span class=\"token punctuation\">,</span>\n    y<span class=\"token punctuation\">:</span> i<span class=\"token punctuation\">.</span>y0 <span class=\"token operator\">+</span> arrowSize<span class=\"token punctuation\">,</span>\n    width<span class=\"token punctuation\">:</span> i<span class=\"token punctuation\">.</span>x1 <span class=\"token operator\">-</span> i<span class=\"token punctuation\">.</span>x0<span class=\"token punctuation\">,</span>\n    height<span class=\"token punctuation\">:</span> i<span class=\"token punctuation\">.</span>y1 <span class=\"token operator\">-</span> i<span class=\"token punctuation\">.</span>y0<span class=\"token punctuation\">,</span>\n    value<span class=\"token punctuation\">:</span> i<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>由于实际输入的偏移量并不会偏离初始数据很大，输出结果位置偏移的影响也相对不会很大。</p>\n<p>在采用 treemapResquarify 来解决重排问题前，也尝试过一些其他的思路。比如，记录首次生成的计算结果，在执行输入数据自增偏移时，尝试去检查是否有格子“跳变”，如果检查到格子“跳变”的边界时，则尝试从当前格子的周边“借”一点格子空间，并阻止格子跳变，从而强制避免重排问题。但并不能很好解决这个问题，在某些输入数据反差较大时会出现明显动画卡顿。</p>\n<h4>转场动画</h4>\n<p>除了上述已知票数的结果挤压动画，我们还做了很多转场动画。细分的话可以分为 6 个场景，为了保证动画的流畅性，这 6 个场景都做在一张 canvas 画布里。以开场动画为例，格子块按顺序逐渐鼓起来再逐渐缩小到白色格子块状态，如下图所示</p>\n<h4><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/10381893551/95e9/96ac/fdae/174b22d8f32152a69046fc649036d295.gif\" alt=\"open.gif\"></h4>\n<p>实现原理是，在一定的时间范围内，从状态 A 过渡到状态 B。则把这段时间作为 BezierEasing 方法的自增变量输出一个贝塞尔动画值，每一帧都根据这个动画值改变状态 A 的 x，y 坐标和 width，height 值，逐步趋向状态 B，核心代码如下所示：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">e2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">BezierEasing</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 开场动画</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>time0 <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> timeOffset <span class=\"token operator\">*</span> result<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>time4 <span class=\"token operator\">+=</span> <span class=\"token number\">1.5</span> <span class=\"token operator\">*</span> aniSpeed<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> easing <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">e2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>time4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> resultA <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">cloneDeep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 转换动画，A 状态转换到 0 票白色状态</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setTagByResult</span><span class=\"token punctuation\">(</span>resultA<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>initialZeroResult<span class=\"token punctuation\">,</span> easing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//传入的两组 result 及补间参数 easing ，输出混合的 result。</span>\n<span class=\"token function\">setTagByResult</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resultA<span class=\"token punctuation\">,</span> resultB<span class=\"token punctuation\">,</span> easing</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> result<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> resultA<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> easing <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>resultB<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> resultA<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> resultA<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> easing <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>resultB<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> resultA<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span>\n      resultA<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">+</span> easing <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>resultB<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">-</span> resultA<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span>\n      resultA<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>height <span class=\"token operator\">+</span> easing <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>resultB<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>height <span class=\"token operator\">-</span> resultA<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如下图所示，是一个已知的挤压结果页转场到白色格子块的选择状态。实现的原理也是类似的，在一定的时间范围内，通过改变格子的坐标位置和大小，从挤压状态逐步过渡到白色格子块状态。还有更多动画状态的变化，比如从一个“未选择”的格子块状态变成“已选择”状态；格子块选满以后，从“选满”状态过渡到结果挤压状态等，这里就不再详述了。</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/10381893572/9f75/0656/48cf/8b8344d145f4298441487e49d786b387.gif\" alt=\"reselect.gif\"></p>\n<h2>让排列错落有致</h2>\n<p>极端场景下的边界处理，永远是一个令人棘手的事情。\n​</p>\n<h4>极端场景显示问题</h4>\n<p>可以想象，最高票数和最低票数相差很大的情况，就会出现排版完全混乱的情况。\n如下图所示，最高票数仅仅是 20 票，最低票数 0 票，就出现了小的票数格子块空间被挤压到快“呼吸”不过来的情况。</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/10403288890/49e5/882d/8700/e7d47308cf1f8cf8e776aa5cf78a0714.gif\" alt=\"luanqibazao.gif\"></p>\n<p>如果区分再明显一点，最高票数 140 票，最小票数 0 票，将变得更加混乱，如下图所示：</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/10403288871/a5f1/e7d1/343c/37330febdcbdf5e74941a959f489d07c.gif\" alt=\"luanqibazao2.gif\"></p>\n<p>因此，需要对输入数据源进行一个合理的转换，将超出最大倍数比的情况进行分情况处理，转化在一个合理的区间内。\n最大倍数比分成 3 个阶段处理，分别是 10 倍，30 倍，30 倍以上区间。实际上，就是把一个不可预知的随机范围转换成一个可控的合理区间内。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token comment\">// x=1-2区间，由双曲正切函数调整，输出增长率快到缓慢</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reviseMethod</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">tanh</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">/</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">computeVote</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vote<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span> quota<span class=\"token punctuation\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 基底100 + 倍数 * 每倍的份额</span>\n    <span class=\"token keyword\">return</span> base <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>vote <span class=\"token operator\">/</span> minVote <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> quota<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> stage1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> stage2 <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 10倍区间</span>\n  <span class=\"token keyword\">const</span> ceilStage1 <span class=\"token operator\">=</span> <span class=\"token number\">600</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 30倍区间</span>\n  <span class=\"token keyword\">const</span> ceilStage2 <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 30倍以上区间</span>\n  <span class=\"token keyword\">const</span> ceilStage3 <span class=\"token operator\">=</span> <span class=\"token number\">1300</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> quota<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 最大最小倍数比</span>\n  <span class=\"token keyword\">const</span> curMultiple <span class=\"token operator\">=</span> maxVote <span class=\"token operator\">/</span> minVote<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> voteList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> finalVote<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 不同阶段处理方案</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curMultiple <span class=\"token operator\">&lt;=</span> stage1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      quota <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ceilStage1 <span class=\"token operator\">-</span> base<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> stage1<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> reviseValue <span class=\"token operator\">=</span> <span class=\"token function\">reviseMethod</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      finalVote <span class=\"token operator\">=</span> <span class=\"token function\">computeVote</span><span class=\"token punctuation\">(</span>reviseValue<span class=\"token punctuation\">,</span> quota<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curMultiple <span class=\"token operator\">&lt;=</span> stage2 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      quota <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ceilStage2 <span class=\"token operator\">-</span> base<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> stage2<span class=\"token punctuation\">;</span>\n      finalVote <span class=\"token operator\">=</span> <span class=\"token function\">computeVote</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> quota<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 需要隐藏部分票数，隐藏部分尖角等</span>\n      quota <span class=\"token operator\">=</span> ceilStage3 <span class=\"token operator\">/</span> curMultiple<span class=\"token punctuation\">;</span>\n      finalVote <span class=\"token operator\">=</span> <span class=\"token function\">computeVote</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> quota<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> finalVote<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>除了格子块的排版分区间处理，格子块内部的“表情”、“标签词”、“票数”也可能存在互相挤压、互相遮挡的情况。下图所示的是最早针对标签词罗列的处理方案，实际需要处理场景远比这个多的多。包括的边界条件有：标签词自动横排，自动竖排处理，字体大小自适应，多个字不同处理，两两之间格子间遮挡处理等。罗列可能出现的任何一种边界情况，处理它！</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/10381947956/72f2/faac/7ae3/ced56bc84a90ded4ebafdc26731f514d.jpg?imageView=1&#x26;type=webp&#x26;thumbnail=800x800\" alt=\"39f13ae31dbdb9f961d4eefc803cf560.jpg\"></p>\n<h4>排版太规整</h4>\n<p>如下图所示，动画看起来并没有什么问题。但是最高票数相比最低票数已经超过 10 倍，我们认为，动画的排版太“均匀规整”了，以至于可能让人无法一眼有所区别。为了追求更加明显可区分的排版，让格子块之间足够错乱有致，增加一些“凌乱之美”的气质。通过对初始输入数据源分组处理，能够比较好地优化这个问题。</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/10403444557/3faf/82c4/b4b5/4c1b3171873d30a5ce7ec2e3f0564ed2.gif\" alt=\"cuoluanyouzhi.gif\"></p>\n<p>最初定义的 18 个输入数据源是并列在一个层级的。我们设想，有没有可能把数据分组，则当数据映射到二维平面时，格子之间也被划分成多个模块展示，是不是就会更加错乱有致。如下代码所示，我们把初始的票数值全部定为 1 票，定义多个 group 分组层级，实际的表现效果确实更加“凌乱”了。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 初始带组的数据</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> dataGroupTree <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'allGroup'</span><span class=\"token punctuation\">,</span>\n  children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      name<span class=\"token punctuation\">:</span> <span class=\"token string\">'group1'</span><span class=\"token punctuation\">,</span>\n      children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          idx<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n          value<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token operator\">...</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      name<span class=\"token punctuation\">:</span> <span class=\"token string\">'group2'</span><span class=\"token punctuation\">,</span>\n      children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n       \t<span class=\"token operator\">...</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      name<span class=\"token punctuation\">:</span> <span class=\"token string\">'group3'</span><span class=\"token punctuation\">,</span>\n      children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token operator\">...</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>带一点可爱尖角</h4>\n<p>一开始，我们设计的挤压格子块带有一点尖角，如下图所示，在格子块边缘设计有可爱的尖角。但是我们发现，在有些场景下尖角之间会存在互相遮挡甚至碰到格子表情的情况。由于需要针对性做边界处理，最后因为时间关系被拿掉了。</p>\n<p><img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/10403457285/dbba/0e83/cb3b/d15257dbfeae84b48e807eae2dd3afde.gif\" alt=\"arrow.gif\"></p>\n<h4>其他问题</h4>\n<p>其实，除了上述罗列一些问题以外，还遇到诸多大大小小的问题。<br>\n​\n比如，对挤压动效截屏并转成图片分享出去是很重要的一个点。当我们在对 canvas 画布进行截屏分享时，截屏的动作是基于 html2canvas 库的能力，但截屏出来的图片经常偶现空白，尝试在 canvas 绘制图片时对图片链接添加 crossOrigin=\"anonymous\" 属性发现解决了问题。后来又发现，在微信长按保存图片时，在部分安卓机型上依然存在偶现截图图片空白的问题，最后通过在 canvas 绘制图片时把输入图片链接转成 base64 地址最终解决了该问题。<br>\n总之，想要完成一个可爱而”完美“地挤压效果，可能会遇到各种各样的问题，无他，处理它！</p>\n<h2>小结</h2>\n<p>最后，用海报一句话结尾：<br>\n它值得琢磨，有点东西，少年感永不过期。</p>\n<p><img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/10403884896/f080/29c7/456c/94733f5fcd97466c1b9cd4d8c6494ab2.jpeg?imageView=1&#x26;type=webp&#x26;thumbnail=800x800\" alt=\"result\"></p>\n<p>有兴趣的同学可以在网易音乐 App 搜索“泡泡”，体验一下。\n​</p>\n<h2>参考资料</h2>\n<ul>\n<li>​<a href=\"http://www.cs.umd.edu/hcil/treemap-history/index.shtml\">Treemaps for space-constrained visualization of hierarchies</a></li>\n<li><a href=\"https://www.win.tue.nl/~vanwijk/stm.pdf\">Squarified Treemaps</a>​</li>\n<li><a href=\"https://github.com/d3/d3-hierarchy\">d3-hierarchy</a></li>\n<li><a href=\"https://hijiangtao.github.io/d3-treemap-with-react-demo/\">d3-treemap-demo</a></li>\n</ul>\n<blockquote>\n<p>本文发布自 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/x-orpheus\">网易云音乐大前端团队</a>，文章未经授权禁止任何形式的转载。我们常年招收前端、iOS、Android，如果你准备换工作，又恰好喜欢云音乐，那就加入我们 grp.music-fe(at)corp.netease.com！</p>\n</blockquote>","frontmatter":{"title":"如何生成稳定的动态 treemap（矩形树图）关键技术揭晓","date":"2021-09-15","description":"前段时间，网易云音乐上线了一个基于熟人社交投票玩法的 h5 活动，本文主要介绍了该活动是如何基于矩形树图算法来实现一个无缝挤压动效以及在这其中遇到一些问题。"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/treemap/","previous":{"fields":{"slug":"/agp-upgrade/"},"frontmatter":{"title":"AGP 升级之旅"}},"next":{"fields":{"slug":"/webassembly/"},"frontmatter":{"title":"深入 WebAssembly 之解释器实现篇"}}}}}