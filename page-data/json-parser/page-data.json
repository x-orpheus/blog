{"componentChunkName":"component---src-templates-blog-post-js","path":"/json-parser/","webpackCompilationHash":"09d0cd2fb8e3fb4f6b90","result":{"data":{"site":{"siteMetadata":{"title":"云音乐大前端专栏","author":"云音乐大前端团队","siteUrl":"https://musicfe.dev"}},"markdownRemark":{"id":"ca5b7aa4-d679-5f4f-919e-361710545379","excerpt":"header.png 简介 Zergling 是我们团队自研的埋点管理平台，默认的数据格式如下： 一种自定义 json 格式，比较不同在于： 带注释 字符串通过  分割符，当做数组用 value 为基本类型，没有 object。 在实际过程中有一些不符合规范的地方: 用 value 当做注释，而不用 comment…","html":"<p><img src=\"https://p1.music.126.net/qE1Yxs0kk3qfv9aVS8ttyQ==/109951164457475823.png\" alt=\"header.png\"></p>\n<h3>简介</h3>\n<p>Zergling 是我们团队自研的埋点管理平台，默认的数据格式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"page\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"dsong|ufm\"</span><span class=\"token punctuation\">,</span> \n    <span class=\"token string\">\"resource\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"song\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 歌曲</span>\n    <span class=\"token string\">\"resourceid\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 资源 id</span>\n    <span class=\"token string\">\"target\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 不感兴趣</span>\n    <span class=\"token string\">\"targetid\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"button\"</span><span class=\"token punctuation\">,</span> \n    <span class=\"token string\">\"reason\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> \n    <span class=\"token string\">\"reason_type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"fixed\"</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>一种自定义 json 格式，比较不同在于：</p>\n<ol>\n<li>带注释</li>\n<li>字符串通过 <code class=\"language-text\">|</code> 分割符，当做数组用</li>\n<li>value 为基本类型，没有 object。</li>\n</ol>\n<p>在实际过程中有一些不符合规范的地方:</p>\n<ol>\n<li>用 value 当做注释，而不用 comment\n<img src=\"https://p1.music.126.net/GTDZ6tpW1IBspn46k2WgUA==/109951164323598647.png\"></li>\n</ol>\n<p>应该为</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">id<span class=\"token punctuation\">:</span> <span class=\"token number\">1111</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 活动 url</span></code></pre></div>\n<ol start=\"2\">\n<li>用 <code class=\"language-text\">/</code> 做数组分割符，而不是 <code class=\"language-text\">|</code>。\n<img src=\"https://p1.music.126.net/j-kDIS3_lMdf1XSih4S9oA==/109951164323601543.png\"></li>\n</ol>\n<p>除了上述错误类型之外，还有其他错误类型。于是决定写一个自定义的 json parser 来规范输入问题。总的分为词法分析和语法分析两部分。</p>\n<h3>词法分析</h3>\n<p>词法分析主要将源码分割成很多小的子字符串变成一系列的 token.</p>\n<p>比如下面的赋值语句。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> language <span class=\"token operator\">=</span> <span class=\"token string\">\"lox\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>词法分析后，输出 5 个 token 如下\n<img src=\"https://p1.music.126.net/0osyr10fgzMWKjRfi_r63w==/109951164323596336.png\" /></p>\n<p>所以词法分析的关键就在于如何分割字符串。</p>\n<p>我们先定义 token 的数据结构 (Token.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Token</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span>value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> type<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>再定义 Token 类型 (TokenType.js), 参考 <a href=\"https://github.com/antlr/grammars-v4/blob/master/javascript/JavaScriptLexer.g4\">token type</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> TokenType <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    OpenBrace<span class=\"token punctuation\">:</span> <span class=\"token string\">\"{\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 左括号</span>\n    CloseBrace<span class=\"token punctuation\">:</span> <span class=\"token string\">\"}\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 右括号</span>\n    StringLiteral<span class=\"token punctuation\">:</span> <span class=\"token string\">\"StringLiteral\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 字符串类型</span>\n    BitOr<span class=\"token punctuation\">:</span> <span class=\"token string\">\"|\"</span><span class=\"token punctuation\">,</span>\n    SingleSlash<span class=\"token punctuation\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">COLON</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\":\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">QUOTE</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'\"'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">NUMBER</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"NUMBER\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">COMMA</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">NIL</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"NIL\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 结束的字符</span>\n    <span class=\"token constant\">EOF</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"EOF\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//end token</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>做好上面准备之后，就可以着手处理字符了。</p>\n<p>先定义一个类 Lexer (Lexer.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Lexer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input <span class=\"token operator\">=</span> input<span class=\"token punctuation\">;</span><span class=\"token comment\">// 输入</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 指针</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentChar <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tokens <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回的所有 token</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>词法处理是一个个读取字符串，然后分别组装成一个 Token。我们先从简单的符号比如 <code class=\"language-text\">{</code>,<code class=\"language-text\">=</code>开始，如果碰到符号，我们就直接返回对应的 token。对于空白，我们就忽略。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 获取所有的 token;</span>\n  <span class=\"token function\">lex</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentChar <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentChar <span class=\"token operator\">!=</span> TokenType<span class=\"token punctuation\">.</span><span class=\"token constant\">NIL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">// 如果当前不是结束的字符</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">skipWhiteSpace</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> token <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentChar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"{\"</span><span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">consume</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          token <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Token</span> <span class=\"token punctuation\">(</span>TokenType<span class=\"token punctuation\">.</span>OpenBrace<span class=\"token punctuation\">,</span> TokenType<span class=\"token punctuation\">.</span>OpenBrace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"}\"</span><span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">consume</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          token <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Token</span> <span class=\"token punctuation\">(</span>TokenType<span class=\"token punctuation\">.</span>CloseBrace<span class=\"token punctuation\">,</span> TokenType<span class=\"token punctuation\">.</span>CloseBrace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\":\"</span><span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">consume</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          token <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Token</span> <span class=\"token punctuation\">(</span>TokenType<span class=\"token punctuation\">.</span><span class=\"token constant\">COLON</span><span class=\"token punctuation\">,</span> TokenType<span class=\"token punctuation\">.</span><span class=\"token constant\">COLON</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">consume</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          token <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Token</span> <span class=\"token punctuation\">(</span>TokenType<span class=\"token punctuation\">.</span><span class=\"token constant\">COMMA</span><span class=\"token punctuation\">,</span> TokenType<span class=\"token punctuation\">.</span><span class=\"token constant\">COMMA</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span> <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Token</span> <span class=\"token punctuation\">(</span>TokenType<span class=\"token punctuation\">.</span><span class=\"token constant\">EOF</span><span class=\"token punctuation\">,</span> TokenType<span class=\"token punctuation\">.</span><span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">this.skipWhiteSpace</code> 主要是处理空白，如果当前字符是空白符，我们就移动指针 <code class=\"language-text\">pos++</code>，去判断下一个字符，直到不是空白符为止。<code class=\"language-text\">this.consume</code> 这个函数就是用来移动指针.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">skipWhiteSpace</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEnd</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isSpace</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">consume</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">isSpace</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">char</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\">/\\s/gi</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> re<span class=\"token punctuation\">.</span><span class=\"token function\">test</span> <span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/** 获取下一个字符 */</span>\n<span class=\"token function\">consume</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEnd</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentChar <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentChar <span class=\"token operator\">=</span> TokenType<span class=\"token punctuation\">.</span><span class=\"token constant\">NIL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 判断是否读完</span>\n<span class=\"token function\">isEnd</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>对于符号的处理直接返回 token 即可，对于字符串稍微麻烦一点。比如\n<code class=\"language-text\">&quot;page&quot;</code> 这个我们需要读 4 个字符组合在一起。因此，当我们碰到 <code class=\"language-text\">&quot;</code> 双引号的时候，我们就进入 getStringToken 函数来处理。</p>\n<p>(Lexer.js->lex)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token keyword\">case</span> <span class=\"token string\">'\"'</span><span class=\"token punctuation\">:</span>\n      token <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStringToken</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>对于 <code class=\"language-text\">getStringToken</code>。我们这里比较特别，一般的 string 没有 <code class=\"language-text\">|</code> 这个分隔符，比如 <code class=\"language-text\">&quot;page&quot;</code>。而我们的例子里面如 <code class=\"language-text\">&quot;dsong|ufm&quot;</code>, 将返回 <code class=\"language-text\">dsong</code>, <code class=\"language-text\">|</code>, <code class=\"language-text\">ufm</code>, 三个 token。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">getStringToken</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> buffer <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLetter</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentChar<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentChar <span class=\"token operator\">==</span> TokenType<span class=\"token punctuation\">.</span>BitOr<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentChar <span class=\"token operator\">==</span> TokenType<span class=\"token punctuation\">.</span>BitOr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span>\n              <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Token</span> <span class=\"token punctuation\">(</span>TokenType<span class=\"token punctuation\">.</span>StringLiteral<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Token</span> <span class=\"token punctuation\">(</span>TokenType<span class=\"token punctuation\">.</span>BitOr<span class=\"token punctuation\">,</span> TokenType<span class=\"token punctuation\">.</span>BitOr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          buffer <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> \n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>对于 comment 类似，当我们碰到字符是 <code class=\"language-text\">/</code> 的时候，我们就假设他是注释 <code class=\"language-text\">//xxx</code>。对于 comment 就自动忽略。</p>\n<p>(Lexer.js->lex)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">case</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">:</span>\n        token <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCommentToken</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">getCommentToken</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 简单处理两个 /</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span> <span class=\"token punctuation\">(</span>TokenType<span class=\"token punctuation\">.</span>SingleSlash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span> <span class=\"token punctuation\">(</span>TokenType<span class=\"token punctuation\">.</span>SingleSlash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNewLine</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentChar<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEnd</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">consume</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">isNewLine</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">char</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\">/\\r?\\n/</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> re<span class=\"token punctuation\">.</span><span class=\"token function\">test</span> <span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>接下来处理数字，类似 string, 比如 111，三个字符，我们当做一个数字。所以我们规定当字符是数字的时候，我们就进入处理 <code class=\"language-text\">getNumberToken</code> 来处理数字。</p>\n<p>（Lexer.js->lex）</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNumber</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentChar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          token <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNumberToken</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span> <span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentChar<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is not a valid type</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<p>接下来处理 <code class=\"language-text\">getNumberToken</code> 函数</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">getNumberToken</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> buffer <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNumber</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentChar<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEnd</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      buffer <span class=\"token operator\">+=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentChar<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">consume</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Token</span> <span class=\"token punctuation\">(</span>TokenType<span class=\"token punctuation\">.</span><span class=\"token constant\">NUMBER</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">isNumber</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">char</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\">/\\d/g</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> re<span class=\"token punctuation\">.</span><span class=\"token function\">test</span> <span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>至此，所有的我们就获得了所有的 token。</p>\n<h3>语法分析</h3>\n<p>词法分析可以解决用 value 当做注释的问题，比如 <code class=\"language-text\">{id:&quot;活动 id&quot;}</code> 这种写法，但是无法处理 <code class=\"language-text\">{id:&quot;page || dsong&quot;}</code> 这种。因为按照我们的逻词法处理 <code class=\"language-text\">&quot;page || dsong&quot;</code> 会返回 <code class=\"language-text\">page,|,|,dsong</code> 4 个 string token。\n语法分析主要是对逻辑的验证。</p>\n<p>我们先找到 <a href=\"https://github.com/antlr/grammars-v4/blob/master/json/JSON.g4\">json 的语法定义</a>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">grammar <span class=\"token constant\">JSON</span><span class=\"token punctuation\">;</span>\n\njson\n    <span class=\"token punctuation\">:</span> value\n    <span class=\"token punctuation\">;</span>\n\n\nvalue\n    <span class=\"token punctuation\">:</span> <span class=\"token constant\">STRING</span>\n    <span class=\"token operator\">|</span> <span class=\"token constant\">NUMBER</span>\n    <span class=\"token operator\">|</span> obj\n    <span class=\"token operator\">|</span> <span class=\"token string\">'true'</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">'false'</span>\n    <span class=\"token punctuation\">;</span>\n\nobj \n    <span class=\"token punctuation\">:</span> <span class=\"token string\">\"{\"</span> <span class=\"token function\">pair</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">,</span>pair<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> <span class=\"token string\">\"}\"</span>\n    <span class=\"token punctuation\">;</span>\n\npair\n    String<span class=\"token punctuation\">:</span> value\n\n<span class=\"token constant\">STRING</span>\n   <span class=\"token punctuation\">:</span> <span class=\"token string\">'\"'</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">ESC</span> <span class=\"token operator\">|</span> <span class=\"token constant\">SAFECODEPOINT</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> <span class=\"token string\">'\"'</span>\n   <span class=\"token punctuation\">;</span>\n\n<span class=\"token constant\">NUMBER</span>\n   <span class=\"token punctuation\">:</span> <span class=\"token string\">'-'</span><span class=\"token operator\">?</span> <span class=\"token constant\">INT</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> <span class=\"token constant\">EXP</span><span class=\"token operator\">?</span>\n   <span class=\"token punctuation\">;</span></code></pre></div>\n<p>由于我们需要支持 <code class=\"language-text\">a|b|c</code>, 所以修改一下对 string 的处理</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">value\n    <span class=\"token punctuation\">:</span> <span class=\"token constant\">STRING</span></code></pre></div>\n<p>改为</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">value\n    <span class=\"token punctuation\">:</span> <span class=\"token constant\">STRING</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">|</span><span class=\"token constant\">STRING</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span></code></pre></div>\n<p>得到上面的语法定义之后，就是考虑如何将其转为代码。\ngrammar json 这行只是定义，可以忽略。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">json\n    <span class=\"token punctuation\">:</span> value\n    <span class=\"token punctuation\">;</span>\n\n\nvalue\n    <span class=\"token punctuation\">:</span> <span class=\"token constant\">STRING</span>\n    <span class=\"token operator\">|</span> <span class=\"token constant\">NUMBER</span>\n    <span class=\"token operator\">|</span> obj\n    <span class=\"token operator\">|</span> <span class=\"token string\">'true'</span>\n    <span class=\"token operator\">|</span> <span class=\"token string\">'false'</span>\n    <span class=\"token punctuation\">;</span>\n<span class=\"token constant\">NUMBER</span>\n   <span class=\"token punctuation\">:</span> <span class=\"token string\">'-'</span><span class=\"token operator\">?</span> <span class=\"token constant\">INT</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> <span class=\"token constant\">EXP</span><span class=\"token operator\">?</span>\n   <span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里 json 可以推导出 value, value 又可以推导出 Number 和 'true'。Number 又可以推导出其它，而 'true' 这种是基本数据类型无法再推导其他了。</p>\n<p>对于上面这种可以推导出其他的比如 json,value,Number 我们就叫做非终止符 nonterminal。</p>\n<p>'true' 这种就叫做终止符 terminal。</p>\n<p>对于 Number 和 String 右边，由于只是字符的范围限定，我们也当做 terminal 来处理。</p>\n<p>因为，将上面的语法定义转为具体代码，规则如下：</p>\n<ol>\n<li>如果是 <code class=\"language-text\">nonterminal</code>，则对应转成函数</li>\n<li><code class=\"language-text\">terminal</code>。 匹配当前的 token 类型是 terminal 类型，然后指针移到下一个</li>\n<li>如果是<code class=\"language-text\">|</code>。则对应<code class=\"language-text\">if</code> 或者 <code class=\"language-text\">switch</code></li>\n<li>如果是 <code class=\"language-text\">*</code> 或者 <code class=\"language-text\">+</code>。<code class=\"language-text\">while</code> 或者 <code class=\"language-text\">for</code> 循环</li>\n<li>如果是问号<code class=\"language-text\">？</code>。则转化为 <code class=\"language-text\">if</code></li>\n</ol>\n<p>所以左边的 <code class=\"language-text\">value,Number,json</code> 等都是函数，而右边的比如 <code class=\"language-text\">{</code>,<code class=\"language-text\">true</code> 都是先匹配当前 token 类型，然后获取下一个 token。</p>\n<p>我们将 json 的语法转为如下。</p>\n<p>先定义 Parser (Parser.js)，输入是一个词法分析 lexer。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Parser</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">lexer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lexer <span class=\"token operator\">=</span> lexer<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentToken <span class=\"token operator\">=</span> lexer<span class=\"token punctuation\">.</span><span class=\"token function\">getNextToken</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后解析第一条规则，将 <code class=\"language-text\">json:value</code> 都转为函数。</p>\n<p>(Paser.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token comment\">/**\n    json: value\n  */</span>\n  <span class=\"token function\">paseJSON</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseValue</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>接下来解析 value 的语法，由于 <code class=\"language-text\">|</code> 是选择语句，我们将其转为 switch。根据当前 token 类型是对象还是 number,string, 走到不同的分支。</p>\n<p>（Parser.js->parseValue）</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">   <span class=\"token comment\">/**\n     * value\n    : STRING (|STRING)*\n    | NUMBER\n    | obj\n    | 'true'\n    | 'false'\n    ; */</span>\n  <span class=\"token function\">parseValue</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentToken<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> TokenType<span class=\"token punctuation\">.</span>OpenBrace<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> TokenType<span class=\"token punctuation\">.</span>StringLiteral<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseString</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> TokenType<span class=\"token punctuation\">.</span><span class=\"token constant\">NUMBER</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseNumber</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">case</span> TokenType<span class=\"token punctuation\">.</span><span class=\"token constant\">TRUE</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">case</span> TokenType<span class=\"token punctuation\">.</span><span class=\"token constant\">FLASE</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>根据规则 2，terminal, 匹配当前的 token 类型，然后获取下一个 token. 所以当碰到 <code class=\"language-text\">true</code> 和 <code class=\"language-text\">value</code> 的时候，switch 语句改为如下。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token keyword\">case</span> TokenType<span class=\"token punctuation\">.</span><span class=\"token constant\">TRUE</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span> <span class=\"token punctuation\">(</span>TokenType<span class=\"token punctuation\">.</span><span class=\"token constant\">TRUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> TokenType<span class=\"token punctuation\">.</span><span class=\"token constant\">FLASE</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span> <span class=\"token punctuation\">(</span>TokenType<span class=\"token punctuation\">.</span><span class=\"token constant\">FALSE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我们定义一个 <code class=\"language-text\">eat</code> 函数，匹配当前 token 再获取下一个，如果不符合直接抛出错误信息。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**match the current token and get the next */</span>\n  <span class=\"token function\">eat</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">tokenType</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentToken<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> tokenType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentToken <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lexer<span class=\"token punctuation\">.</span><span class=\"token function\">getNextToken</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">this.currentToken is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentToken\n        <span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> doesn't match the input </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tokenType<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>接下来处理 <code class=\"language-text\">parseObject</code>，它的语法是 <code class=\"language-text\">&quot;{&quot; pair (,pair)* &quot;}</code>。</p>\n<p><code class=\"language-text\">{</code> 是 terminal，直接 <code class=\"language-text\">eat</code>. <code class=\"language-text\">pair</code> 变量，直接转为函数。</p>\n<p><code class=\"language-text\">(,pair)*</code>。根据规则 4，<code class=\"language-text\">*</code> 转为 <code class=\"language-text\">while</code> 语句。</p>\n<p><code class=\"language-text\">*</code> 是正则符号表示零或者更多的情况，所以当碰到这种情况的时候，我们先判断是否匹配逗号，然后执行 <code class=\"language-text\">parsePair</code> 函数。</p>\n<p>代码如下</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token comment\">/**obj \n    : \"{\" pair (,pair)* \"}\"\n    ; */</span>\n  <span class=\"token function\">parseObject</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span> <span class=\"token punctuation\">(</span>TokenType<span class=\"token punctuation\">.</span>OpenBrace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">parsePair</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentToken<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> TokenType<span class=\"token punctuation\">.</span><span class=\"token constant\">COMMA</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span> <span class=\"token punctuation\">(</span>TokenType<span class=\"token punctuation\">.</span><span class=\"token constant\">COMMA</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">parsePair</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span> <span class=\"token punctuation\">(</span>TokenType<span class=\"token punctuation\">.</span>CloseBrace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>解决了上面的语法转换之后，接下来的代码可以根据上面的处理转换。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token comment\">/** String: value */</span>\n  <span class=\"token function\">parsePair</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span> <span class=\"token punctuation\">(</span>TokenType<span class=\"token punctuation\">.</span>StringLiteral<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span> <span class=\"token punctuation\">(</span>TokenType<span class=\"token punctuation\">.</span><span class=\"token constant\">COLON</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseValue</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//STRING (|STRING)*</span>\n  <span class=\"token function\">parseString</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span> <span class=\"token punctuation\">(</span>TokenType<span class=\"token punctuation\">.</span>StringLiteral<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentToken<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> TokenType<span class=\"token punctuation\">.</span>BitOr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span> <span class=\"token punctuation\">(</span>TokenType<span class=\"token punctuation\">.</span>BitOr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span> <span class=\"token punctuation\">(</span>TokenType<span class=\"token punctuation\">.</span>StringLiteral<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">parseNumber</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span> <span class=\"token punctuation\">(</span>TokenType<span class=\"token punctuation\">.</span><span class=\"token constant\">NUMBER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>  至此，我们的工作已经完成。</p>\n<p>  对于开头提出的两个问题。</p>\n<p>  第一个用 <code class=\"language-text\">value</code> 当做注释，而不用 <code class=\"language-text\">comment</code>。这个在词法解析阶段解决。判断字符串用的是 /w/ 的正则。 而这个正则在碰到中文会抛出错误提示。</p>\n<p>  第二个用 <code class=\"language-text\">/</code> 做数组分割符，而不是 <code class=\"language-text\">|</code>。 这个在语法解析阶段解决。\n当解析 <code class=\"language-text\">value: STRING (|STRING)*</code> 这条规则的时候，如果碰到的字符串后面碰到的不是 | 分隔符，则会报错。</p>\n<p>  上面的两个 test 已经覆盖，完整代码及 test case 请查看 <a href=\"https://github.com/xff1874/BI-JSON-Parser\">github</a></p>\n<blockquote>\n<p>本文发布自 <a href=\"https://github.com/x-orpheus\">网易云音乐前端团队</a>，文章未经授权禁止任何形式的转载。我们一直在招人，如果你恰好准备换工作，又恰好喜欢云音乐，那就 <a href=\"mailto:grp.music-fe@corp.netease.com\">加入我们</a>！</p>\n</blockquote>","frontmatter":{"title":"从零实现自定义 JSON Parser","date":"2019-10-31","description":"Zergling 是我们团队自研的埋点管理平台，默认的数据格式有点特殊，需要一个自定义的 json parser 来规范输入问题，总的分为词法分析和语法分析两部分"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/json-parser/","previous":{"fields":{"slug":"/svrx/"},"frontmatter":{"title":"Server-X：一款可能提升你十倍工作效率的工具"}},"next":{"fields":{"slug":"/javascript-bitwise-operators/"},"frontmatter":{"title":"JavaScript 中的位运算和权限设计"}}}}}