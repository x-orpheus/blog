{"componentChunkName":"component---src-templates-blog-post-js","path":"/delta-mind/","webpackCompilationHash":"b5d8b655ececfda1ccdc","result":{"data":{"site":{"siteMetadata":{"title":"云音乐大前端专栏","author":"云音乐大前端团队","siteUrl":"https://musicfe.dev"}},"markdownRemark":{"id":"c0ef42a5-a309-54a1-9e89-1342b10a4ea0","excerpt":"header.png 图片来源：https://picography.co/rocket-liftoff/ 本文作者：潘万强 一.引子 在这里「增量」这个概念的对立面是「全量」。在 Linux 系统中当需要备份数据或者跨服务器同步文件时，会用到一个叫 rsync 的工具，它的速度会比 scp/cp…","html":"<p><img src=\"https://p1.music.126.net/sB3W7AQghHzOhDaPJlkILw==/109951165104351028.jpg\" alt=\"header.png\"></p>\n<blockquote>\n<p>图片来源：<a href=\"https://picography.co/rocket-liftoff/\">https://picography.co/rocket-liftoff/</a></p>\n</blockquote>\n<blockquote>\n<p>本文作者：潘万强</p>\n</blockquote>\n<h2>一.引子</h2>\n<p>在这里「增量」这个概念的对立面是「全量」。在 Linux 系统中当需要备份数据或者跨服务器同步文件时，会用到一个叫 <a href=\"https://juejin.im/entry/589c699d8d6d81006c819721\">rsync</a> 的工具，它的速度会比 <a href=\"https://www.runoob.com/linux/linux-comm-scp.html\">scp/cp</a> 命令更快，因为它会先判断已经存在的数据和新数据的差异，只传输不同的部分，即「增量」同步。</p>\n<p>在前端开发工程化领域，本文将介绍用「增量」思想提升代码检查、打包构建环节的速度，从而实现开发过程的效率提升。</p>\n<h2>二.增量代码检查</h2>\n<p>前端使用 ESLint 做代码规范静态检查。随着前端工程化的发展，我们会将代码检查与开发工作流集成，在<strong>代码提交前</strong>和<strong>代码交付前</strong>自动做 ESLint 检查。代码提交检查即在开发者每一次 commit 时通过 git hooks 触发 ESLint 检查，当工程代码量很大时开发者每一次提交代码甚至要等数分钟时间才能检查完。代码交付检查即借助持续集成流程，比如在 MR 时触发代码检查，这是会阻断 MR 的流程的，经常会出现这样一种情况，某个 MR 仅仅修改了一行代码，却要扫瞄整个项目，这会严重影响持续集成的效率。所以大部分情况下并不需要进行 ESLint 的全量扫描，我们更关心的是新增代码是否存在问题。</p>\n<p>接下来我们通过自定义 git 的 pre-commit 钩子脚本来为一个工程实现增量代码提交检查能力。</p>\n<h3>2.1 寻找修改的文件</h3>\n<p>本脚本中 ESLint 检查执行到文件这一粒度。实现增量代码检查首先就是要能找到增量代码，即修改了哪些文件。我们借助 git 版本管理工具寻找提交时暂存区和 HEAD 之间的差异，找到修改的文件列表。</p>\n<ol>\n<li>使用 <code class=\"language-text\">git diff</code> 找到本次提交修改的文件，加 <code class=\"language-text\">--diff-filter=ACMR</code> 参数是为了去掉被删除的文件，删除的文件不需要再做检查了；</li>\n<li>使用 child_process 模块的 exec 函数在 node 中执行 git 的命令；</li>\n<li>输出的是由修改的文件组成的字符串，做简单的字符串处理提取出要检查的文件列表；</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> exec <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>exec<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">GITDIFF</span> <span class=\"token operator\">=</span> <span class=\"token string\">'git diff --cached --diff-filter=ACMR --name-only'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 执行 git 的命令</span>\n<span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token constant\">GITDIFF</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> stdout</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">exec error: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>error<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 对返回结果进行处理，拿到要检查的文件列表</span>\n    <span class=\"token keyword\">const</span> diffFileArray <span class=\"token operator\">=</span> stdout<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">diffFile</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token regex\">/(\\.js|\\.jsx)(\\n|$)/gi</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>diffFile<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'待检查的文件：'</span><span class=\"token punctuation\">,</span> diffFileArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>2.2 对被修改的文件进行代码检查</h3>\n<p>ESLint 提供了同名类函数（<a href=\"https://eslint.org/docs/developer-guide/nodejs-api#eslint-class\">ESLint</a>）作为 Node.js API 调用（低于 7.0.0 版本使用 <a href=\"https://eslint.org/docs/developer-guide/nodejs-api#cliengine\">CLIEngine</a> 类），这样我们能在 node 脚本中执行代码检查并拿到检查结果。</p>\n<ol>\n<li>使用 ESLint 的 lintFiles 函数对文件列表进行代码检查；</li>\n<li>返回的结果是个数组，包含每个文件的检查结果，对数组进行处理拿到检查结果并输出提示；</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ESLint <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'eslint'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> linter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ESLint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 上文拿到待检查的文件列表后</span>\n\n<span class=\"token keyword\">let</span> errorCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> warningCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>diffFileArray<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 执行ESLint代码检查</span>\n    <span class=\"token keyword\">const</span> eslintResults <span class=\"token operator\">=</span> linter<span class=\"token punctuation\">.</span><span class=\"token function\">lintFiles</span><span class=\"token punctuation\">(</span>diffFileArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 对检查结果进行处理，提取报错数和警告数</span>\n    eslintResults<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// result的数据结构如下：</span>\n        <span class=\"token comment\">// {</span>\n        <span class=\"token comment\">//     filePath: \"xxx/index.js\",</span>\n        <span class=\"token comment\">//     messages: [{</span>\n        <span class=\"token comment\">//         ruleId: \"semi\",</span>\n        <span class=\"token comment\">//         severity: 2,</span>\n        <span class=\"token comment\">//         message: \"Missing semicolon.\",</span>\n        <span class=\"token comment\">//         line: 1,</span>\n        <span class=\"token comment\">//         column: 13,</span>\n        <span class=\"token comment\">//         nodeType: \"ExpressionStatement\",</span>\n        <span class=\"token comment\">//         fix: { range: [12, 12], text: \";\" }</span>\n        <span class=\"token comment\">//     }],</span>\n        <span class=\"token comment\">//     errorCount: 1,</span>\n        <span class=\"token comment\">//     warningCount: 1,</span>\n        <span class=\"token comment\">//     fixableErrorCount: 1,</span>\n        <span class=\"token comment\">//     fixableWarningCount: 0,</span>\n        <span class=\"token comment\">//     source: \"\\\"use strict\\\"\\n\"</span>\n        <span class=\"token comment\">// }</span>\n        errorCount <span class=\"token operator\">+=</span> result<span class=\"token punctuation\">.</span>errorCount<span class=\"token punctuation\">;</span>\n        warningCount <span class=\"token operator\">+=</span> result<span class=\"token punctuation\">.</span>warningCount<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>messages <span class=\"token operator\">&amp;&amp;</span> result<span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ESLint has found problems in file: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token punctuation\">.</span>filePath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            result<span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>severity <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Error : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> in Line </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token punctuation\">.</span>line<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> Column </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token punctuation\">.</span>column<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Warning : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> in Line </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token punctuation\">.</span>line<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> Column </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>msg<span class=\"token punctuation\">.</span>column<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                \n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>2.3 友好的提示及错误处理</h3>\n<ol>\n<li>在命令行界面做友好的输出提示，本次代码检查是否通过；</li>\n<li>如果检查结果存在错误，就以非 0 值退出，git 将放弃本次提交。</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errorCount <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\x1b[31m'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ESLint failed</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\x1b[31m'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">✖ </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>errorCount <span class=\"token operator\">+</span> warningCount<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> problems(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>errorCount<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> error, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>warningCount<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> warning)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>warningCount <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\x1b[32m'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ESLint passed, but need to be improved.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\x1b[32m'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ESLint passed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>到这里 pre-commit 钩子脚本就完成了，只需要在 package.json 文件中配置下脚本的执行就能实现增量代码检查了。最终实现的效果是开发者在提交代码时再也不用等待全量代码检查完成了，脚本会很快找到有改动的文件并检查完。</p>\n<p>如果想要在自己的项目中实现这一功能，可以直接使用开源库 <a href=\"https://github.com/okonet/lint-staged\">lint-staged</a> 结合 <a href=\"https://github.com/typicode/husky\">husky</a> 一起用。</p>\n<p>代码交付时的增量检查实现方式和上面的步骤类似，关键点就是找到增量的部分。</p>\n<h3>2.4 结果对比</h3>\n<p>以一个包含 460 个 js 文件的中等规模工程为例，下图中左边为全量代码检查的耗时，右边为增量代码检查的耗时：\n<img src=\"https://p6.music.126.net/obj/wo3DlcOGw6DClTvDisK1/3677412019/b616/753a/78fa/184f898ab38973715411268947d3a634.png\"></p>\n<p>如果开发者只修改了一个文件，在提交代码时全量检查需要耗时 38 秒，而增量检查只需要耗时 2 秒。</p>\n<h3>2.5 更细粒度的增量检查</h3>\n<p>前文实现了文件粒度的增量检查，考虑到大型项目中可能存在很多大文件，如果只修改了几行代码就需要对整个文件进行 ESLint 检查依然是个低效的操作，我们可以尝试找到代码行粒度的增量代码做检查。</p>\n<p>首先仍然用 <code class=\"language-text\">git diff</code> 命令找到修改的部分，这里需要做一些字符串的处理提取出代码块；然后使用 ESLint Node.js API 中的 <a href=\"https://eslint.org/docs/developer-guide/nodejs-api#%E2%97%86-eslint-linttext-code-options\">lintText</a> 方法对代码块做检查。感兴趣的同学可以自己尝试实现一下哦。</p>\n<h2>三.增量打包构建</h2>\n<p>考虑这样一个业务场景，在一个有数百个页面的大型多页 Web 应用中（MPA），每一次全量打包构建都需要几十分钟的时间。有时候开发者只改了一个页面或者一个公共组件，却需要等上很久才能发布上线，严重影响持续集成、线上问题解决的效率。</p>\n<p>以使用 webpack 进行打包构建为例，我们同样尝试用「增量」思想来优化这个问题。</p>\n<h3>3.1 寻找修改的文件</h3>\n<p>和前文类似，第一步依旧是找到增量代码，即本次发布修改了哪些文件。最简单的仍然是选择用 <code class=\"language-text\">git diff</code> 命令来实现。和增量代码检查不一样的是，这里要对比待发布的集成分支和主干，找到之间的差异文件列表。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> execSync <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>execSync<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>posix<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">GITDIFF</span> <span class=\"token operator\">=</span> <span class=\"token string\">'git diff origin/master --name-only'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 执行 git 的命令</span>\n<span class=\"token keyword\">const</span> diffFiles <span class=\"token operator\">=</span> <span class=\"token function\">execSync</span><span class=\"token punctuation\">(</span><span class=\"token constant\">GITDIFF</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        encoding<span class=\"token punctuation\">:</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">filePath</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> path<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>获得了修改的文件列表后，并不能直接触发 webpack 打包，需要根据文件之间的引用关系找到入口文件，把需要重新打包的页面入口传给 webpack。</p>\n<h3>3.2 计算增量入口</h3>\n<p>思路是先构建每个页面入口文件的依赖树，如果这棵树包含了上述被修改的文件，就说明这个页面需要被重新打包。如图所示：</p>\n<p><img src=\"https://p1.music.126.net/IGLqgMFeNQUg-u0moiRA2g==/109951165102990029.png\"></p>\n<p>被修改的文件前文已经能获取到，接下来是要构建每个入口文件的<strong>依赖树</strong>。前端模块化规范很多，自己去实现每个文件的依赖分析需要兼顾各种情况，这里推荐一个开源库 <a href=\"https://github.com/pahen/madge\">Madge</a>，它将代码转成抽象语法树进行分析，最终返回一棵依赖树。</p>\n<p>以上图中两个入口文件为例，它们的依赖树如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 被修改的文件列表</span>\n<span class=\"token keyword\">const</span> diffFiles <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'util/fetch.js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 用 madge 库计算依赖树的示例代码，具体可查看官方文档</span>\n<span class=\"token comment\">// Promise.all([madge('./demo/index.js'), madge('./demo/buy.js')]).then((result) => {</span>\n<span class=\"token comment\">//     result.forEach((e) => {</span>\n<span class=\"token comment\">//         console.log(e.obj());</span>\n<span class=\"token comment\">//     })</span>\n<span class=\"token comment\">// });</span>\n<span class=\"token comment\">// 最后得到的依赖树如下</span>\n<span class=\"token keyword\">const</span> relyTree <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// demo/index.js 文件的依赖树</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'demo/a.jsx'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'util/fetch.js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'demo/b.js'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'demo/index.js'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'demo/a.jsx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'demo/b.js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'util/fetch.js'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// demo/buy.js 文件的依赖树</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'util/env.js'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'demo/buy.js'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'demo/c.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'demo/d.js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'demo/c.js'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'util/env.js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'demo/d.js'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>深度遍历每个入口文件的依赖树，根据是否包含被修改的文件列表中的文件来判断是否需要重新打包构建，示例代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/* 计算增量入口示例代码 */</span>\n<span class=\"token comment\">// 全量页面入口</span>\n<span class=\"token keyword\">const</span> entries <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'demo/index.js'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'demo/buy.js'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 判断两个数组是否存在交集</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">intersection</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr1<span class=\"token punctuation\">,</span> arr2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    arr1<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ele</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>ele<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> flag<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 计算增量入口</span>\n<span class=\"token keyword\">const</span> incrementEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> i <span class=\"token keyword\">in</span> relyTree<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> j <span class=\"token keyword\">in</span> relyTree<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">intersection</span><span class=\"token punctuation\">(</span>relyTree<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> diffFiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            incrementEntries<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>比如我们已知本次发布是修改了 <code class=\"language-text\">util/fetch.js</code> 这个文件，遍历以上 2 个依赖树就得知只有 <code class=\"language-text\">demo/index</code> 这个页面受影响，修改 webpack 的配置只把这个文件作为入口参数触发打包就可以极大提升打包构建的速度。</p>\n<h3>3.3 边界情况</h3>\n<p>前端工程还有一些依赖是 package.json 文件里描述的 npm 包，安装在 node_modules 文件夹里，模块之间的依赖关系非常复杂。简单起见，当第一步 <code class=\"language-text\">git diff</code> 发现 package.json 里有模块升级时，考虑到这不是高频事件，可以直接触发<strong>全量打包</strong>。</p>\n<h3>3.4 结果对比</h3>\n<p>以一个包含 50 个页面的 MPA 工程为例，下图中左边为全量打包构建的耗时，右边为增量打包构建的耗时：\n<img src=\"https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/3684080528/348b/c4c5/383e/de67455b1d7385f14158a86d39bb432e.png\">\n假设开发者修改了2个页面，增量打包机制通过计算只传入这两个页面入口给 webpack，整个打包构建流程将从 7 分钟缩短为 50 秒，极大提升持续集成的效率。</p>\n<h2>小结</h2>\n<p>本文以<strong>增量代码检查</strong>和<strong>增量打包构建</strong>两个特定业务场景为例，介绍了「增量」思想在前端开发工程化中如何做效率提升。这两个案例不一定能直接照搬到大家的前端工程化实践中去，旨在介绍这样一种编程设计思想，大家可以发挥各自的想象力运用到更多的地方。</p>\n<h2>参考资料</h2>\n<ul>\n<li><a href=\"https://github.com/tianwailaike61/IncrementLint\">IncrementLint</a></li>\n<li><a href=\"https://eslint.org/docs/developer-guide/nodejs-api#-eslintlintTextcode-options\">ESLint Node.js API</a></li>\n<li><a href=\"https://juejin.im/post/5d1f1e595188254b732b60a3\">使用 husky、commitlint 和 lint-staged 来构建你的前端工作流</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1489250\">如何让你的lint检查更加高效？</a></li>\n<li><a href=\"https://juejin.im/post/5e1c3cbdf265da3e0f4d5aa9\">使用 madge 生成工程依赖关系图</a></li>\n</ul>\n<blockquote>\n<p>本文发布自 <a href=\"https://github.com/x-orpheus\">网易云音乐大前端团队</a>，文章未经授权禁止任何形式的转载。我们常年招收前端、iOS、Android，如果你准备换工作，又恰好喜欢云音乐，那就加入我们 grp.music-fe(at)corp.netease.com！</p>\n</blockquote>","frontmatter":{"title":"用「增量」思想提升代码检查和打包构建的效率","date":"2020-08-26","description":"当一个前端工程代码量越来越大时，开发发布流程中代码检查、构建的时间也越来越久。本文将介绍用「增量」思想提升代码检查、打包构建环节的速度，从而实现开发过程的效率提升。"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/delta-mind/","previous":{"fields":{"slug":"/form/"},"frontmatter":{"title":"面向复杂场景的表单解决方案"}},"next":{"fields":{"slug":"/rn/"},"frontmatter":{"title":"云音乐 React Native 体系建设与发展"}}}}}